{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"https://pythonav.com/index/","title":"Home"},{"location":"Linux/GDB/","text":"","title":"GDB"},{"location":"Linux/rsync/","text":"rsync -avL --info=progress2 -r username@192.168.1.27:/data/dataset/username/coco /data/dataset/path \u66f4\u591a: https://linux.die.net/man/1/rsync rsync \u7528\u6cd5\u6559\u7a0b","title":"rsync\u6307\u4ee4"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","text":"ssh \u767b\u5f55 \u767b\u9646\u6d41\u7a0b \u672c\u5730\u5411\u8fdc\u7a0b\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5 \u670d\u52a1\u7aef\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d1\u9001\u7ed9\u53d1\u8d77\u767b\u5f55\u7684\u672c\u5730\u7aef \u672c\u5730\u5bf9\u8be5\u5b57\u7b26\u4e32\u4f7f\u7528\u79c1\u94a5\uff08~/.ssh/id_rsa\uff09\u52a0\u5bc6\u53d1\u9001\u7ed9\u670d\u52a1\u7aef \u670d\u52a1\u7aef\u4f7f\u7528\u516c\u94a5\uff08~/.ssh/id_rsa.pub\uff09\u5bf9\u79c1\u94a5\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u5bc6 \u670d\u52a1\u7aef\u5bf9\u6bd4\u89e3\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u548c\u7b2c\u4e00\u6b21\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u672a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u4e00\u81f4\u5219\u5224\u65ad\u4e3a\u767b\u5f55\u6210\u529f \u8fdc\u7a0b\u767b\u5f55\u670d\u52a1\u5668 ssh user@hostname \u914d\u7f6e\u6587\u4ef6 \u521b\u5efa\u6587\u4ef6 ~/.ssh/config #config\u7684\u6587\u4ef6\u5185\u5bb9 Host myserver1 HostName IP\u5730\u5740\u6216\u57df\u540d User \u7528\u6237\u540d Host myserver2 HostName IP\u5730\u5740\u6216\u57df\u540d User \u7528\u6237\u540d \u3002\u3002\u3002 \u5bc6\u94a5\u767b\u5f55 \u521b\u5efa\u5bc6\u94a5\uff1a ssh-keygen \u6267\u884c\u7ed3\u675f\u540e\uff0c~/.ssh/\u76ee\u5f55\u4e0b\u4f1a\u591a\u4e24\u4e2a\u6587\u4ef6\uff1a id_rsa\uff1a\u79c1\u94a5 id_rsa.pub\uff1a\u516c\u94a5 \u4e4b\u540e\u60f3\u514d\u5bc6\u7801\u767b\u5f55\u54ea\u4e2a\u670d\u52a1\u5668\uff0c\u5c31\u5c06\u516c\u94a5\u4f20\u7ed9\u54ea\u4e2a\u670d\u52a1\u5668\u5373\u53ef\u3002 \u4e24\u79cd\u65b9\u6cd5 1.touch ~/.ssh/authorized_keys \u5c06\u516c\u94a5\u4e2d\u7684\u5185\u5bb9\uff0c\u590d\u5236\u5230myserver\u4e2d\u7684~/.ssh/authorized_keys\u6587\u4ef6\u91cc\u5373\u53ef 2.\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u4e00\u952e\u6dfb\u52a0\u516c\u94a5\uff1a ssh-copy-id myserver ssh\u6570\u636e\u4f20\u8f93 SSH\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u8fdc\u7a0b\u4e3b\u673a\u767b\u5f55\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u6267\u884c\u64cd\u4f5c\u3002 ssh \u4e0a\u4f20\u6587\u4ef6/\u6587\u4ef6\u5939 scp source destination \u5c06source\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\u590d\u5236\u5230destination\u4e2d \u53ef\u4ee5\u4e00\u6b21\u591a\u4e2asource ssh \u4e0b\u8f7d\u6587\u4ef6/\u6587\u4ef6\u5939 scp -r ~/home myserver:/home/acs/ \u5c06\u672c\u5730\u5bb6\u76ee\u5f55\u4e2d\u7684home\u6587\u4ef6\u5939\u590d\u5236\u5230myserver\u670d\u52a1\u5668\u4e2d\u7684/home/acs/\u76ee\u5f55\u4e0b\u3002 scp -r myserver:homework . \u5c06myserver\u670d\u52a1\u5668\u4e2d\u7684~/homework/\u6587\u4ef6\u5939\u590d\u5236\u5230\u672c\u5730\u7684\u5f53\u524d\u8def\u5f84\u4e0b .\u53ef\u4ee5\u4e3a\u5176\u4ed6\u76ee\u5f55 ssh \u8fdc\u7a0b\u64cd\u63a7\u670d\u52a1\u5668 ssh myserver mkdir homework/dir -p \u5728\u670d\u52a1\u5668\u4e0a\u6267\u884c\u547d\u4ee4 \u5176\u4ed6\u7684","title":"ssh\u7684\u7b80\u5355\u5e94\u7528"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#ssh","text":"\u767b\u9646\u6d41\u7a0b \u672c\u5730\u5411\u8fdc\u7a0b\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5 \u670d\u52a1\u7aef\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d1\u9001\u7ed9\u53d1\u8d77\u767b\u5f55\u7684\u672c\u5730\u7aef \u672c\u5730\u5bf9\u8be5\u5b57\u7b26\u4e32\u4f7f\u7528\u79c1\u94a5\uff08~/.ssh/id_rsa\uff09\u52a0\u5bc6\u53d1\u9001\u7ed9\u670d\u52a1\u7aef \u670d\u52a1\u7aef\u4f7f\u7528\u516c\u94a5\uff08~/.ssh/id_rsa.pub\uff09\u5bf9\u79c1\u94a5\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u5bc6 \u670d\u52a1\u7aef\u5bf9\u6bd4\u89e3\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u548c\u7b2c\u4e00\u6b21\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u672a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u4e00\u81f4\u5219\u5224\u65ad\u4e3a\u767b\u5f55\u6210\u529f","title":"ssh \u767b\u5f55"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#_1","text":"ssh user@hostname","title":"\u8fdc\u7a0b\u767b\u5f55\u670d\u52a1\u5668"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#_2","text":"\u521b\u5efa\u6587\u4ef6 ~/.ssh/config #config\u7684\u6587\u4ef6\u5185\u5bb9 Host myserver1 HostName IP\u5730\u5740\u6216\u57df\u540d User \u7528\u6237\u540d Host myserver2 HostName IP\u5730\u5740\u6216\u57df\u540d User \u7528\u6237\u540d \u3002\u3002\u3002","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#_3","text":"\u521b\u5efa\u5bc6\u94a5\uff1a ssh-keygen \u6267\u884c\u7ed3\u675f\u540e\uff0c~/.ssh/\u76ee\u5f55\u4e0b\u4f1a\u591a\u4e24\u4e2a\u6587\u4ef6\uff1a id_rsa\uff1a\u79c1\u94a5 id_rsa.pub\uff1a\u516c\u94a5 \u4e4b\u540e\u60f3\u514d\u5bc6\u7801\u767b\u5f55\u54ea\u4e2a\u670d\u52a1\u5668\uff0c\u5c31\u5c06\u516c\u94a5\u4f20\u7ed9\u54ea\u4e2a\u670d\u52a1\u5668\u5373\u53ef\u3002 \u4e24\u79cd\u65b9\u6cd5 1.touch ~/.ssh/authorized_keys \u5c06\u516c\u94a5\u4e2d\u7684\u5185\u5bb9\uff0c\u590d\u5236\u5230myserver\u4e2d\u7684~/.ssh/authorized_keys\u6587\u4ef6\u91cc\u5373\u53ef 2.\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u4e00\u952e\u6dfb\u52a0\u516c\u94a5\uff1a ssh-copy-id myserver","title":"\u5bc6\u94a5\u767b\u5f55"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#ssh_1","text":"SSH\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u8fdc\u7a0b\u4e3b\u673a\u767b\u5f55\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u6267\u884c\u64cd\u4f5c\u3002","title":"ssh\u6570\u636e\u4f20\u8f93"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#ssh_2","text":"scp source destination \u5c06source\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\u590d\u5236\u5230destination\u4e2d \u53ef\u4ee5\u4e00\u6b21\u591a\u4e2asource","title":"ssh \u4e0a\u4f20\u6587\u4ef6/\u6587\u4ef6\u5939"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#ssh_3","text":"scp -r ~/home myserver:/home/acs/ \u5c06\u672c\u5730\u5bb6\u76ee\u5f55\u4e2d\u7684home\u6587\u4ef6\u5939\u590d\u5236\u5230myserver\u670d\u52a1\u5668\u4e2d\u7684/home/acs/\u76ee\u5f55\u4e0b\u3002 scp -r myserver:homework . \u5c06myserver\u670d\u52a1\u5668\u4e2d\u7684~/homework/\u6587\u4ef6\u5939\u590d\u5236\u5230\u672c\u5730\u7684\u5f53\u524d\u8def\u5f84\u4e0b .\u53ef\u4ee5\u4e3a\u5176\u4ed6\u76ee\u5f55","title":"ssh \u4e0b\u8f7d\u6587\u4ef6/\u6587\u4ef6\u5939"},{"location":"Linux/ssh_%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#ssh_4","text":"ssh myserver mkdir homework/dir -p \u5728\u670d\u52a1\u5668\u4e0a\u6267\u884c\u547d\u4ee4 \u5176\u4ed6\u7684","title":"ssh \u8fdc\u7a0b\u64cd\u63a7\u670d\u52a1\u5668"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/","text":"[ ] OneFlow CUDA Elementwise \u5f15\u8a00 \u9010\u5143\u7d20\u64cd\u4f5c\uff08\u4e5f\u53eb Elementwise \u64cd\u4f5c\uff09\u662f\u6307\u5bf9 Tensor \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u53d8\u6362\uff0c\u5f97\u5230\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u3002 \u5728\u6df1\u5ea6\u5b66\u4e60\u91cc\uff0c\u6709\u5f88\u591a\u7b97\u5b50\u5c5e\u4e8e Elementwise \u7b97\u5b50\u8303\u7574\uff0c\u6bd4\u5982\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff08\u5982ReLU\u3001GELU \uff09\uff0cScalarMultiply\uff08\u5bf9 Tensor \u6bcf\u4e2a\u5143\u7d20\u90fd\u4e58\u4e0a\u4e00\u4e2a\u6807\u91cf\uff09\u7b49\u64cd\u4f5c\u3002 \u4f7f\u7528 \u4e3a\u6b64 OneFlow \u9488\u5bf9\u8fd9\u79cd Elementwise \u64cd\u4f5c\u62bd\u8c61\u51fa\u4e00\u5957 CUDA \u6a21\u677f\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u628a\u8ba1\u7b97\u903b\u8f91\u5c01\u88c5\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u5185\uff0c\u5373\u53ef\u83b7\u5f97\u4e00\u4e2a CUDA Elementwise \u7b97\u5b50 \uff0c\u4ee5 ReLU \u4e3a\u4f8b\uff1a ReLU\u6fc0\u6d3b\u51fd\u6570\u8be6\u7ec6\u4ecb\u7ecd // \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97ReLU\uff08rectified linear unit\uff09\u51fd\u6570\u7684functor\u3002 // \u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u7ed3\u6784\u4f53\uff0c\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570T\uff0c\u8868\u793a\u8f93\u5165\u548c\u8f93\u51fa\u7684\u6570\u636e\u7c7b\u578b\u3002 // Write ReLU Functor. template < typename T > struct ReluFunctor { OF_DEVICE_FUNC T operator ()( T x ) const { const T zero_val = static_cast < T > ( 0 ); return ( x > zero_val ) ? x : zero_val ; } }; // \u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86ReLU\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u9996\u5148\uff0c\u58f0\u660e\u4e00\u4e2a\u5e38\u91cfzero_val\uff0c\u8868\u793a\u96f6\u503c\uff0c\u5176\u7c7b\u578b\u4e3aT\u3002 // \u7531\u4e8eT\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u4f7f\u7528static_cast\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 // \u7136\u540e\uff0c\u6839\u636eReLU\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u8f93\u5165x\u5927\u4e8e\u96f6\uff0c\u5219\u8f93\u51fa\u4e3ax\uff0c\u5426\u5219\u8f93\u51fa\u4e3a0\u3002 // \u8fd9\u4e2a\u5224\u65ad\u901a\u8fc7\u4e09\u76ee\u8fd0\u7b97\u7b26\u5b9e\u73b0\uff0c\u5982\u679cx\u5927\u4e8ezero_val\uff0c\u5219\u8fd4\u56dex\uff0c\u5426\u5219\u8fd4\u56dezero_val\uff08\u53730\uff09\u3002 // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cOF_DEVICE_FUNC\u662f\u4e00\u4e2aOpenFusion\u7684\u5b8f\u5b9a\u4e49\uff0c\u7528\u4e8e\u6307\u5b9a\u8fd9\u4e2afunctor\u53ef\u4ee5\u5728\u8bbe\u5907\u4e0a\u8fd0\u884c\uff08\u5373\u5728CUDA\u8bbe\u5907\u4e0a\u8fd0\u884c\uff09\u3002 // Use CUDA Elementwise Template. OF_CUDA_CHECK (( cuda :: elementwise :: Unary ( ReluFunctor < T > (), elem_cnt , dx -> mut_dptr < T > (), x -> dptr < T > (), ctx -> stream () -> As < ep :: CudaStream > () -> cuda_stream ()))); \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528CUDA Elementwise\u6a21\u677f\uff0c\u5b83\u53ef\u4ee5\u5728GPU\u4e0a\u6267\u884c\u5355\u5143\u64cd\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u52a0\u901f\u3002 - ReluFunctor () \u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u7528\u4e8e\u5bf9\u8f93\u5165\u6570\u636e\u6267\u884c relu \u64cd\u4f5c\uff0c\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e x->dptr () \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 - elem_cnt \u662f\u5143\u7d20\u7684\u6570\u91cf\u3002 - dx->mut_dptr () \u662f\u4e00\u4e2a\u53ef\u53d8\u6307\u9488\uff0c\u6307\u5411\u8981\u4fee\u6539\u7684\u8f93\u51fa\u6570\u636e\uff08\u5373 relu \u64cd\u4f5c\u540e\u7684\u7ed3\u679c\uff09\u3002 - x->dptr () \u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u6307\u5411\u8f93\u5165\u6570\u636e\u3002 - ctx->stream()->As ()->cuda_stream() \u662f\u4e00\u4e2a CUDA \u6d41\uff0c\u7528\u4e8e\u5728 GPU \u4e0a\u6267\u884c\u64cd\u4f5c\u3002 - OF_CUDA_CHECK \u5b8f\u7528\u4e8e\u68c0\u67e5 CUDA \u64cd\u4f5c\u662f\u5426\u6210\u529f\u6267\u884c\uff0c\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002 \u539f\u7406\u4ecb\u7ecd \u9ad8\u6548\u3001\u6613\u7528\u3001\u53ef\u62d3\u5c55\u6211\u5168\u90fd\u8981\uff1aOneFlow CUDA Elementwise \u6a21\u677f\u5e93\u7684\u8bbe\u8ba1\u4f18\u5316\u601d\u8def","title":"OneFlow CUDA Elementwise"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_1","text":"\u9010\u5143\u7d20\u64cd\u4f5c\uff08\u4e5f\u53eb Elementwise \u64cd\u4f5c\uff09\u662f\u6307\u5bf9 Tensor \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u53d8\u6362\uff0c\u5f97\u5230\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u3002 \u5728\u6df1\u5ea6\u5b66\u4e60\u91cc\uff0c\u6709\u5f88\u591a\u7b97\u5b50\u5c5e\u4e8e Elementwise \u7b97\u5b50\u8303\u7574\uff0c\u6bd4\u5982\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff08\u5982ReLU\u3001GELU \uff09\uff0cScalarMultiply\uff08\u5bf9 Tensor \u6bcf\u4e2a\u5143\u7d20\u90fd\u4e58\u4e0a\u4e00\u4e2a\u6807\u91cf\uff09\u7b49\u64cd\u4f5c\u3002","title":"\u5f15\u8a00"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_2","text":"\u4e3a\u6b64 OneFlow \u9488\u5bf9\u8fd9\u79cd Elementwise \u64cd\u4f5c\u62bd\u8c61\u51fa\u4e00\u5957 CUDA \u6a21\u677f\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u628a\u8ba1\u7b97\u903b\u8f91\u5c01\u88c5\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u5185\uff0c\u5373\u53ef\u83b7\u5f97\u4e00\u4e2a CUDA Elementwise \u7b97\u5b50 \uff0c\u4ee5 ReLU \u4e3a\u4f8b\uff1a ReLU\u6fc0\u6d3b\u51fd\u6570\u8be6\u7ec6\u4ecb\u7ecd // \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97ReLU\uff08rectified linear unit\uff09\u51fd\u6570\u7684functor\u3002 // \u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u7ed3\u6784\u4f53\uff0c\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570T\uff0c\u8868\u793a\u8f93\u5165\u548c\u8f93\u51fa\u7684\u6570\u636e\u7c7b\u578b\u3002 // Write ReLU Functor. template < typename T > struct ReluFunctor { OF_DEVICE_FUNC T operator ()( T x ) const { const T zero_val = static_cast < T > ( 0 ); return ( x > zero_val ) ? x : zero_val ; } }; // \u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86ReLU\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u9996\u5148\uff0c\u58f0\u660e\u4e00\u4e2a\u5e38\u91cfzero_val\uff0c\u8868\u793a\u96f6\u503c\uff0c\u5176\u7c7b\u578b\u4e3aT\u3002 // \u7531\u4e8eT\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u4f7f\u7528static_cast\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 // \u7136\u540e\uff0c\u6839\u636eReLU\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u8f93\u5165x\u5927\u4e8e\u96f6\uff0c\u5219\u8f93\u51fa\u4e3ax\uff0c\u5426\u5219\u8f93\u51fa\u4e3a0\u3002 // \u8fd9\u4e2a\u5224\u65ad\u901a\u8fc7\u4e09\u76ee\u8fd0\u7b97\u7b26\u5b9e\u73b0\uff0c\u5982\u679cx\u5927\u4e8ezero_val\uff0c\u5219\u8fd4\u56dex\uff0c\u5426\u5219\u8fd4\u56dezero_val\uff08\u53730\uff09\u3002 // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cOF_DEVICE_FUNC\u662f\u4e00\u4e2aOpenFusion\u7684\u5b8f\u5b9a\u4e49\uff0c\u7528\u4e8e\u6307\u5b9a\u8fd9\u4e2afunctor\u53ef\u4ee5\u5728\u8bbe\u5907\u4e0a\u8fd0\u884c\uff08\u5373\u5728CUDA\u8bbe\u5907\u4e0a\u8fd0\u884c\uff09\u3002 // Use CUDA Elementwise Template. OF_CUDA_CHECK (( cuda :: elementwise :: Unary ( ReluFunctor < T > (), elem_cnt , dx -> mut_dptr < T > (), x -> dptr < T > (), ctx -> stream () -> As < ep :: CudaStream > () -> cuda_stream ()))); \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528CUDA Elementwise\u6a21\u677f\uff0c\u5b83\u53ef\u4ee5\u5728GPU\u4e0a\u6267\u884c\u5355\u5143\u64cd\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u52a0\u901f\u3002 - ReluFunctor () \u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u7528\u4e8e\u5bf9\u8f93\u5165\u6570\u636e\u6267\u884c relu \u64cd\u4f5c\uff0c\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e x->dptr () \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 - elem_cnt \u662f\u5143\u7d20\u7684\u6570\u91cf\u3002 - dx->mut_dptr () \u662f\u4e00\u4e2a\u53ef\u53d8\u6307\u9488\uff0c\u6307\u5411\u8981\u4fee\u6539\u7684\u8f93\u51fa\u6570\u636e\uff08\u5373 relu \u64cd\u4f5c\u540e\u7684\u7ed3\u679c\uff09\u3002 - x->dptr () \u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u6307\u5411\u8f93\u5165\u6570\u636e\u3002 - ctx->stream()->As ()->cuda_stream() \u662f\u4e00\u4e2a CUDA \u6d41\uff0c\u7528\u4e8e\u5728 GPU \u4e0a\u6267\u884c\u64cd\u4f5c\u3002 - OF_CUDA_CHECK \u5b8f\u7528\u4e8e\u68c0\u67e5 CUDA \u64cd\u4f5c\u662f\u5426\u6210\u529f\u6267\u884c\uff0c\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002","title":"\u4f7f\u7528"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_3","text":"\u9ad8\u6548\u3001\u6613\u7528\u3001\u53ef\u62d3\u5c55\u6211\u5168\u90fd\u8981\uff1aOneFlow CUDA Elementwise \u6a21\u677f\u5e93\u7684\u8bbe\u8ba1\u4f18\u5316\u601d\u8def","title":"\u539f\u7406\u4ecb\u7ecd"},{"location":"OneFlow/backward/","text":"\u53cd\u5411\u4f20\u64ad \u5f15\u8a00 \u5b8c\u6210\u4e0b\u9762\u94fe\u63a5\u9605\u8bfb\uff0c\u5927\u81f4\u53ef\u4ee5\u4e86\u89e3\u53cd\u5411\u4f20\u64ad\u3002 [x] BP \u7b97\u6cd5\u4ecb\u7ecd x #02 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5](https://www.bilibili.com/video/BV1yG411x7Cc/?spm_id_from=333.788&vd_source=0a13fe290c31c25fa9f746838c074df4) x (https://www.bilibili.com/video/BV1bW4y1j77v/?spm_id_from=333.788.recommend_more_video.1&vd_source=0a13fe290c31c25fa9f746838c074df4) x (https://zhuanlan.zhihu.com/p/587951710) \u7ed3\u5408\u4e00\u4e2aPython\u793a\u4f8b\u7814\u7a76 \u7b97\u5b50\u53cd\u5411\u4f20\u64ad\u7684\u5b9e\u73b0 \u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528PyTorch\u5b9e\u73b0exp2\u7b97\u5b50 $y_i = 2^{x_i}$ y\u5bf9x\u6c42\u5bfc $y_i^, = 2^{x_i} * ln(2)$ \uff08\u5373\u5bf9\u8f93\u5165\u5f20\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c2\u7684\u6307\u6570\u5e42\u8fd0\u7b97\uff09\uff0c\u4e0b\u9762\u662f\u4e24\u4e2a\u4e00\u4e2a\u7b80\u5355\u7684\u53cd\u5411\u4f20\u64ad\u793a\u4f8b\uff1a \u793a\u4f8b 1 import torch # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x = torch . tensor ([ 1.0 , 2.0 , 3.0 ], requires_grad = True ) # \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad exp2 = torch . exp2 y = exp2 ( x ) # \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c y . backward ( torch . ones_like ( x )) print ( x . grad ) output tensor ([ 1 .3863, 2 .7726, 5 .5452 ] , dtype = oneflow.float32 ) \u793a\u4f8b 2 import oneflow as torch import math class Exp2Function ( torch . autograd . Function ): @staticmethod def forward ( ctx , input ): result = torch . pow ( 2 , input ) ctx . save_for_backward ( result ) return result @staticmethod def backward ( ctx , grad_output ): result , = ctx . saved_tensors return grad_output * math . log ( 2 ) * result class Exp2 ( torch . nn . Module ): def forward ( self , input ): return Exp2Function . apply ( input ) # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x = torch . tensor ([ 1.0 , 2.0 , 3.0 ], requires_grad = True ) # \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad exp2 = Exp2 () y = exp2 ( x ) # \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c y . backward ( torch . ones_like ( x )) print ( x . grad ) output tensor ([ 1 .3863, 2 .7726, 5 .5452 ] , dtype = oneflow.float32 ) oneflow \u4e2d exp2\u53cd\u5411\u5b9e\u73b0\u903b\u8f91 https://github.com/youxiudeshouyeren/oneflow/blob/d1dc691308bf12fda90a48687e1693472b57eef2/oneflow/core/ep/common/primitive/binary_functor.h#L565-L571 template < DeviceType device , typename Src , typename Dst > struct BinaryFunctor < device , BinaryOp :: kExp2BackwardWithDyX , Src , Dst > { OF_DEVICE_FUNC BinaryFunctor ( Scalar attr0 , Scalar attr1 ) {} OF_DEVICE_FUNC Dst operator ()( Src dy , Src x ) const { return dy * exp2 ( x ) * log ( static_cast < Src > ( 2.0 )); } }; \u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u5bf9\u8c61 BinaryFunctor\uff0c\u7528\u4e8e\u8ba1\u7b97 exp2 \u51fd\u6570\u7684\u53cd\u5411\u4f20\u64ad\u65f6\u5bf9\u8f93\u5165 dy \u548c x \u7684\u5bfc\u6570\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\u5b9e\u73b0\u4e86 BinaryOp::kExp2BackwardWithDyX \u64cd\u4f5c\uff0c\u5373\u5bf9\u4e8e\u8f93\u5165\u7684 dy \u548c x\uff0c\u8ba1\u7b97 exp2(x) \u7684\u5bfc\u6570\u4e58\u4ee5 dy\uff0c\u5373 dy * exp2(x) * log(2)\u3002\u5176\u4e2d\uff0clog(2) \u662f\u4ee5 2 \u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u7531\u4e8e log \u51fd\u6570\u5e76\u6ca1\u6709\u5728 C++ \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4ee5 2 \u4e3a\u5e95\u7684\u7248\u672c\uff0c\u6240\u4ee5\u4f7f\u7528 static_cast<>() \u51fd\u6570\u5c06\u5e38\u6570 2.0 \u8f6c\u6362\u4e3a\u6a21\u677f\u53c2\u6570 Src \u7c7b\u578b\uff0c\u7136\u540e\u518d\u8c03\u7528\u6807\u51c6\u5e93\u4e2d\u7684 log \u51fd\u6570\u3002","title":"Backward"},{"location":"OneFlow/backward/#_1","text":"","title":"\u53cd\u5411\u4f20\u64ad"},{"location":"OneFlow/backward/#_2","text":"\u5b8c\u6210\u4e0b\u9762\u94fe\u63a5\u9605\u8bfb\uff0c\u5927\u81f4\u53ef\u4ee5\u4e86\u89e3\u53cd\u5411\u4f20\u64ad\u3002 [x] BP \u7b97\u6cd5\u4ecb\u7ecd x #02 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5](https://www.bilibili.com/video/BV1yG411x7Cc/?spm_id_from=333.788&vd_source=0a13fe290c31c25fa9f746838c074df4) x (https://www.bilibili.com/video/BV1bW4y1j77v/?spm_id_from=333.788.recommend_more_video.1&vd_source=0a13fe290c31c25fa9f746838c074df4) x (https://zhuanlan.zhihu.com/p/587951710)","title":"\u5f15\u8a00"},{"location":"OneFlow/backward/#python","text":"\u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528PyTorch\u5b9e\u73b0exp2\u7b97\u5b50 $y_i = 2^{x_i}$ y\u5bf9x\u6c42\u5bfc $y_i^, = 2^{x_i} * ln(2)$ \uff08\u5373\u5bf9\u8f93\u5165\u5f20\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c2\u7684\u6307\u6570\u5e42\u8fd0\u7b97\uff09\uff0c\u4e0b\u9762\u662f\u4e24\u4e2a\u4e00\u4e2a\u7b80\u5355\u7684\u53cd\u5411\u4f20\u64ad\u793a\u4f8b\uff1a","title":"\u7ed3\u5408\u4e00\u4e2aPython\u793a\u4f8b\u7814\u7a76 \u7b97\u5b50\u53cd\u5411\u4f20\u64ad\u7684\u5b9e\u73b0"},{"location":"OneFlow/backward/#1","text":"import torch # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x = torch . tensor ([ 1.0 , 2.0 , 3.0 ], requires_grad = True ) # \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad exp2 = torch . exp2 y = exp2 ( x ) # \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c y . backward ( torch . ones_like ( x )) print ( x . grad ) output tensor ([ 1 .3863, 2 .7726, 5 .5452 ] , dtype = oneflow.float32 )","title":"\u793a\u4f8b 1"},{"location":"OneFlow/backward/#2","text":"import oneflow as torch import math class Exp2Function ( torch . autograd . Function ): @staticmethod def forward ( ctx , input ): result = torch . pow ( 2 , input ) ctx . save_for_backward ( result ) return result @staticmethod def backward ( ctx , grad_output ): result , = ctx . saved_tensors return grad_output * math . log ( 2 ) * result class Exp2 ( torch . nn . Module ): def forward ( self , input ): return Exp2Function . apply ( input ) # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x = torch . tensor ([ 1.0 , 2.0 , 3.0 ], requires_grad = True ) # \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad exp2 = Exp2 () y = exp2 ( x ) # \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c y . backward ( torch . ones_like ( x )) print ( x . grad ) output tensor ([ 1 .3863, 2 .7726, 5 .5452 ] , dtype = oneflow.float32 )","title":"\u793a\u4f8b 2"},{"location":"OneFlow/backward/#oneflow-exp2","text":"https://github.com/youxiudeshouyeren/oneflow/blob/d1dc691308bf12fda90a48687e1693472b57eef2/oneflow/core/ep/common/primitive/binary_functor.h#L565-L571 template < DeviceType device , typename Src , typename Dst > struct BinaryFunctor < device , BinaryOp :: kExp2BackwardWithDyX , Src , Dst > { OF_DEVICE_FUNC BinaryFunctor ( Scalar attr0 , Scalar attr1 ) {} OF_DEVICE_FUNC Dst operator ()( Src dy , Src x ) const { return dy * exp2 ( x ) * log ( static_cast < Src > ( 2.0 )); } }; \u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u5bf9\u8c61 BinaryFunctor\uff0c\u7528\u4e8e\u8ba1\u7b97 exp2 \u51fd\u6570\u7684\u53cd\u5411\u4f20\u64ad\u65f6\u5bf9\u8f93\u5165 dy \u548c x \u7684\u5bfc\u6570\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\u5b9e\u73b0\u4e86 BinaryOp::kExp2BackwardWithDyX \u64cd\u4f5c\uff0c\u5373\u5bf9\u4e8e\u8f93\u5165\u7684 dy \u548c x\uff0c\u8ba1\u7b97 exp2(x) \u7684\u5bfc\u6570\u4e58\u4ee5 dy\uff0c\u5373 dy * exp2(x) * log(2)\u3002\u5176\u4e2d\uff0clog(2) \u662f\u4ee5 2 \u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u7531\u4e8e log \u51fd\u6570\u5e76\u6ca1\u6709\u5728 C++ \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4ee5 2 \u4e3a\u5e95\u7684\u7248\u672c\uff0c\u6240\u4ee5\u4f7f\u7528 static_cast<>() \u51fd\u6570\u5c06\u5e38\u6570 2.0 \u8f6c\u6362\u4e3a\u6a21\u677f\u53c2\u6570 Src \u7c7b\u578b\uff0c\u7136\u540e\u518d\u8c03\u7528\u6807\u51c6\u5e93\u4e2d\u7684 log \u51fd\u6570\u3002","title":"oneflow \u4e2d exp2\u53cd\u5411\u5b9e\u73b0\u903b\u8f91"},{"location":"OneFlow/document/","text":"how_to_write_api_docs \u5b9e\u73b0api_docs\u6587\u6863\u9884\u89c8","title":"Document"},{"location":"OneFlow/forward/","text":"\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50 \u672c\u6587\u5c06\u4ee5\u5f00\u53d1\u4e00\u4e2a leaky_relu\uff08\u51c6\u786e\u8bf4\u662f leaky_relu_yzh op\uff0c\u56e0\u4e3a master \u5206\u652f\u7684 leaky_relu \u7ec4\u5408\u4e86\u5176\u5b83\u77e5\u8bc6\u70b9\uff0c\u4e0d\u9002\u5408\u4f5c\u4e3a\u6559\u7a0b\u5c55\u793a\uff09\u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50\u3002 \u672c\u6587\u5bf9\u5e94\u7684 PR \u5728 https://github.com/Oneflow-Inc/oneflow/pull/8350 \u80cc\u666f op \u4e0e kernel \u5728\u4e0a\u6587\u63d0\u5230 \u201c\u5b9a\u4e49 op\u201d \u4e0e \u201c\u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91\u201d \u4e24\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u91cc\u7684 op \u4e0e kernel \u662f\u4e24\u4e2a\u6709\u5173\u8054\u7684\u6982\u5ff5\u3002 op \u662f\u903b\u8f91\u4e0a\u7684\u7b97\u5b50\uff0c\u5305\u542b OneFlow Compiling Runtime \u5728\u6784\u5efa\u8ba1\u7b97\u56fe\u65f6\u6240\u9700\u8981\u7684\u5fc5\u8981\u4fe1\u606f\uff0c\u5982\u8f93\u5165\u3001\u8f93\u51fa\u5f62\u72b6\uff0c\u54ea\u4e9b\u5f20\u91cf\u9700\u8981\u81ea\u52a8\u6c42\u5bfc\u7b49\u4fe1\u606f\u3002 \u6709\u4e86 op \u4e2d\u7684\u4fe1\u606f\uff0cOneFlow Compiling Runtime \u5c31\u53ef\u4ee5\u6784\u5efa\u8ba1\u7b97\u56fe\u5e76\u4f9d\u636e\u8ba1\u7b97\u56fe\u505a\u8d44\u6e90\u7533\u8bf7\u3001\u6784\u5efa\u7b49\u64cd\u4f5c\uff08\u5982\u6839\u636e\u5f20\u91cf\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u7533\u8bf7\u5185\u5b58\uff09\uff0c \u4f46\u662f op \u4e2d\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 \u5728\u771f\u6b63\u9700\u8981\u5904\u7406\u6570\u636e\u65f6\uff0cOneFlow Executing Runtime \u4f1a\u542f\u52a8 kernel \u5b8c\u6210\u8ba1\u7b97\uff0c\u6240\u4ee5 kernel \u4e2d\u5305\u542b\u4e86\u5177\u4f53\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 op\uff0cOneFlow Executing Runtime \u4f1a\u6839\u636e\u6570\u636e\u7c7b\u578b\u3001\u786c\u4ef6\u8bbe\u5907\uff08\u6bd4\u5982\u662f CPU \u8fd8\u662f CUDA\uff09\u7684\u5177\u4f53\u60c5\u51b5\uff0c\u9009\u62e9\u542f\u52a8\u4e0d\u540c\u7684 kernel\u3002 OneFlow \u4e2d\u7684\u7cfb\u7edf op \u4e0e user op \u5728 OneFlow \u7cfb\u7edf\u4e2d\u5b58\u5728\u4e24\u7c7b\u7b97\u5b50\uff08op\uff09\uff1a\u7cfb\u7edf op \u548c user op\u3002 \u7cfb\u7edf op \u5b9a\u4e49\u5728\uff1a oneflow/core/operator/ \u76ee\u5f55\uff0c \u5bf9\u5e94\u7684 kernel \u5b9e\u73b0\u5728\uff1a oneflow/core/kernel \u76ee\u5f55\u3002 \u7cfb\u7edf op \u662f\u5bf9\u6784\u56fe\u3001\u6d41\u6c34\u7b49\u7cfb\u7edf\u6027\u80fd\u8f83\u4e3a\u5173\u952e\u7684\u4e00\u4e9b op\u3002 \u9664\u6781\u5c11\u6570 op \u5c5e\u4e8e\u7cfb\u7edf op \u5916\uff0c\u5927\u591a\u6570 op \u90fd\u662f user op\uff0c\u8fd9\u4e9b user op \u548c\u7528\u6237\u6a21\u578b\u4e1a\u52a1\u903b\u8f91\u76f8\u5173\u3002 OneFlow user op \u7684\u5b9a\u4e49\u53ca kernel \u5b9e\u73b0\u5206\u522b\u5728 oneflow/user/ops \u548c oneflow/user/kernels \u76ee\u5f55\u4e0b\u3002 \u76ee\u524d OneFlow \u5df2\u5b9e\u73b0\u4e86\u4e30\u5bcc\u7684\u7b97\u5b50\u5e93\uff0c\u4f46\u662f\u5f53\u5df2\u6709\u7684\u7b97\u5b50\u5e93\u65e0\u6cd5\u6ee1\u8db3\u642d\u5efa\u6a21\u578b\u7684\u9700\u6c42\u65f6\uff0c\u5c31\u9700\u8981\u65b0\u589e\u7b97\u5b50\u3002 \u672c\u6587\u4ecb\u7ecd\u7684\u65b0\u589e\u7b97\u5b50\u6307\u7684\u662f \u65b0\u589e user op \u3002 ODS \u4e0e TableGen TableGen \u662f\u4e00\u4e2a\u4ee3\u7801\u751f\u6210\u5de5\u5177\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u5b83\u8bfb\u53d6\u5e76\u89e3\u6790\u4e00\u4e2a .td \u683c\u5f0f\uff08\u8bed\u6cd5\u63a5\u8fd1 C++ \u6a21\u677f\uff09\u7684\u6587\u4ef6\uff0c\u7136\u540e\u4ea4\u7ed9 TableGen \u540e\u7aef \u751f\u6210\u53e6\u5916\u683c\u5f0f\u7684\u8bed\u8a00\u3002 MLIR \u57fa\u4e8e TableGen \u5236\u5b9a\u4e86\u4e00\u5957\u7b97\u5b50\u5b9a\u4e49\u89c4\u8303 ODS \u4ee5\u53ca\u5bf9\u5e94\u7684\u540e\u7aef OpDefinitionsGen OneFlow \u5728 ODS \u7684\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e86 TableGen OneFlow \u540e\u7aef \uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u5b9a\u4e49 OneFlow user op\u3002 \u56e0\u6b64\uff0cOneFlow \u7684 user op \u5b9a\u4e49\u5199\u5728 OneFlowUserOps.td \u6587\u4ef6\u4e2d\u3002 \u5f00\u53d1 op \u5728 OneFlow \u4e2d\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684 user op\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\u56fe\u3002 \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b4\u6b65\uff1a 1. \u5b9a\u4e49 op 2. \u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91 3. \u5bfc\u51fa functional \u63a5\u53e3 4. \u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91 (\u4e0a\u56fe\u4e2d 4. 5.) \u5b9a\u4e49 op \u5b9a\u4e49 op \u6307\u7684\u662f\uff0c\u5bf9 op \u7684\u540d\u79f0\uff0cop \u7684\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u548c op \u7684\u5c5e\u6027\u8fdb\u884c\u58f0\u660e\u3002 OneFlow \u9075\u5faa MLIR \u7684 ODS\uff08Operation Definition Specification\uff09 \u5b9e\u73b0\u4e86\u81ea\u5df1\u7684 MLIR OneFlow Dialect\u3002 \u5728\u7b97\u5b50\u5b9a\u4e49\u65b9\u9762\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5404\u79cd\u63a8\u5bfc\u51fd\u6570\u548c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u63a5\u53e3\u90fd\u53ef\u4ee5\u59d4\u6258\u7ed9 ODS\uff0c\u964d\u4f4e\u4e86\u4eba\u5de5\u624b\u5199\u51fa\u9519\u7684\u6982\u7387\uff0c\u540e\u7eed\u4f18\u5316\u3001\u683c\u5f0f\u8f6c\u5316\u7b49\u6d41\u7a0b\u53ef\u4ee5\u66f4\u7075\u6d3b\u3002 \u5b9a\u4e49\u4e00\u4e2a OneFlow user op\uff0c\u4e3b\u8981\u5305\u62ec 5 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\uff1a op class \u8f93\u5165 input \u8f93\u51fa output \u5c5e\u6027 attrs \u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3 op class \u53ef\u4ee5\u5728 oneflow/ir/include/OneFlow/OneFlowUserOps.td \u67e5\u770b op \u5b9a\u4e49\u7684\u6e90\u7801\u3002 \u4ee5 def \u5173\u952e\u5b57\u5f00\u5934\u5b9a\u4e49\u4e00\u4e2a op\uff0c\u8be5 op \u7ee7\u627f OneFlow_BaseOp \uff0c\u540c\u65f6\u6307\u5b9a OneFlow_BaseOp \u7684\u6a21\u7248\u53c2\u6570\u3002 \u6a21\u7248\u53c2\u6570\u4f9d\u6b21\u4e3a op type name\u3001 Trait \u5217\u8868\u3002 def OneFlow_LeakyReluYZHOp : OneFlow_BaseOp < \"leaky_relu_yzh\" , [ NoSideEffect , DeclareOpInterfaceMethods < UserOpCompatibleInterface > ] > { //... } \u5176\u4e2d \"leaky_relu_yzh\" \u662f\u6307\u5b9a\u7684 op type name\u3002\u6bcf\u4e2a op \u90fd\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684 op type name \u4f5c\u4e3a\u5168\u5c40\u6807\u8bc6\u7b26\u3002 \u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570\u662f\u4e00\u4e2a list\uff08 [...] \uff09\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a Trait\uff0cOneFlow \u4e2d\u5e38\u7528\u7684\u6709\uff1a NoSideEffect \u8868\u793a\u8be5\u7b97\u5b50\u65e0\u526f\u4f5c\u7528\uff08\u5373\u4e0d\u4f1a\u6539\u53d8\u5185\u5b58\u3001\u7f51\u7edc\u3001\u7ba1\u9053\u3001\u78c1\u76d8\u7b49\u7684\u7cfb\u7edf\u72b6\u6001\uff09\uff0c\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u6307\u5bfc\u67d0\u4e9b\u4f18\u5316\u64cd\u4f5c NoGrad \u8868\u793a\u8be5\u7b97\u5b50\u5728\u6570\u5b66\u4e0a\u6ca1\u6709\u68af\u5ea6\uff08\u4e0d\u53ef\u5bfc\uff09 CpuOnly \u8868\u793a\u8be5\u7b97\u5b50\u53ea\u652f\u6301\u5728 CPU \u8bbe\u5907\u4e0a\u6267\u884c SupportNonContiguous \u8868\u793a\u8be5\u7b97\u5b50\u662f\u5426\u652f\u6301 NonContiguous \u5f20\u91cf\uff08\u5173\u4e8e Contiguous Tensor \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u53c2\u8003 PyTorch Internals \u4e2d\u7684\u76f8\u5173\u5185\u5bb9 \uff09 \u8f93\u5165 input \u4e0e\u8f93\u51fa output \u901a\u8fc7\u91cd\u5199 input \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u5165\uff0c\u6bd4\u5982 // \u4e00\u4e2a\u8f93\u5165 x let input = ( ins OneFlow_Tensor : $x ); \u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x \u3002\u8f93\u5165\u7684\u683c\u5f0f\u4e3a \u8f93\u5165\u7c7b\u578b:$name \u3002 \u8f93\u5165\u7c7b\u578b\u76ee\u524d\u5305\u62ec\uff1a OneFlow_Tensor Variadic<OneFlow_Tensor> \uff1a\u6307\u53ef\u53d8 tensor\uff0c\u6bd4\u5982 concat op\uff0c\u652f\u6301 concat \u53ef\u53d8\u4e2a\u6570\u7684 tensor\u3002 Optional<OneFlow_Tensor> \uff1a\u8868\u793a\u8fd9\u4e2a tensor \u662f\u53ef\u9009\u7684\uff0c\u65e2\u53ef\u4ee5\u6709\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff0c\u6bd4\u5982 conv op \u4e2d\u7684 add_output\u3002 \u4e00\u4e2a op \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8f93\u5165\uff0c\u6bd4\u5982\uff1a // \u4e24\u4e2a\u8f93\u5165\uff1aa, b let input = ( ins OneFlow_Tensor : $a , OneFlow_Tensor : $b ); \u901a\u8fc7\u91cd\u5199 output \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u51fa\uff0c\u6bd4\u5982 let output = ( outs OneFlow_Tensor : $out0 , OneFlow_Tensor : $out1 ); \u5b9a\u4e49\u4e86 2 \u4e2a\u8f93\u51fa\u5f20\u91cf\u3002 \u5c5e\u6027 attrs \u901a\u8fc7\u91cd\u5199 attrs \u57df\u5b9a\u4e49 op \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u5b9a\u4e49 dropout \u4e2d\u7684 rate \u5c5e\u6027\uff0c let attrs = ( ins DefaultValuedAttr < F32Attr , \"0.\" >: $rate ); \u5b83\u8868\u793a\u540d\u4e3a $rate \u7684\u7c7b\u578b\u662f F32Attr \uff0c\u9ed8\u8ba4\u503c\u662f 0. \u3002\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\u9ed8\u8ba4\u503c\uff1a let attrs = ( ins F32Attr : $rate ); I32Attr\u3001F32Attr\u3001BoolAttr\u3001StrAttr\u3001I32ArrayAttr \u7b49\u5e38\u89c1\u57fa\u7840\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u5728 OpBase.td \u4e2d\u3002 OneFlow \u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5982 ShapeAttr\u3001DTArrayAttr \u7b49\u5b9a\u4e49\u5728 OneFlowBase.td \u4e2d\u3002 \u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3 \u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u57df\uff0c\u7528\u4e8e\u6307\u5b9a\u662f\u5426\u751f\u6210\u5bf9\u5e94\u7684\u63a5\u53e3\u3002\u8fd9\u4e9b\u63a5\u53e3\u5f80\u5f80\u662f\u6784\u5efa\u8ba1\u7b97\u56fe\u8fc7\u7a0b\u4e2d\u7684\u63a8\u5bfc\u63a5\u53e3\u3002 \u6bd4\u5982 shape \u63a8\u5bfc\uff08\u6839\u636e\u8f93\u5165\u7684 shape \u63a8\u5bfc\u8f93\u51fa\u7684\u63a8\u5bfc\uff09\u3001data type \u63a8\u5bfc\u3001SBP \u63a8\u5bfc\u7b49\u3002 OneFlow-TableGen \u4ec5\u8d1f\u8d23\u751f\u6210\u8fd9\u4e9b\u51fd\u6570\u7684\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u5728\u5176\u81ea\u52a8\u751f\u6210\u7684 cpp \u6587\u4ef6\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0d\u4f1a\u751f\u6210\u4e0b\u5217\u4efb\u4f55\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u9700\u8981\u751f\u6210\u54ea\u4e9b\u63a5\u53e3\u3002 let has_check_fn = 1 ; // \u751f\u6210\u5c5e\u6027\u68c0\u67e5\u63a5\u53e3 let has_logical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3 let has_physical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3 let has_get_sbp_fn = 1 ; // \u751f\u6210 get sbp \u63a5\u53e3 let has_sbp_signature_infer_fn = 1 ; // \u751f\u6210 sbp signature \u63a8\u5bfc\u63a5\u53e3\uff0c\u672a\u6765\u4f1a\u79fb\u9664\uff0c\u63a8\u8350\u4f7f\u7528 has_nd_sbp_infer_fn let has_data_type_infer_fn = 1 ; // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3 let has_device_and_stream_infer_fn = 1 ; // \u751f\u6210 device \u63a8\u5bfc\u63a5\u53e3 let has_input_arg_modify_fn = 1 ; // \u751f\u6210\u8f93\u5165 modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49 let has_output_arg_modify_fn = 1 ; // \u751f\u6210\u8f93\u51fa modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49 let has_output_blob_time_shape_infer_fn = 1 ; // \u751f\u6210\u8f93\u51fa time shape \u63a8\u5bfc\u63a5\u53e3 let has_nd_sbp_infer_fn = 1 ; // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3 \u4e00\u822c\u5e38\u7528\u7684\u662f\u4e0b\u9762\u51e0\u4e2a\uff0c let has_logical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3 let has_physical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3 let has_data_type_infer_fn = 1 ; // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3 let has_nd_sbp_infer_fn = 1 ; // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3 \u4e86\u89e3\u5b8c\u4e0a\u9762\u8fd9\u4e9b\u6982\u5ff5\u548c\u7528\u6cd5\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u4fee\u6539 oneflow/ir/include/OneFlow/OneFlowUserOps.td \u6587\u4ef6\u3002 leaky_relu_yzh op \u5b8c\u6574\u7684\u5b9a\u4e49\u89c1 \u8fd9\u91cc \uff1a \u5728 OneFlowUserOps.td \u4e2d\u65b0\u589eOp\u5b9a\u4e49\u4e4b\u540e\uff0c\u91cd\u65b0 make \u540e\u4f1a\u81ea\u52a8\u5728 build \u76ee\u5f55\u4e0b\u7684 oneflow/core/framework/ \u76ee\u5f55\u4e0b\u751f\u6210\u6587\u4ef6\u4ee5\u4e0b\u51e0\u4e2a\u6587\u4ef6\uff1a op_generated.h \uff1a\u7531\u89e3\u6790 .td \u6587\u4ef6\u751f\u6210\u7684 op C++ \u7c7b op_generated.cpp \uff1a\u7531\u89e3\u6790 .td \u6587\u4ef6\u751f\u6210\u7684 op \u6ce8\u518c\u4ee3\u7801\uff08\u5305\u542b\u8c03\u7528 REGISTER_USER_OP \u5b8f\u7684\u4ee3\u7801\uff09 \u4e4b\u540e\u9700\u8981\u505a\u7684\u5c31\u662f\u5728 oneflow/user/ops \u76ee\u5f55\u4e0b\u65b0\u52a0\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u7528\u4e8e\u5b9e\u73b0 op \u7684\u63a5\u53e3\u3002 \u6bd4\u5982 leaky_relu_yzh \u5bf9\u5e94\u7684\u6587\u4ef6\u5728 oneflow/user/ops/leaky_relu_yzh_op.cpp \u5b9e\u73b0\u4e86\u63a8\u5bfc\u903b\u8f91\u5f20\u91cf\u3001\u63a8\u5bfc\u7269\u7406\u5f20\u91cf\u3001\u63a8\u5bfc SBP \u4fe1\u606f\u4ee5\u53ca\u63a8\u5bfc\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u5404\u63a5\u53e3\u3002 \u5b9e\u73b0 Kernel \u903b\u8f91 op \u7684\u8ba1\u7b97\u652f\u6301\u591a\u79cd\u8bbe\u5907\uff08\u5982 CPU\u3001GPU\u3001DCU \u7b49\uff09\uff0c\u6240\u4ee5\u8981\u5206\u522b\u5b9e\u73b0\u8ba1\u7b97\u903b\u8f91\u3002 \u76f8\u5173\u4ee3\u7801\uff1a Leaky ReLU CPU Kernel Leaky ReLU GPU Kernel CPU \u8ba1\u7b97\u903b\u8f91 template < typename T > class CpuLeakyReluYZHKernel final : public user_op :: OpKernel { public : CpuLeakyReluYZHKernel () = default ; ~ CpuLeakyReluYZHKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * x = ctx -> Tensor4ArgNameAndIndex ( \"x\" , 0 ); user_op :: Tensor * y = ctx -> Tensor4ArgNameAndIndex ( \"y\" , 0 ); const int32_t elem_cnt = x -> shape (). elem_cnt (); const T * x_ptr = x -> dptr < T > (); T * y_ptr = y -> mut_dptr < T > (); const auto alpha = ctx -> Attr < float > ( \"alpha\" ); FOR_RANGE ( int32_t , i , 0 , elem_cnt ) { y_ptr [ i ] = x_ptr [ i ] > 0 ? x_ptr [ i ] : alpha * x_ptr [ i ]; } } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; \u5728 OneFlow \u4e2d\u5b9e\u73b0 kernel\uff0c \u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow::user_op::OpKernel \u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u5176\u4e2d\u7684\u865a\u51fd\u6570\u3002 \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u91cd\u5199\u4e86 Compute \u4e0e AlwaysComputeWhenAllOutputsEmpty \u4e24\u4e2a\u865a\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u610f\u4e49\u5206\u522b\u662f\uff1a Compute \u5fc5\u987b\u91cd\u5199\uff0c\u5728\u5176\u4e2d\u5b9e\u73b0\u5177\u4f53\u7684\u8fd0\u7b97\u903b\u8f91 AlwaysComputeWhenAllOutputsEmpty \u5fc5\u987b\u91cd\u5199\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570 op \u800c\u8a00\uff0c\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u5bf9\u4e8e\u6781\u5c11\u6570\u5185\u90e8\u9700\u8981\u7ef4\u62a4\u72b6\u6001\uff0c\u5373\u4f7f\u8f93\u51fa\u4e3a\u7a7a\u4e5f\u9700\u8981\u8c03\u7528 kernel \u8fdb\u884c\u8ba1\u7b97\u7684 op \u800c\u8a00\uff0c\u5e94\u8be5\u8fd4\u56de true Compute \u65b9\u6cd5\u4e2d\u901a\u8fc7\u8c03\u7528 user_op::KernelComputeContext* ctx \u4e2d\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u5f20\u91cf\u3001\u8f93\u51fa\u5f20\u91cf\u3001attr \u5177\u4f53\u7684\u6570\u636e\uff0c\u518d\u6309\u7167\u7b97\u5b50\u7684\u7b97\u6cd5\u903b\u8f91\u5bf9\u5b83\u4eec\u8fdb\u884c\u5904\u7406\u3002 \u4ee5\u4e0b\u662f\u5bf9 CpuLeakyReluKernel::Compute \u5904\u7406\u903b\u8f91\u7684\u89e3\u8bfb\uff1a \u9996\u5148\u53d6\u5f97 \"x\" \uff0c \"y\" \u4e24\u4e2a Tensor\u3002\u4f20\u5165 Tensor4ArgNameAndIndex \u7684\u5b57\u7b26\u4e32\u8981\u548c\u4e4b\u524d\u5728 OneFlowUserOps.td \u8bbe\u7f6e\u7684\u540d\u79f0\u4e00\u81f4 \u83b7\u53d6 x \u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u7528\u4e8e for \u5faa\u73af\u8fdb\u884c\u8ba1\u7b97 \u83b7\u53d6\u5c5e\u6027 alpha \u8fdb\u5165\u6b21\u6570\u4e3a elem_cnt \u7684 for \u5faa\u73af\uff0c\u5c06\u7ed3\u679c\u5199\u5165 \u6ce8\u518c Kernel \u5b9e\u73b0 kernel \u7c7b\u540e\uff0c\u9700\u8981\u8c03\u7528 REGISTER_USER_KERNEL \u6ce8\u518c\u3002 #define REGISTER_CPU_LEAKY_RELU_YZH_KERNEL(dtype) \\ REGISTER_USER_KERNEL(\"leaky_relu_yzh\") \\ .SetCreateFn<CpuLeakyReluYZHKernel<dtype>>() \\ .SetIsMatchedHob((user_op::HobDeviceType() == DeviceType::kCPU) \\ && (user_op::HobDataType(\"y\", 0) == GetDataType<dtype>::value)); \u8fd9\u91cc\u4f1a\u8c03\u7528 REGISTER_USER_KERNEL \u5b8f\uff0c\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a op type name\uff1a\u4e3a\u54ea\u4e2a op \u6ce8\u518c kernel SetCreateFn<T>() \uff1a\u8be5\u6a21\u677f\u65b9\u6cd5\u7684\u6a21\u677f\u53c2\u6570 T \uff0c\u5c31\u662f\u6211\u4eec\u5b9e\u73b0\u7684 kernel \u7c7b\uff0cOneFlow Runtime \u5c06\u4f7f\u7528\u5b83\u521b\u5efa kernel \u5bf9\u8c61\u3002 SetIsMatchedHob \uff1a\u56e0\u4e3a\u4e00\u4e2a op \u53ef\u80fd\u6709\u591a\u4e2a kernel\uff0c\u8981\u60f3\u6839\u636e\u7269\u7406\u8bbe\u5907\u53ca\u6570\u636e\u683c\u5f0f\u7684\u4e0d\u540c\u800c\u9009\u62e9\u4e0d\u540c\u7684 kernel \u8fdb\u884c\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u8c03\u7528 SetIsMatchedHob \u8fdb\u884c\u8bbe\u7f6e\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u4e3a true \u65f6\uff0cOneFlow \u5c06\u8c03\u7528\u8be5 kernel \u5b8c\u6210\u8ba1\u7b97\u3002\u4ee5\u4e0a\u4ee3\u7801\u7684\u5339\u914d\u903b\u8f91\u662f\uff1a\u5f53\u786c\u4ef6\u8bbe\u5907\u4e3a cpu \uff0c\u4e14 y \u7684\u6570\u636e\u7c7b\u578b\u548c dtype \u4e00\u81f4\u65f6\uff0c\u9009\u62e9\u8c03\u7528\u6ce8\u518c\u7684 kernel \u7c7b\uff08 CpuLeakyReluYZHKernel<dtype> \uff09\u3002 GPU \u8ba1\u7b97\u903b\u8f91 CUDA \u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6\u5165\u95e8\u53ef\u4ee5\u53c2\u8003\uff1a \u89c6\u9891\uff1aCUDA \u7684\u7531\u6765 \u89c6\u9891\uff1aCUDA \u7684\u5165\u95e8\u5c0f\u7a0b\u5e8f \u89c6\u9891\uff1a\u7ebf\u7a0b\u5c42\u7ea7 \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u89c6\u9891\u90fd\u65e0\u6cd5\u66ff\u4ee3\u81ea\u5df1\u8ba4\u771f\u5b66\u4e60\u5b98\u65b9\u8d44\u6599\uff1a CUDA C Programming Guide \u4e86\u89e3\u4e86 CUDA \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5c31\u4e0d\u96be\u7406\u89e3 leaky_relu CUDA \u7248\u672c\u7684\u5b9e\u73b0\u3002 \u9996\u5148\u5b9a\u4e49\u4e86 leaky_relu \u524d\u5411\u8fd0\u7b97\u7684 CUDA \u6838\u51fd\u6570 template < typename T > __global__ void LeakyReluForwardGpu ( const int n , const float alpha , const T * x , T * y ) { CUDA_1D_KERNEL_LOOP ( i , n ) { y [ i ] = x [ i ] > 0 ? x [ i ] : x [ i ] * alpha ; } } \u5176\u4e2d\u8c03\u7528\u4e86\u5b8f CUDA_1D_KERNEL_LOOP \u8fdb\u884c\u8fd0\u7b97 \u5728 Compute \u51fd\u6570\u4e2d\uff0c\u8c03\u7528\u4e86 RUN_CUDA_KERNEL (\u4e5f\u662f\u5b9a\u4e49\u5728 cuda_util.h \u8fd9\u4e2a\u6587\u4ef6\u4e2d)\u8fd9\u4e2a\u5b8f\u542f\u52a8\u6838\u51fd\u6570\u3002 \u5bf9\u5e94\u7684 GPU kernel \u7c7b\u7684\u5b9e\u73b0\u89c1\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L32-L49 \u5176\u4e2d\u7528\u5230\u4e86\u542f\u52a8 kernel \u7684\u5b8f RUN_CUDA_KERNEL \uff0c\u5b83\u7684\u5b9a\u4e49\u662f: #define RUN_CUDA_KERNEL(func, device_ctx_ptr, thread_num, ...) \\ func<<<SMBlocksNum4ThreadsNum(thread_num), kCudaThreadsNumPerBlock, 0, \\ (device_ctx_ptr)->cuda_stream()>>>(__VA_ARGS__) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6838\u51fd\u6570\u540d\u5b57 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f device context\uff0c\u540e\u7eed\u83b7\u53d6\u5bf9\u5e94\u7684 cuda_stream \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u8981\u542f\u52a8\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4f1a\u6839\u636e\u7ebf\u7a0b\u6570\u91cf\u6765\u8ba1\u7b97\u6240\u9700\u7684 Block \u6570\u76ee\u3002 \u56e0\u4e3a leaky relu \u662f elementwise \u8fd0\u7b97\uff0c\u5404\u4e2a\u5143\u7d20\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u542f\u52a8\u4e86 elem_cnt \u4e2a\u7ebf\u7a0b\u3002 \u540e\u7eed\u7684\u6ce8\u518c\u4e0e CPU \u7248\u672c\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u76f4\u63a5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u5373\u53ef\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L51-L62 \u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u8bbe\u5907\u7c7b\u7684 Compute \u4e2d\u5927\u90e8\u5206\u4ee3\u7801\u662f\u91cd\u590d\u7684\u3002\u4e00\u79cd\u66f4\u4f18\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\u662f\u7528\u4e00\u4e2a .cpp \u6587\u4ef6\u5b8c\u6210 kernel \u548c\u6ce8\u518c\u7684\u903b\u8f91\uff0c .cu \u6587\u4ef6\u7f16\u5199 GPU Kernel \u51fd\u6570\u548c GPU \u6a21\u677f\u7279\u5316\u7684\u4ee3\u7801\uff0c .h \u6587\u4ef6\u7528\u4e8e\u5b9a\u4e49\u548c\u7f16\u5199\u6ce8\u518c\u5b8f\u3002\u53ef\u53c2\u8003 dim_gather_kernel_* \u4e2d\u7684\u4ee3\u7801\u3002 OneFlow \u4e3a\u4e86\u9002\u914d\u591a\u79cd\u8bbe\u5907\uff0c\u8fd8\u63d0\u4f9b\u4e86 Primitive \u7ec4\u4ef6\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a Primitive PR \u5bfc\u51fa functional \u63a5\u53e3 \u5173\u4e8e functional \u63a5\u53e3\u5c42\u7684\u8be6\u7ec6\u4ecb\u7ecd\u5728\u8fd9\u91cc\uff1a https://github.com/Oneflow-Inc/oneflow/wiki/Functional-Interface \u6982\u62ec\u800c\u8a00\uff0cfunctional \u5c42\u8d77\u5230\u4e86\u201c\u4e0a\u63a5 Python\uff0c\u4e0b\u8054 C++\u201d\u7684\u4f5c\u7528\uff1a \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Module \u2502 \u2502 (Python) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 Functional \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 Op/Kernels \u2502 \u2502 (C++) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u56e0\u6b64\uff0c\u5728\u4e0a\u6587\u5b9a\u4e49 op \u548c\u6ce8\u518c kernel \u540e\uff0c\u9700\u8981\u4e3a\u7b97\u5b50\u5bfc\u51fa functional \u63a5\u53e3\uff0c\u624d\u80fd\u4f7f\u7528\u6237\u901a\u8fc7 Python \u4ee3\u7801\u8c03\u7528\u8be5\u7b97\u5b50\u3002 \u5bfc\u51fa functional \u63a5\u53e3\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c \u5728 oneflow/core/functional/functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0 \u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c \u5bf9\u4e8e leaky_relu_yzh op\uff0c\u5728 activation_functor.cpp \u4e2d\uff0c\u5bf9\u5176\u8fdb\u884c\u5b9a\u4e49\uff1a class LeakyReluYZHFunctor { public : LeakyReluYZHFunctor () { op_ = CHECK_JUST ( one :: OpBuilder ( \"leaky_relu_yzh\" ). Input ( \"x\" ). Output ( \"y\" ). Build ()); } Maybe < Tensor > operator ()( const std :: shared_ptr < one :: Tensor >& x , const float & alpha ) const { MutableAttrMap attrs ; JUST ( attrs . SetAttr < float > ( \"alpha\" , alpha )); return OpInterpUtil :: Dispatch < one :: Tensor > ( * op_ , { x }, attrs ); } private : std :: shared_ptr < OpExpr > op_ ; }; \u5728\u6784\u9020\u51fd\u6570\u91cc\uff0c\u6784\u9020\u4e86 leaky_relu \u8fd9\u4e2aop \u5b9e\u73b0 operator() \u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u901a\u8fc7 Dispatch \u8c03\u7528\u6784\u9020\u597d\u7684 op\uff0c\u5e76\u5206\u522b\u4f20\u5165\u8f93\u5165\uff0c\u5c5e\u6027 \u7c7b\u4f3c\u7684\u6211\u4eec\u4e5f\u7ed9 LeakyReluGrad \u5bfc\u51fa functional \u63a5\u53e3\uff0c\u4ee5\u4fbf\u540e\u7eed\u7f16\u5199\u6c42\u5bfc\u903b\u8f91\u4f7f\u7528 \u6700\u540e\u6211\u4eec\u9700\u8981\u6ce8\u518c\u5230 Functional Library\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/core/functional/impl/activation_functor.cpp#L610-L611 m . add_functor < impl :: LeakyReluYZHFunctor > ( \"LeakyReluYZH\" ); // \u6ce8\u610f\u6700\u540e\u5b57\u7b26\u4e32\u4e2d\u7684\u540d\u5b57\u5728\u540e\u7eed\u7684 functional_api.yaml \u4e2d\u4f1a\u7528\u5230 \u901a\u8fc7 m.add_functor \u6ce8\u518c\u540e\u7684 functor\uff0c\u53ef\u4ee5\u5728 C++ \u5c42\u4f7f\u7528\uff0c\u5982\u901a\u8fc7 functional::LeakyRelu \u5c31\u53ef\u4ee5\u8c03\u7528 LeakyReluFunctor \u3002 \u5728 functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0 functional \u901a\u8fc7\u89e3\u6790 yaml \u914d\u7f6e\u6587\u4ef6\uff0c\u5728 build \u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5e2e\u6211\u4eec\u751f\u6210\u63a5\u53e3\u3002 \u5728 functional_api.yaml \u6587\u4ef6\u4e2d\uff0c\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u3002 https://github.com/Oneflow-Inc/oneflow/pull/8350/files#diff-4b35c1dcdbae81b75439ba570bc149554ca85b83757430613fcb612ae25972afR572-R579 - name: \"leaky_relu_yzh\" signature: \"Tensor (Tensor x, Float alpha) => LeakyReluYZH\" bind_python: True \u5176\u4e2d name \u8868\u793a\u5bfc\u51fa\u5230 Python \u63a5\u53e3\u540e\u51fd\u6570\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u5bfc\u51fa\u540e\u5728 Python \u4e0b\u4f7f\u7528\u5c31\u662f flow . _C . leaky_relu_yzh ( ... ) signature \u7528\u4e8e\u63cf\u8ff0\u63a5\u53e3\u539f\u578b\u53ca C++ \u4ee3\u7801\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 => \u5de6\u8fb9\u7684\u4e3a\u539f\u578b\uff1b => \u53f3\u8fb9\u4e3a\u5bf9\u5e94\u7684 Functional Library \u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u91cc LeakyRelu \u548c\u524d\u9762\u5bfc\u51fa\u65f6\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u81f4\u7684\u3002 bind_python \uff0c\u8868\u793a\u8fd9\u4e2a\u63a5\u53e3\u662f\u5426\u9700\u8981\u7ed1\u5b9a Python \u63a5\u53e3 \u3002\u6bd4\u5982\u4e0b\u9762\u7684 leaky_relu_grad \uff0c\u6211\u4eec\u4e0d\u4f1a\u5728 Python \u5c42\u7528\u5230\uff08\u4f46\u4f1a\u5728 C++ \u5c42\u6c42\u5bfc\u4f7f\u7528\uff09\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a False\u3002 \u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5c\u540e\uff0c\u65b0\u589e\u7684\u7b97\u5b50\u5df2\u7ecf\u652f\u6301\u6b63\u5411\u8fd0\u7b97\uff0c\u7f16\u8bd1\u597d\u4ee3\u7801\u4fbf\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7b80\u5355\u7684\u6d4b\u8bd5\uff1a import oneflow as flow import numpy as np x_tensor = flow . Tensor ( np . random . randn ( 3 , 3 )) out = flow . _C . leaky_relu_yzh ( x_tensor , alpha = 0.2 ) \u4f46\u662f\uff0c\u8fd8\u9700\u8981\u6ce8\u518c\u53cd\u5411\uff0c\u624d\u80fd\u652f\u6301\u53cd\u5411\u4f20\u64ad\u3002\u6211\u4eec\u4e5f\u5148\u5c06\u53cd\u5411\u9700\u8981\u7684 LeakyReluGrad \u5bfc\u51fa\u4e3a functional \u63a5\u53e3\u3002 - name : \"leaky_relu_yzh_grad\" signature : \"Tensor (Tensor x, Tensor dy, Float alpha) => LeakyReluYZHGrad\" bind_python : False \u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91 \u53cd\u5411\u4f20\u64ad\u7684\u672c\u8d28\u5c31\u662f\u9ad8\u6570\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\uff0c\u53ea\u4e0d\u8fc7 Autodiff \u5c06\u94fe\u5f0f\u6cd5\u5219\u53d8\u5f97\u6a21\u5757\u5316\u3001\u6613\u590d\u7528\u3002 \u53ef\u4ee5\u5148\u9605\u8bfb CSC321 Lecture 10: Automatic Differentiation \u4e86\u89e3 autodiff \u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4ece\u903b\u8f91\u4e0a\u800c\u8a00\uff0c\u4e00\u4e2a\u7b97\u5b50\u5728\u53cd\u5411\u8fc7\u7a0b\u4e2d\u80fd\u591f\u6c42\u5bfc\u6570\uff0c\u4e00\u822c\u9700\u8981\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u8f93\u5165\u3001\u8f93\u51fa \u6b63\u5411\u8fc7\u7a0b\u7684 attr \u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e0a\u4e00\u5c42\uff08\u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u4e0b\u4e00\u5c42\uff09\u4f20\u9012\u8fc7\u6765\u7684\u6b63\u5411\u8f93\u51fa\u7684\u68af\u5ea6 \u672a\u6765 Graph \u6a21\u5f0f\u548c Eager \u6a21\u5f0f\u4e0b\u7684\u53cd\u5411\u903b\u8f91\u4f1a\u5408\u5e76\uff0c\u4f46\u76ee\u524d\u8fd8\u662f\u9700\u8981\u5206\u522b\u6ce8\u518c\u3002 \u4e3a Eager \u6a21\u5f0f\u6ce8\u518c\u53cd\u5411 \u6c42\u5bfc\u90e8\u5206\u5728 oneflow/core/autograd/gradient_funcs/activation.cpp \u5b8c\u6210 \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a LeakyReluYZHCaptureState \uff1a\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784\u4f53 \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u6784\u4f53\uff0c\u7ee7\u627f\u81ea AutoGradCaptureState \uff0c\u7528\u4e8e\u5b58\u50a8 op \u7684\u5c5e\u6027\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u6c42\u5bfc\u3002 struct LeakyReluYZHCaptureState : public AutoGradCaptureState { bool requires_grad ; // \u8f93\u5165x\u662f\u5426\u9700\u8981\u68af\u5ea6 float alpha = 0.0 ; // \u8f93\u5165\u7684\u53c2\u6570alpha }; LeakyReluYZH \u7c7b\uff1a\u7ee7\u627f\u81ea OpExprGradFunction \u7684\u7c7b\u3002\u9700\u8981\u91cd\u5199\u4e09\u4e2a\u51fd\u6570\uff1a Init \u3001 Capture \u3001 Apply \u3002 class LeakyReluYZH : public OpExprGradFunction < LeakyReluYZHCaptureState > { public : Maybe < void > Init ( const OpExpr & op ) override { //... } Maybe < void > Capture ( LeakyReluYZHCaptureState * ctx , const TensorTuple & inputs , const TensorTuple & outputs , const AttrMap & attrs ) const override { //... } Maybe < void > Apply ( const LeakyReluYZHCaptureState * ctx , const TensorTuple & out_grads , TensorTuple * in_grads ) const override { //... } }; Init\uff1a\u505a\u7684\u662f\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u53ef\u4ee5\u6839\u636e\u524d\u5411 op \u7684\u914d\u7f6e\uff0c\u6765\u521d\u59cb\u5316\u5c5e\u6027\u3002 Maybe < void > Init ( const OpExpr & op ) override { const auto * fw_op_expr = dynamic_cast < const UserOpExpr *> ( & op ); CHECK_NOTNULL_OR_RETURN ( fw_op_expr ); base_attrs_ = MakeAttrMapFromUserOpConf ( fw_op_expr -> proto ()); return Maybe < void >:: Ok (); } Capture\uff1a\u7528\u4e8e\u6355\u6349\u524d\u5411\u7684 Tensor\uff0c\u5c5e\u6027\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u6c42\u5bfc\u3002 \u4ee5 LeakyReluYZH \u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230\uff1aa) \u8f93\u5165\u7684 Tensor\uff0c\u5f53 Tensor \u6570\u503c\u5927\u4e8e 0\uff0c\u68af\u5ea6\u4e3a 1\uff0c\u5f53\u5c0f\u4e8e 0\uff0c\u68af\u5ea6\u4e3a alpha b) alpha\u7684\u6570\u503c Maybe < void > Capture ( LeakyReluYZHCaptureState * ctx , const TensorTuple & inputs , const TensorTuple & outputs , const AttrMap & attrs ) const override { CHECK_EQ_OR_RETURN ( inputs . size (), 1 ); // \u5224\u65ad\u8f93\u5165\u4e2a\u6570\u662f\u5426\u4e3a1 ctx -> requires_grad = inputs . at ( 0 ) -> requires_grad (); // \u5224\u65ad\u8f93\u5165\u662f\u5426\u9700\u8981\u68af\u5ea6 if ( ! ctx -> requires_grad ) { return Maybe < void >:: Ok (); } // \u5982\u679c\u4e0d\u9700\u8981\u68af\u5ea6\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u6c42\u5bfc\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de Maybe<void>::Ok() ComposedAttrMap composed_attrs ( attrs , base_attrs_ ); ctx -> alpha = JUST ( composed_attrs . GetAttr < float > ( \"alpha\" )); // \u83b7\u53d6 alpha\uff0c\u5e76\u5b58\u5165 ctx->alpha \u4e2d ctx -> SaveTensorForBackward ( inputs . at ( 0 )); // \u8c03\u7528 SaveTensorForBackward \u65b9\u6cd5\uff0c\u4fdd\u5b58\u8f93\u5165\u7684 Tensor return Maybe < void >:: Ok (); } Apply\uff1a\u5b9e\u9645\u8ba1\u7b97\u68af\u5ea6\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u5230\u5148\u524d\u7684 Tensor\uff0c\u5e76\u8c03\u7528 functional \u63a5\u53e3\u4e0b\u6ce8\u518c\u7684 LeakyReluGrad\uff0c\u6c42\u5f97\u68af\u5ea6\uff0c\u5e76\u8fd4\u56de Maybe < void > Apply ( const LeakyReluYZHCaptureState * ctx , const TensorTuple & out_grads , TensorTuple * in_grads ) const override { CHECK_EQ_OR_RETURN ( out_grads . size (), 1 ); // \u68c0\u67e5\u68af\u5ea6 Tensor \u4e2a\u6570\u662f\u5426\u4e3a 1 in_grads -> resize ( 1 ); // \u56e0\u4e3a\u8f93\u5165\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec resize(1) if ( ctx -> requires_grad ) { const auto & x = ctx -> SavedTensors (). at ( 0 ); // \u8c03\u7528 SavedTensors \u63a5\u53e3\uff0c\u62ff\u5230\u5148\u524d\u901a\u8fc7 SaveTensorForBackward \u63a5\u53e3\u4fdd\u5b58\u7684 Tensor in_grads -> at ( 0 ) = JUST ( functional :: LeakyReluYZHGrad ( x , out_grads . at ( 0 ), ctx -> alpha )); // \u62ff\u5230 x\uff0cdy\uff0calpha\uff0c\u4f20\u5165\u7ed9 LeakyReluYZHGrad \u8ba1\u7b97\uff0c\u5e76\u5c06\u68af\u5ea6\u8fd4\u56de\u7ed9 in_grads->at(0) } return Maybe < void >:: Ok (); } \u6700\u540e\u4e00\u6b65\u662f\u6ce8\u518c\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f op type name\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7ee7\u627f\u81ea OpExprGradFunction \u7684\u7c7b\u3002 REGISTER_OP_EXPR_GRAD_FUNCTION ( \"leaky_relu_yzh\" , LeakyReluYZH ); // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u4e8e\u6c42\u5bfc\u7684\u7c7b\u540d","title":"\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50"},{"location":"OneFlow/forward/#oneflow","text":"\u672c\u6587\u5c06\u4ee5\u5f00\u53d1\u4e00\u4e2a leaky_relu\uff08\u51c6\u786e\u8bf4\u662f leaky_relu_yzh op\uff0c\u56e0\u4e3a master \u5206\u652f\u7684 leaky_relu \u7ec4\u5408\u4e86\u5176\u5b83\u77e5\u8bc6\u70b9\uff0c\u4e0d\u9002\u5408\u4f5c\u4e3a\u6559\u7a0b\u5c55\u793a\uff09\u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50\u3002 \u672c\u6587\u5bf9\u5e94\u7684 PR \u5728 https://github.com/Oneflow-Inc/oneflow/pull/8350","title":"\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50"},{"location":"OneFlow/forward/#_1","text":"","title":"\u80cc\u666f"},{"location":"OneFlow/forward/#op-kernel","text":"\u5728\u4e0a\u6587\u63d0\u5230 \u201c\u5b9a\u4e49 op\u201d \u4e0e \u201c\u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91\u201d \u4e24\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u91cc\u7684 op \u4e0e kernel \u662f\u4e24\u4e2a\u6709\u5173\u8054\u7684\u6982\u5ff5\u3002 op \u662f\u903b\u8f91\u4e0a\u7684\u7b97\u5b50\uff0c\u5305\u542b OneFlow Compiling Runtime \u5728\u6784\u5efa\u8ba1\u7b97\u56fe\u65f6\u6240\u9700\u8981\u7684\u5fc5\u8981\u4fe1\u606f\uff0c\u5982\u8f93\u5165\u3001\u8f93\u51fa\u5f62\u72b6\uff0c\u54ea\u4e9b\u5f20\u91cf\u9700\u8981\u81ea\u52a8\u6c42\u5bfc\u7b49\u4fe1\u606f\u3002 \u6709\u4e86 op \u4e2d\u7684\u4fe1\u606f\uff0cOneFlow Compiling Runtime \u5c31\u53ef\u4ee5\u6784\u5efa\u8ba1\u7b97\u56fe\u5e76\u4f9d\u636e\u8ba1\u7b97\u56fe\u505a\u8d44\u6e90\u7533\u8bf7\u3001\u6784\u5efa\u7b49\u64cd\u4f5c\uff08\u5982\u6839\u636e\u5f20\u91cf\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u7533\u8bf7\u5185\u5b58\uff09\uff0c \u4f46\u662f op \u4e2d\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 \u5728\u771f\u6b63\u9700\u8981\u5904\u7406\u6570\u636e\u65f6\uff0cOneFlow Executing Runtime \u4f1a\u542f\u52a8 kernel \u5b8c\u6210\u8ba1\u7b97\uff0c\u6240\u4ee5 kernel \u4e2d\u5305\u542b\u4e86\u5177\u4f53\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 op\uff0cOneFlow Executing Runtime \u4f1a\u6839\u636e\u6570\u636e\u7c7b\u578b\u3001\u786c\u4ef6\u8bbe\u5907\uff08\u6bd4\u5982\u662f CPU \u8fd8\u662f CUDA\uff09\u7684\u5177\u4f53\u60c5\u51b5\uff0c\u9009\u62e9\u542f\u52a8\u4e0d\u540c\u7684 kernel\u3002","title":"op \u4e0e kernel"},{"location":"OneFlow/forward/#oneflow-op-user-op","text":"\u5728 OneFlow \u7cfb\u7edf\u4e2d\u5b58\u5728\u4e24\u7c7b\u7b97\u5b50\uff08op\uff09\uff1a\u7cfb\u7edf op \u548c user op\u3002 \u7cfb\u7edf op \u5b9a\u4e49\u5728\uff1a oneflow/core/operator/ \u76ee\u5f55\uff0c \u5bf9\u5e94\u7684 kernel \u5b9e\u73b0\u5728\uff1a oneflow/core/kernel \u76ee\u5f55\u3002 \u7cfb\u7edf op \u662f\u5bf9\u6784\u56fe\u3001\u6d41\u6c34\u7b49\u7cfb\u7edf\u6027\u80fd\u8f83\u4e3a\u5173\u952e\u7684\u4e00\u4e9b op\u3002 \u9664\u6781\u5c11\u6570 op \u5c5e\u4e8e\u7cfb\u7edf op \u5916\uff0c\u5927\u591a\u6570 op \u90fd\u662f user op\uff0c\u8fd9\u4e9b user op \u548c\u7528\u6237\u6a21\u578b\u4e1a\u52a1\u903b\u8f91\u76f8\u5173\u3002 OneFlow user op \u7684\u5b9a\u4e49\u53ca kernel \u5b9e\u73b0\u5206\u522b\u5728 oneflow/user/ops \u548c oneflow/user/kernels \u76ee\u5f55\u4e0b\u3002 \u76ee\u524d OneFlow \u5df2\u5b9e\u73b0\u4e86\u4e30\u5bcc\u7684\u7b97\u5b50\u5e93\uff0c\u4f46\u662f\u5f53\u5df2\u6709\u7684\u7b97\u5b50\u5e93\u65e0\u6cd5\u6ee1\u8db3\u642d\u5efa\u6a21\u578b\u7684\u9700\u6c42\u65f6\uff0c\u5c31\u9700\u8981\u65b0\u589e\u7b97\u5b50\u3002 \u672c\u6587\u4ecb\u7ecd\u7684\u65b0\u589e\u7b97\u5b50\u6307\u7684\u662f \u65b0\u589e user op \u3002","title":"OneFlow \u4e2d\u7684\u7cfb\u7edf op \u4e0e user op"},{"location":"OneFlow/forward/#ods-tablegen","text":"TableGen \u662f\u4e00\u4e2a\u4ee3\u7801\u751f\u6210\u5de5\u5177\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u5b83\u8bfb\u53d6\u5e76\u89e3\u6790\u4e00\u4e2a .td \u683c\u5f0f\uff08\u8bed\u6cd5\u63a5\u8fd1 C++ \u6a21\u677f\uff09\u7684\u6587\u4ef6\uff0c\u7136\u540e\u4ea4\u7ed9 TableGen \u540e\u7aef \u751f\u6210\u53e6\u5916\u683c\u5f0f\u7684\u8bed\u8a00\u3002 MLIR \u57fa\u4e8e TableGen \u5236\u5b9a\u4e86\u4e00\u5957\u7b97\u5b50\u5b9a\u4e49\u89c4\u8303 ODS \u4ee5\u53ca\u5bf9\u5e94\u7684\u540e\u7aef OpDefinitionsGen OneFlow \u5728 ODS \u7684\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e86 TableGen OneFlow \u540e\u7aef \uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u5b9a\u4e49 OneFlow user op\u3002 \u56e0\u6b64\uff0cOneFlow \u7684 user op \u5b9a\u4e49\u5199\u5728 OneFlowUserOps.td \u6587\u4ef6\u4e2d\u3002","title":"ODS \u4e0e TableGen"},{"location":"OneFlow/forward/#op","text":"\u5728 OneFlow \u4e2d\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684 user op\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\u56fe\u3002 \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b4\u6b65\uff1a 1. \u5b9a\u4e49 op 2. \u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91 3. \u5bfc\u51fa functional \u63a5\u53e3 4. \u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91 (\u4e0a\u56fe\u4e2d 4. 5.)","title":"\u5f00\u53d1 op"},{"location":"OneFlow/forward/#op_1","text":"\u5b9a\u4e49 op \u6307\u7684\u662f\uff0c\u5bf9 op \u7684\u540d\u79f0\uff0cop \u7684\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u548c op \u7684\u5c5e\u6027\u8fdb\u884c\u58f0\u660e\u3002 OneFlow \u9075\u5faa MLIR \u7684 ODS\uff08Operation Definition Specification\uff09 \u5b9e\u73b0\u4e86\u81ea\u5df1\u7684 MLIR OneFlow Dialect\u3002 \u5728\u7b97\u5b50\u5b9a\u4e49\u65b9\u9762\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5404\u79cd\u63a8\u5bfc\u51fd\u6570\u548c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u63a5\u53e3\u90fd\u53ef\u4ee5\u59d4\u6258\u7ed9 ODS\uff0c\u964d\u4f4e\u4e86\u4eba\u5de5\u624b\u5199\u51fa\u9519\u7684\u6982\u7387\uff0c\u540e\u7eed\u4f18\u5316\u3001\u683c\u5f0f\u8f6c\u5316\u7b49\u6d41\u7a0b\u53ef\u4ee5\u66f4\u7075\u6d3b\u3002 \u5b9a\u4e49\u4e00\u4e2a OneFlow user op\uff0c\u4e3b\u8981\u5305\u62ec 5 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\uff1a op class \u8f93\u5165 input \u8f93\u51fa output \u5c5e\u6027 attrs \u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3","title":"\u5b9a\u4e49 op"},{"location":"OneFlow/forward/#op-class","text":"\u53ef\u4ee5\u5728 oneflow/ir/include/OneFlow/OneFlowUserOps.td \u67e5\u770b op \u5b9a\u4e49\u7684\u6e90\u7801\u3002 \u4ee5 def \u5173\u952e\u5b57\u5f00\u5934\u5b9a\u4e49\u4e00\u4e2a op\uff0c\u8be5 op \u7ee7\u627f OneFlow_BaseOp \uff0c\u540c\u65f6\u6307\u5b9a OneFlow_BaseOp \u7684\u6a21\u7248\u53c2\u6570\u3002 \u6a21\u7248\u53c2\u6570\u4f9d\u6b21\u4e3a op type name\u3001 Trait \u5217\u8868\u3002 def OneFlow_LeakyReluYZHOp : OneFlow_BaseOp < \"leaky_relu_yzh\" , [ NoSideEffect , DeclareOpInterfaceMethods < UserOpCompatibleInterface > ] > { //... } \u5176\u4e2d \"leaky_relu_yzh\" \u662f\u6307\u5b9a\u7684 op type name\u3002\u6bcf\u4e2a op \u90fd\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684 op type name \u4f5c\u4e3a\u5168\u5c40\u6807\u8bc6\u7b26\u3002 \u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570\u662f\u4e00\u4e2a list\uff08 [...] \uff09\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a Trait\uff0cOneFlow \u4e2d\u5e38\u7528\u7684\u6709\uff1a NoSideEffect \u8868\u793a\u8be5\u7b97\u5b50\u65e0\u526f\u4f5c\u7528\uff08\u5373\u4e0d\u4f1a\u6539\u53d8\u5185\u5b58\u3001\u7f51\u7edc\u3001\u7ba1\u9053\u3001\u78c1\u76d8\u7b49\u7684\u7cfb\u7edf\u72b6\u6001\uff09\uff0c\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u6307\u5bfc\u67d0\u4e9b\u4f18\u5316\u64cd\u4f5c NoGrad \u8868\u793a\u8be5\u7b97\u5b50\u5728\u6570\u5b66\u4e0a\u6ca1\u6709\u68af\u5ea6\uff08\u4e0d\u53ef\u5bfc\uff09 CpuOnly \u8868\u793a\u8be5\u7b97\u5b50\u53ea\u652f\u6301\u5728 CPU \u8bbe\u5907\u4e0a\u6267\u884c SupportNonContiguous \u8868\u793a\u8be5\u7b97\u5b50\u662f\u5426\u652f\u6301 NonContiguous \u5f20\u91cf\uff08\u5173\u4e8e Contiguous Tensor \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u53c2\u8003 PyTorch Internals \u4e2d\u7684\u76f8\u5173\u5185\u5bb9 \uff09","title":"op class"},{"location":"OneFlow/forward/#input-output","text":"\u901a\u8fc7\u91cd\u5199 input \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u5165\uff0c\u6bd4\u5982 // \u4e00\u4e2a\u8f93\u5165 x let input = ( ins OneFlow_Tensor : $x ); \u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf x \u3002\u8f93\u5165\u7684\u683c\u5f0f\u4e3a \u8f93\u5165\u7c7b\u578b:$name \u3002 \u8f93\u5165\u7c7b\u578b\u76ee\u524d\u5305\u62ec\uff1a OneFlow_Tensor Variadic<OneFlow_Tensor> \uff1a\u6307\u53ef\u53d8 tensor\uff0c\u6bd4\u5982 concat op\uff0c\u652f\u6301 concat \u53ef\u53d8\u4e2a\u6570\u7684 tensor\u3002 Optional<OneFlow_Tensor> \uff1a\u8868\u793a\u8fd9\u4e2a tensor \u662f\u53ef\u9009\u7684\uff0c\u65e2\u53ef\u4ee5\u6709\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff0c\u6bd4\u5982 conv op \u4e2d\u7684 add_output\u3002 \u4e00\u4e2a op \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8f93\u5165\uff0c\u6bd4\u5982\uff1a // \u4e24\u4e2a\u8f93\u5165\uff1aa, b let input = ( ins OneFlow_Tensor : $a , OneFlow_Tensor : $b ); \u901a\u8fc7\u91cd\u5199 output \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u51fa\uff0c\u6bd4\u5982 let output = ( outs OneFlow_Tensor : $out0 , OneFlow_Tensor : $out1 ); \u5b9a\u4e49\u4e86 2 \u4e2a\u8f93\u51fa\u5f20\u91cf\u3002","title":"\u8f93\u5165 input \u4e0e\u8f93\u51fa output"},{"location":"OneFlow/forward/#attrs","text":"\u901a\u8fc7\u91cd\u5199 attrs \u57df\u5b9a\u4e49 op \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u5b9a\u4e49 dropout \u4e2d\u7684 rate \u5c5e\u6027\uff0c let attrs = ( ins DefaultValuedAttr < F32Attr , \"0.\" >: $rate ); \u5b83\u8868\u793a\u540d\u4e3a $rate \u7684\u7c7b\u578b\u662f F32Attr \uff0c\u9ed8\u8ba4\u503c\u662f 0. \u3002\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\u9ed8\u8ba4\u503c\uff1a let attrs = ( ins F32Attr : $rate ); I32Attr\u3001F32Attr\u3001BoolAttr\u3001StrAttr\u3001I32ArrayAttr \u7b49\u5e38\u89c1\u57fa\u7840\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u5728 OpBase.td \u4e2d\u3002 OneFlow \u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5982 ShapeAttr\u3001DTArrayAttr \u7b49\u5b9a\u4e49\u5728 OneFlowBase.td \u4e2d\u3002","title":"\u5c5e\u6027 attrs"},{"location":"OneFlow/forward/#_2","text":"\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u57df\uff0c\u7528\u4e8e\u6307\u5b9a\u662f\u5426\u751f\u6210\u5bf9\u5e94\u7684\u63a5\u53e3\u3002\u8fd9\u4e9b\u63a5\u53e3\u5f80\u5f80\u662f\u6784\u5efa\u8ba1\u7b97\u56fe\u8fc7\u7a0b\u4e2d\u7684\u63a8\u5bfc\u63a5\u53e3\u3002 \u6bd4\u5982 shape \u63a8\u5bfc\uff08\u6839\u636e\u8f93\u5165\u7684 shape \u63a8\u5bfc\u8f93\u51fa\u7684\u63a8\u5bfc\uff09\u3001data type \u63a8\u5bfc\u3001SBP \u63a8\u5bfc\u7b49\u3002 OneFlow-TableGen \u4ec5\u8d1f\u8d23\u751f\u6210\u8fd9\u4e9b\u51fd\u6570\u7684\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u5728\u5176\u81ea\u52a8\u751f\u6210\u7684 cpp \u6587\u4ef6\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0d\u4f1a\u751f\u6210\u4e0b\u5217\u4efb\u4f55\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u9700\u8981\u751f\u6210\u54ea\u4e9b\u63a5\u53e3\u3002 let has_check_fn = 1 ; // \u751f\u6210\u5c5e\u6027\u68c0\u67e5\u63a5\u53e3 let has_logical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3 let has_physical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3 let has_get_sbp_fn = 1 ; // \u751f\u6210 get sbp \u63a5\u53e3 let has_sbp_signature_infer_fn = 1 ; // \u751f\u6210 sbp signature \u63a8\u5bfc\u63a5\u53e3\uff0c\u672a\u6765\u4f1a\u79fb\u9664\uff0c\u63a8\u8350\u4f7f\u7528 has_nd_sbp_infer_fn let has_data_type_infer_fn = 1 ; // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3 let has_device_and_stream_infer_fn = 1 ; // \u751f\u6210 device \u63a8\u5bfc\u63a5\u53e3 let has_input_arg_modify_fn = 1 ; // \u751f\u6210\u8f93\u5165 modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49 let has_output_arg_modify_fn = 1 ; // \u751f\u6210\u8f93\u51fa modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49 let has_output_blob_time_shape_infer_fn = 1 ; // \u751f\u6210\u8f93\u51fa time shape \u63a8\u5bfc\u63a5\u53e3 let has_nd_sbp_infer_fn = 1 ; // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3 \u4e00\u822c\u5e38\u7528\u7684\u662f\u4e0b\u9762\u51e0\u4e2a\uff0c let has_logical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3 let has_physical_tensor_desc_infer_fn = 1 ; // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3 let has_data_type_infer_fn = 1 ; // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3 let has_nd_sbp_infer_fn = 1 ; // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3 \u4e86\u89e3\u5b8c\u4e0a\u9762\u8fd9\u4e9b\u6982\u5ff5\u548c\u7528\u6cd5\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u4fee\u6539 oneflow/ir/include/OneFlow/OneFlowUserOps.td \u6587\u4ef6\u3002 leaky_relu_yzh op \u5b8c\u6574\u7684\u5b9a\u4e49\u89c1 \u8fd9\u91cc \uff1a \u5728 OneFlowUserOps.td \u4e2d\u65b0\u589eOp\u5b9a\u4e49\u4e4b\u540e\uff0c\u91cd\u65b0 make \u540e\u4f1a\u81ea\u52a8\u5728 build \u76ee\u5f55\u4e0b\u7684 oneflow/core/framework/ \u76ee\u5f55\u4e0b\u751f\u6210\u6587\u4ef6\u4ee5\u4e0b\u51e0\u4e2a\u6587\u4ef6\uff1a op_generated.h \uff1a\u7531\u89e3\u6790 .td \u6587\u4ef6\u751f\u6210\u7684 op C++ \u7c7b op_generated.cpp \uff1a\u7531\u89e3\u6790 .td \u6587\u4ef6\u751f\u6210\u7684 op \u6ce8\u518c\u4ee3\u7801\uff08\u5305\u542b\u8c03\u7528 REGISTER_USER_OP \u5b8f\u7684\u4ee3\u7801\uff09 \u4e4b\u540e\u9700\u8981\u505a\u7684\u5c31\u662f\u5728 oneflow/user/ops \u76ee\u5f55\u4e0b\u65b0\u52a0\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u7528\u4e8e\u5b9e\u73b0 op \u7684\u63a5\u53e3\u3002 \u6bd4\u5982 leaky_relu_yzh \u5bf9\u5e94\u7684\u6587\u4ef6\u5728 oneflow/user/ops/leaky_relu_yzh_op.cpp \u5b9e\u73b0\u4e86\u63a8\u5bfc\u903b\u8f91\u5f20\u91cf\u3001\u63a8\u5bfc\u7269\u7406\u5f20\u91cf\u3001\u63a8\u5bfc SBP \u4fe1\u606f\u4ee5\u53ca\u63a8\u5bfc\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u5404\u63a5\u53e3\u3002","title":"\u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3"},{"location":"OneFlow/forward/#kernel","text":"op \u7684\u8ba1\u7b97\u652f\u6301\u591a\u79cd\u8bbe\u5907\uff08\u5982 CPU\u3001GPU\u3001DCU \u7b49\uff09\uff0c\u6240\u4ee5\u8981\u5206\u522b\u5b9e\u73b0\u8ba1\u7b97\u903b\u8f91\u3002 \u76f8\u5173\u4ee3\u7801\uff1a Leaky ReLU CPU Kernel Leaky ReLU GPU Kernel","title":"\u5b9e\u73b0 Kernel \u903b\u8f91"},{"location":"OneFlow/forward/#cpu","text":"template < typename T > class CpuLeakyReluYZHKernel final : public user_op :: OpKernel { public : CpuLeakyReluYZHKernel () = default ; ~ CpuLeakyReluYZHKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * x = ctx -> Tensor4ArgNameAndIndex ( \"x\" , 0 ); user_op :: Tensor * y = ctx -> Tensor4ArgNameAndIndex ( \"y\" , 0 ); const int32_t elem_cnt = x -> shape (). elem_cnt (); const T * x_ptr = x -> dptr < T > (); T * y_ptr = y -> mut_dptr < T > (); const auto alpha = ctx -> Attr < float > ( \"alpha\" ); FOR_RANGE ( int32_t , i , 0 , elem_cnt ) { y_ptr [ i ] = x_ptr [ i ] > 0 ? x_ptr [ i ] : alpha * x_ptr [ i ]; } } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; \u5728 OneFlow \u4e2d\u5b9e\u73b0 kernel\uff0c \u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow::user_op::OpKernel \u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u5176\u4e2d\u7684\u865a\u51fd\u6570\u3002 \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u91cd\u5199\u4e86 Compute \u4e0e AlwaysComputeWhenAllOutputsEmpty \u4e24\u4e2a\u865a\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u610f\u4e49\u5206\u522b\u662f\uff1a Compute \u5fc5\u987b\u91cd\u5199\uff0c\u5728\u5176\u4e2d\u5b9e\u73b0\u5177\u4f53\u7684\u8fd0\u7b97\u903b\u8f91 AlwaysComputeWhenAllOutputsEmpty \u5fc5\u987b\u91cd\u5199\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570 op \u800c\u8a00\uff0c\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u5bf9\u4e8e\u6781\u5c11\u6570\u5185\u90e8\u9700\u8981\u7ef4\u62a4\u72b6\u6001\uff0c\u5373\u4f7f\u8f93\u51fa\u4e3a\u7a7a\u4e5f\u9700\u8981\u8c03\u7528 kernel \u8fdb\u884c\u8ba1\u7b97\u7684 op \u800c\u8a00\uff0c\u5e94\u8be5\u8fd4\u56de true Compute \u65b9\u6cd5\u4e2d\u901a\u8fc7\u8c03\u7528 user_op::KernelComputeContext* ctx \u4e2d\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u5f20\u91cf\u3001\u8f93\u51fa\u5f20\u91cf\u3001attr \u5177\u4f53\u7684\u6570\u636e\uff0c\u518d\u6309\u7167\u7b97\u5b50\u7684\u7b97\u6cd5\u903b\u8f91\u5bf9\u5b83\u4eec\u8fdb\u884c\u5904\u7406\u3002 \u4ee5\u4e0b\u662f\u5bf9 CpuLeakyReluKernel::Compute \u5904\u7406\u903b\u8f91\u7684\u89e3\u8bfb\uff1a \u9996\u5148\u53d6\u5f97 \"x\" \uff0c \"y\" \u4e24\u4e2a Tensor\u3002\u4f20\u5165 Tensor4ArgNameAndIndex \u7684\u5b57\u7b26\u4e32\u8981\u548c\u4e4b\u524d\u5728 OneFlowUserOps.td \u8bbe\u7f6e\u7684\u540d\u79f0\u4e00\u81f4 \u83b7\u53d6 x \u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u7528\u4e8e for \u5faa\u73af\u8fdb\u884c\u8ba1\u7b97 \u83b7\u53d6\u5c5e\u6027 alpha \u8fdb\u5165\u6b21\u6570\u4e3a elem_cnt \u7684 for \u5faa\u73af\uff0c\u5c06\u7ed3\u679c\u5199\u5165","title":"CPU \u8ba1\u7b97\u903b\u8f91"},{"location":"OneFlow/forward/#kernel_1","text":"\u5b9e\u73b0 kernel \u7c7b\u540e\uff0c\u9700\u8981\u8c03\u7528 REGISTER_USER_KERNEL \u6ce8\u518c\u3002 #define REGISTER_CPU_LEAKY_RELU_YZH_KERNEL(dtype) \\ REGISTER_USER_KERNEL(\"leaky_relu_yzh\") \\ .SetCreateFn<CpuLeakyReluYZHKernel<dtype>>() \\ .SetIsMatchedHob((user_op::HobDeviceType() == DeviceType::kCPU) \\ && (user_op::HobDataType(\"y\", 0) == GetDataType<dtype>::value)); \u8fd9\u91cc\u4f1a\u8c03\u7528 REGISTER_USER_KERNEL \u5b8f\uff0c\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a op type name\uff1a\u4e3a\u54ea\u4e2a op \u6ce8\u518c kernel SetCreateFn<T>() \uff1a\u8be5\u6a21\u677f\u65b9\u6cd5\u7684\u6a21\u677f\u53c2\u6570 T \uff0c\u5c31\u662f\u6211\u4eec\u5b9e\u73b0\u7684 kernel \u7c7b\uff0cOneFlow Runtime \u5c06\u4f7f\u7528\u5b83\u521b\u5efa kernel \u5bf9\u8c61\u3002 SetIsMatchedHob \uff1a\u56e0\u4e3a\u4e00\u4e2a op \u53ef\u80fd\u6709\u591a\u4e2a kernel\uff0c\u8981\u60f3\u6839\u636e\u7269\u7406\u8bbe\u5907\u53ca\u6570\u636e\u683c\u5f0f\u7684\u4e0d\u540c\u800c\u9009\u62e9\u4e0d\u540c\u7684 kernel \u8fdb\u884c\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u8c03\u7528 SetIsMatchedHob \u8fdb\u884c\u8bbe\u7f6e\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u4e3a true \u65f6\uff0cOneFlow \u5c06\u8c03\u7528\u8be5 kernel \u5b8c\u6210\u8ba1\u7b97\u3002\u4ee5\u4e0a\u4ee3\u7801\u7684\u5339\u914d\u903b\u8f91\u662f\uff1a\u5f53\u786c\u4ef6\u8bbe\u5907\u4e3a cpu \uff0c\u4e14 y \u7684\u6570\u636e\u7c7b\u578b\u548c dtype \u4e00\u81f4\u65f6\uff0c\u9009\u62e9\u8c03\u7528\u6ce8\u518c\u7684 kernel \u7c7b\uff08 CpuLeakyReluYZHKernel<dtype> \uff09\u3002","title":"\u6ce8\u518c Kernel"},{"location":"OneFlow/forward/#gpu","text":"CUDA \u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6\u5165\u95e8\u53ef\u4ee5\u53c2\u8003\uff1a \u89c6\u9891\uff1aCUDA \u7684\u7531\u6765 \u89c6\u9891\uff1aCUDA \u7684\u5165\u95e8\u5c0f\u7a0b\u5e8f \u89c6\u9891\uff1a\u7ebf\u7a0b\u5c42\u7ea7 \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u89c6\u9891\u90fd\u65e0\u6cd5\u66ff\u4ee3\u81ea\u5df1\u8ba4\u771f\u5b66\u4e60\u5b98\u65b9\u8d44\u6599\uff1a CUDA C Programming Guide \u4e86\u89e3\u4e86 CUDA \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5c31\u4e0d\u96be\u7406\u89e3 leaky_relu CUDA \u7248\u672c\u7684\u5b9e\u73b0\u3002 \u9996\u5148\u5b9a\u4e49\u4e86 leaky_relu \u524d\u5411\u8fd0\u7b97\u7684 CUDA \u6838\u51fd\u6570 template < typename T > __global__ void LeakyReluForwardGpu ( const int n , const float alpha , const T * x , T * y ) { CUDA_1D_KERNEL_LOOP ( i , n ) { y [ i ] = x [ i ] > 0 ? x [ i ] : x [ i ] * alpha ; } } \u5176\u4e2d\u8c03\u7528\u4e86\u5b8f CUDA_1D_KERNEL_LOOP \u8fdb\u884c\u8fd0\u7b97 \u5728 Compute \u51fd\u6570\u4e2d\uff0c\u8c03\u7528\u4e86 RUN_CUDA_KERNEL (\u4e5f\u662f\u5b9a\u4e49\u5728 cuda_util.h \u8fd9\u4e2a\u6587\u4ef6\u4e2d)\u8fd9\u4e2a\u5b8f\u542f\u52a8\u6838\u51fd\u6570\u3002 \u5bf9\u5e94\u7684 GPU kernel \u7c7b\u7684\u5b9e\u73b0\u89c1\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L32-L49 \u5176\u4e2d\u7528\u5230\u4e86\u542f\u52a8 kernel \u7684\u5b8f RUN_CUDA_KERNEL \uff0c\u5b83\u7684\u5b9a\u4e49\u662f: #define RUN_CUDA_KERNEL(func, device_ctx_ptr, thread_num, ...) \\ func<<<SMBlocksNum4ThreadsNum(thread_num), kCudaThreadsNumPerBlock, 0, \\ (device_ctx_ptr)->cuda_stream()>>>(__VA_ARGS__) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6838\u51fd\u6570\u540d\u5b57 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f device context\uff0c\u540e\u7eed\u83b7\u53d6\u5bf9\u5e94\u7684 cuda_stream \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u8981\u542f\u52a8\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4f1a\u6839\u636e\u7ebf\u7a0b\u6570\u91cf\u6765\u8ba1\u7b97\u6240\u9700\u7684 Block \u6570\u76ee\u3002 \u56e0\u4e3a leaky relu \u662f elementwise \u8fd0\u7b97\uff0c\u5404\u4e2a\u5143\u7d20\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u542f\u52a8\u4e86 elem_cnt \u4e2a\u7ebf\u7a0b\u3002 \u540e\u7eed\u7684\u6ce8\u518c\u4e0e CPU \u7248\u672c\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u76f4\u63a5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u5373\u53ef\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L51-L62 \u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u8bbe\u5907\u7c7b\u7684 Compute \u4e2d\u5927\u90e8\u5206\u4ee3\u7801\u662f\u91cd\u590d\u7684\u3002\u4e00\u79cd\u66f4\u4f18\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\u662f\u7528\u4e00\u4e2a .cpp \u6587\u4ef6\u5b8c\u6210 kernel \u548c\u6ce8\u518c\u7684\u903b\u8f91\uff0c .cu \u6587\u4ef6\u7f16\u5199 GPU Kernel \u51fd\u6570\u548c GPU \u6a21\u677f\u7279\u5316\u7684\u4ee3\u7801\uff0c .h \u6587\u4ef6\u7528\u4e8e\u5b9a\u4e49\u548c\u7f16\u5199\u6ce8\u518c\u5b8f\u3002\u53ef\u53c2\u8003 dim_gather_kernel_* \u4e2d\u7684\u4ee3\u7801\u3002 OneFlow \u4e3a\u4e86\u9002\u914d\u591a\u79cd\u8bbe\u5907\uff0c\u8fd8\u63d0\u4f9b\u4e86 Primitive \u7ec4\u4ef6\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a Primitive PR","title":"GPU \u8ba1\u7b97\u903b\u8f91"},{"location":"OneFlow/forward/#functional","text":"\u5173\u4e8e functional \u63a5\u53e3\u5c42\u7684\u8be6\u7ec6\u4ecb\u7ecd\u5728\u8fd9\u91cc\uff1a https://github.com/Oneflow-Inc/oneflow/wiki/Functional-Interface \u6982\u62ec\u800c\u8a00\uff0cfunctional \u5c42\u8d77\u5230\u4e86\u201c\u4e0a\u63a5 Python\uff0c\u4e0b\u8054 C++\u201d\u7684\u4f5c\u7528\uff1a \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Module \u2502 \u2502 (Python) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 Functional \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 Op/Kernels \u2502 \u2502 (C++) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u56e0\u6b64\uff0c\u5728\u4e0a\u6587\u5b9a\u4e49 op \u548c\u6ce8\u518c kernel \u540e\uff0c\u9700\u8981\u4e3a\u7b97\u5b50\u5bfc\u51fa functional \u63a5\u53e3\uff0c\u624d\u80fd\u4f7f\u7528\u6237\u901a\u8fc7 Python \u4ee3\u7801\u8c03\u7528\u8be5\u7b97\u5b50\u3002 \u5bfc\u51fa functional \u63a5\u53e3\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c \u5728 oneflow/core/functional/functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0","title":"\u5bfc\u51fa functional \u63a5\u53e3"},{"location":"OneFlow/forward/#functor","text":"\u5bf9\u4e8e leaky_relu_yzh op\uff0c\u5728 activation_functor.cpp \u4e2d\uff0c\u5bf9\u5176\u8fdb\u884c\u5b9a\u4e49\uff1a class LeakyReluYZHFunctor { public : LeakyReluYZHFunctor () { op_ = CHECK_JUST ( one :: OpBuilder ( \"leaky_relu_yzh\" ). Input ( \"x\" ). Output ( \"y\" ). Build ()); } Maybe < Tensor > operator ()( const std :: shared_ptr < one :: Tensor >& x , const float & alpha ) const { MutableAttrMap attrs ; JUST ( attrs . SetAttr < float > ( \"alpha\" , alpha )); return OpInterpUtil :: Dispatch < one :: Tensor > ( * op_ , { x }, attrs ); } private : std :: shared_ptr < OpExpr > op_ ; }; \u5728\u6784\u9020\u51fd\u6570\u91cc\uff0c\u6784\u9020\u4e86 leaky_relu \u8fd9\u4e2aop \u5b9e\u73b0 operator() \u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u901a\u8fc7 Dispatch \u8c03\u7528\u6784\u9020\u597d\u7684 op\uff0c\u5e76\u5206\u522b\u4f20\u5165\u8f93\u5165\uff0c\u5c5e\u6027 \u7c7b\u4f3c\u7684\u6211\u4eec\u4e5f\u7ed9 LeakyReluGrad \u5bfc\u51fa functional \u63a5\u53e3\uff0c\u4ee5\u4fbf\u540e\u7eed\u7f16\u5199\u6c42\u5bfc\u903b\u8f91\u4f7f\u7528 \u6700\u540e\u6211\u4eec\u9700\u8981\u6ce8\u518c\u5230 Functional Library\uff1a https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/core/functional/impl/activation_functor.cpp#L610-L611 m . add_functor < impl :: LeakyReluYZHFunctor > ( \"LeakyReluYZH\" ); // \u6ce8\u610f\u6700\u540e\u5b57\u7b26\u4e32\u4e2d\u7684\u540d\u5b57\u5728\u540e\u7eed\u7684 functional_api.yaml \u4e2d\u4f1a\u7528\u5230 \u901a\u8fc7 m.add_functor \u6ce8\u518c\u540e\u7684 functor\uff0c\u53ef\u4ee5\u5728 C++ \u5c42\u4f7f\u7528\uff0c\u5982\u901a\u8fc7 functional::LeakyRelu \u5c31\u53ef\u4ee5\u8c03\u7528 LeakyReluFunctor \u3002","title":"\u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c"},{"location":"OneFlow/forward/#functional_apiyaml","text":"functional \u901a\u8fc7\u89e3\u6790 yaml \u914d\u7f6e\u6587\u4ef6\uff0c\u5728 build \u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5e2e\u6211\u4eec\u751f\u6210\u63a5\u53e3\u3002 \u5728 functional_api.yaml \u6587\u4ef6\u4e2d\uff0c\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u3002 https://github.com/Oneflow-Inc/oneflow/pull/8350/files#diff-4b35c1dcdbae81b75439ba570bc149554ca85b83757430613fcb612ae25972afR572-R579 - name: \"leaky_relu_yzh\" signature: \"Tensor (Tensor x, Float alpha) => LeakyReluYZH\" bind_python: True \u5176\u4e2d name \u8868\u793a\u5bfc\u51fa\u5230 Python \u63a5\u53e3\u540e\u51fd\u6570\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u5bfc\u51fa\u540e\u5728 Python \u4e0b\u4f7f\u7528\u5c31\u662f flow . _C . leaky_relu_yzh ( ... ) signature \u7528\u4e8e\u63cf\u8ff0\u63a5\u53e3\u539f\u578b\u53ca C++ \u4ee3\u7801\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 => \u5de6\u8fb9\u7684\u4e3a\u539f\u578b\uff1b => \u53f3\u8fb9\u4e3a\u5bf9\u5e94\u7684 Functional Library \u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u91cc LeakyRelu \u548c\u524d\u9762\u5bfc\u51fa\u65f6\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u81f4\u7684\u3002 bind_python \uff0c\u8868\u793a\u8fd9\u4e2a\u63a5\u53e3\u662f\u5426\u9700\u8981\u7ed1\u5b9a Python \u63a5\u53e3 \u3002\u6bd4\u5982\u4e0b\u9762\u7684 leaky_relu_grad \uff0c\u6211\u4eec\u4e0d\u4f1a\u5728 Python \u5c42\u7528\u5230\uff08\u4f46\u4f1a\u5728 C++ \u5c42\u6c42\u5bfc\u4f7f\u7528\uff09\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a False\u3002 \u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5c\u540e\uff0c\u65b0\u589e\u7684\u7b97\u5b50\u5df2\u7ecf\u652f\u6301\u6b63\u5411\u8fd0\u7b97\uff0c\u7f16\u8bd1\u597d\u4ee3\u7801\u4fbf\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7b80\u5355\u7684\u6d4b\u8bd5\uff1a import oneflow as flow import numpy as np x_tensor = flow . Tensor ( np . random . randn ( 3 , 3 )) out = flow . _C . leaky_relu_yzh ( x_tensor , alpha = 0.2 ) \u4f46\u662f\uff0c\u8fd8\u9700\u8981\u6ce8\u518c\u53cd\u5411\uff0c\u624d\u80fd\u652f\u6301\u53cd\u5411\u4f20\u64ad\u3002\u6211\u4eec\u4e5f\u5148\u5c06\u53cd\u5411\u9700\u8981\u7684 LeakyReluGrad \u5bfc\u51fa\u4e3a functional \u63a5\u53e3\u3002 - name : \"leaky_relu_yzh_grad\" signature : \"Tensor (Tensor x, Tensor dy, Float alpha) => LeakyReluYZHGrad\" bind_python : False","title":"\u5728 functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0"},{"location":"OneFlow/forward/#_3","text":"\u53cd\u5411\u4f20\u64ad\u7684\u672c\u8d28\u5c31\u662f\u9ad8\u6570\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\uff0c\u53ea\u4e0d\u8fc7 Autodiff \u5c06\u94fe\u5f0f\u6cd5\u5219\u53d8\u5f97\u6a21\u5757\u5316\u3001\u6613\u590d\u7528\u3002 \u53ef\u4ee5\u5148\u9605\u8bfb CSC321 Lecture 10: Automatic Differentiation \u4e86\u89e3 autodiff \u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4ece\u903b\u8f91\u4e0a\u800c\u8a00\uff0c\u4e00\u4e2a\u7b97\u5b50\u5728\u53cd\u5411\u8fc7\u7a0b\u4e2d\u80fd\u591f\u6c42\u5bfc\u6570\uff0c\u4e00\u822c\u9700\u8981\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u8f93\u5165\u3001\u8f93\u51fa \u6b63\u5411\u8fc7\u7a0b\u7684 attr \u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e0a\u4e00\u5c42\uff08\u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u4e0b\u4e00\u5c42\uff09\u4f20\u9012\u8fc7\u6765\u7684\u6b63\u5411\u8f93\u51fa\u7684\u68af\u5ea6 \u672a\u6765 Graph \u6a21\u5f0f\u548c Eager \u6a21\u5f0f\u4e0b\u7684\u53cd\u5411\u903b\u8f91\u4f1a\u5408\u5e76\uff0c\u4f46\u76ee\u524d\u8fd8\u662f\u9700\u8981\u5206\u522b\u6ce8\u518c\u3002","title":"\u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91"},{"location":"OneFlow/forward/#eager","text":"\u6c42\u5bfc\u90e8\u5206\u5728 oneflow/core/autograd/gradient_funcs/activation.cpp \u5b8c\u6210 \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a LeakyReluYZHCaptureState \uff1a\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784\u4f53 \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u6784\u4f53\uff0c\u7ee7\u627f\u81ea AutoGradCaptureState \uff0c\u7528\u4e8e\u5b58\u50a8 op \u7684\u5c5e\u6027\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u6c42\u5bfc\u3002 struct LeakyReluYZHCaptureState : public AutoGradCaptureState { bool requires_grad ; // \u8f93\u5165x\u662f\u5426\u9700\u8981\u68af\u5ea6 float alpha = 0.0 ; // \u8f93\u5165\u7684\u53c2\u6570alpha }; LeakyReluYZH \u7c7b\uff1a\u7ee7\u627f\u81ea OpExprGradFunction \u7684\u7c7b\u3002\u9700\u8981\u91cd\u5199\u4e09\u4e2a\u51fd\u6570\uff1a Init \u3001 Capture \u3001 Apply \u3002 class LeakyReluYZH : public OpExprGradFunction < LeakyReluYZHCaptureState > { public : Maybe < void > Init ( const OpExpr & op ) override { //... } Maybe < void > Capture ( LeakyReluYZHCaptureState * ctx , const TensorTuple & inputs , const TensorTuple & outputs , const AttrMap & attrs ) const override { //... } Maybe < void > Apply ( const LeakyReluYZHCaptureState * ctx , const TensorTuple & out_grads , TensorTuple * in_grads ) const override { //... } }; Init\uff1a\u505a\u7684\u662f\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u53ef\u4ee5\u6839\u636e\u524d\u5411 op \u7684\u914d\u7f6e\uff0c\u6765\u521d\u59cb\u5316\u5c5e\u6027\u3002 Maybe < void > Init ( const OpExpr & op ) override { const auto * fw_op_expr = dynamic_cast < const UserOpExpr *> ( & op ); CHECK_NOTNULL_OR_RETURN ( fw_op_expr ); base_attrs_ = MakeAttrMapFromUserOpConf ( fw_op_expr -> proto ()); return Maybe < void >:: Ok (); } Capture\uff1a\u7528\u4e8e\u6355\u6349\u524d\u5411\u7684 Tensor\uff0c\u5c5e\u6027\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u6c42\u5bfc\u3002 \u4ee5 LeakyReluYZH \u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230\uff1aa) \u8f93\u5165\u7684 Tensor\uff0c\u5f53 Tensor \u6570\u503c\u5927\u4e8e 0\uff0c\u68af\u5ea6\u4e3a 1\uff0c\u5f53\u5c0f\u4e8e 0\uff0c\u68af\u5ea6\u4e3a alpha b) alpha\u7684\u6570\u503c Maybe < void > Capture ( LeakyReluYZHCaptureState * ctx , const TensorTuple & inputs , const TensorTuple & outputs , const AttrMap & attrs ) const override { CHECK_EQ_OR_RETURN ( inputs . size (), 1 ); // \u5224\u65ad\u8f93\u5165\u4e2a\u6570\u662f\u5426\u4e3a1 ctx -> requires_grad = inputs . at ( 0 ) -> requires_grad (); // \u5224\u65ad\u8f93\u5165\u662f\u5426\u9700\u8981\u68af\u5ea6 if ( ! ctx -> requires_grad ) { return Maybe < void >:: Ok (); } // \u5982\u679c\u4e0d\u9700\u8981\u68af\u5ea6\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u6c42\u5bfc\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de Maybe<void>::Ok() ComposedAttrMap composed_attrs ( attrs , base_attrs_ ); ctx -> alpha = JUST ( composed_attrs . GetAttr < float > ( \"alpha\" )); // \u83b7\u53d6 alpha\uff0c\u5e76\u5b58\u5165 ctx->alpha \u4e2d ctx -> SaveTensorForBackward ( inputs . at ( 0 )); // \u8c03\u7528 SaveTensorForBackward \u65b9\u6cd5\uff0c\u4fdd\u5b58\u8f93\u5165\u7684 Tensor return Maybe < void >:: Ok (); } Apply\uff1a\u5b9e\u9645\u8ba1\u7b97\u68af\u5ea6\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u5230\u5148\u524d\u7684 Tensor\uff0c\u5e76\u8c03\u7528 functional \u63a5\u53e3\u4e0b\u6ce8\u518c\u7684 LeakyReluGrad\uff0c\u6c42\u5f97\u68af\u5ea6\uff0c\u5e76\u8fd4\u56de Maybe < void > Apply ( const LeakyReluYZHCaptureState * ctx , const TensorTuple & out_grads , TensorTuple * in_grads ) const override { CHECK_EQ_OR_RETURN ( out_grads . size (), 1 ); // \u68c0\u67e5\u68af\u5ea6 Tensor \u4e2a\u6570\u662f\u5426\u4e3a 1 in_grads -> resize ( 1 ); // \u56e0\u4e3a\u8f93\u5165\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec resize(1) if ( ctx -> requires_grad ) { const auto & x = ctx -> SavedTensors (). at ( 0 ); // \u8c03\u7528 SavedTensors \u63a5\u53e3\uff0c\u62ff\u5230\u5148\u524d\u901a\u8fc7 SaveTensorForBackward \u63a5\u53e3\u4fdd\u5b58\u7684 Tensor in_grads -> at ( 0 ) = JUST ( functional :: LeakyReluYZHGrad ( x , out_grads . at ( 0 ), ctx -> alpha )); // \u62ff\u5230 x\uff0cdy\uff0calpha\uff0c\u4f20\u5165\u7ed9 LeakyReluYZHGrad \u8ba1\u7b97\uff0c\u5e76\u5c06\u68af\u5ea6\u8fd4\u56de\u7ed9 in_grads->at(0) } return Maybe < void >:: Ok (); } \u6700\u540e\u4e00\u6b65\u662f\u6ce8\u518c\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f op type name\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7ee7\u627f\u81ea OpExprGradFunction \u7684\u7c7b\u3002 REGISTER_OP_EXPR_GRAD_FUNCTION ( \"leaky_relu_yzh\" , LeakyReluYZH ); // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u4e8e\u6c42\u5bfc\u7684\u7c7b\u540d","title":"\u4e3a Eager \u6a21\u5f0f\u6ce8\u518c\u53cd\u5411"},{"location":"OneFlow/test/","text":"how_to_test_user_op","title":"Test"},{"location":"OneFlow/utils/","text":"\u5f15\u8a00 \u5de5\u5177\u7bc7 \u5f00\u53d1\u5de5\u5177 \u7b80\u4ecb Visual Studio Code Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002 VS Code \u63d2\u4ef6::clangd \u5206\u6790 C++ \u6587\u4ef6\uff0c\u5b9e\u73b0 C++\u4ee3\u7801\u8df3\u8f6c VS Code \u63d2\u4ef6::Python VS Code \u63d2\u4ef6 \u7528\u4e8e\u5206\u6790 Python \u6587\u4ef6\uff0c\u4e3b\u8981\u6709 \u4ee3\u7801\u8df3\u8f6c\uff0c\u53d8\u91cf\u7c7b\u578b\u5206\u6790\u7b49\u3002 VS Code \u63d2\u4ef6::Live Server \u542f\u52a8\u5e26\u6709\u5b9e\u65f6\u91cd\u8f7d\u529f\u80fd\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\uff0c\u7528\u4e8e\u9759\u6001\u548c\u52a8\u6001\u9875\u9762\u3002\u5b9e\u73b0 \u5728\u7ebf\u9884\u89c8 oneflow\u5f00\u53d1\u8fc7\u7a0b\u4e2d html \u6587\u6863\u3002 Debug\u5de5\u5177::pdb pdb \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6e90\u4ee3\u7801\u8c03\u8bd5\u5668\uff0c\u7528\u4e8ePython \u7a0b\u5e8f Debug\u5de5\u5177::GDB GDB : \u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002 Visual Studio Code \u5b98\u65b9\u94fe\u63a5 : https://code.visualstudio.com/ \u4f7f\u7528\u4ecb\u7ecd : Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c~ \u6ce8\u610f\u4e8b\u9879 : ~ clangd \u5b98\u65b9\u94fe\u63a5 : https://github.com/clangd/clangd \u4f7f\u7528\u4ecb\u7ecd : \u914d\u7f6e clangd \u6559\u7a0b \u6ce8\u610f\u4e8b\u9879 : ~ Python vscode \u63d2\u4ef6 \u5b98\u65b9\u94fe\u63a5 : https://www.python.org/ \u4f7f\u7528\u4ecb\u7ecd : \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22 Python \u8fdb\u884c\u5b89\u88c5\u3002 \u5b89\u88c5\u4e4b\u540e\uff0c\u6253\u5f00\u4e00\u4e2a\u65b0\u7684.py\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002 \u6ce8\u610f\u4e8b\u9879 : \u5207\u6362 Python \u89e3\u91ca\u5668\uff1a Crtl+Shift + P \u641c\u7d22 Python:select Interpreter \u914d\u7f6e\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002 \u4ee5\u540e\u6bcf\u6b21\u6253\u5f00VsCode\uff0c\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002good\uff01 VScode\u5e95\u90e8\u72b6\u6001\u680f\u4e0d\u89c1\uff0c \u8bf7\u5982\u4e0b\u56fe\u52fe\u9009 Status Bar Live Server \u5b98\u65b9\u94fe\u63a5 \uff1ahttps://github.com/ritwickdey/vscode-live-server-plus-plus \u4f7f\u7528\u4ecb\u7ecd : \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22 Live Server \u8fdb\u884c\u5b89\u88c5\u3002 \u6ce8\u610f\u4e8b\u9879 \uff1a \u6253\u5f00\u4e00\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u5355\u51fb\u72b6\u6001\u680f\u4e2d\u7684 GO Live \u4ee5\u6253\u5f00/\u5173\u95ed\u670d\u52a1\u3002 pdb pdb --- Python \u7684\u8c03\u8bd5\u5668\u00b6 \u5b98\u65b9\u94fe\u63a5 \uff1ahttps://docs.python.org/zh-cn/3/library/pdb.html \u4f7f\u7528\u4ecb\u7ecd : https://docs.python.org/zh-cn/3/library/pdb.html \u6ce8\u610f\u4e8b\u9879 : ~ GDB \u8fd9\u91cc\u4ecb\u7ecd OneFlow \u4e2d\u4f7f\u7528 gdb debug Cmake \u65f6\u5019\u4f7f\u7528 -DCMAKE_BUILD_TYPE=Debug oneflow Debug \u65b9\u5f0f\u7f16\u8bd1\u793a\u4f8b git clone git@github.com:Oneflow-Inc/oneflow.git && cd oneflow mkdir -p build && cd build cmake .. -C ../cmake/caches/cn/cuda.cmake -DCUDA_TOOLKIT_ROOT_DIR = /usr/local/cuda \\ -DCUDNN_ROOT_DIR = /usr/local/cudnn -DCMAKE_GENERATOR = Ninja -DCMAKE_BUILD_TYPE = Debug \\ -DCMAKE_EXPORT_COMPILE_COMMANDS = 1 ninja -j32 \u6211\u662f\u9ed1\u4f53\u5b57 \u6211\u662f\u5fae\u8f6f\u96c5\u9ed1 \u6211\u662f\u534e\u6587\u5f69\u4e91 \u6211\u662f\u7ea2\u8272 \u6211\u662f\u7eff\u8272 \u6211\u662f\u84dd\u8272 \u6211\u662f\u5c3a\u5bf8 \u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5 \u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5","title":"utils"},{"location":"OneFlow/utils/#_1","text":"","title":"\u5f15\u8a00"},{"location":"OneFlow/utils/#_2","text":"\u5f00\u53d1\u5de5\u5177 \u7b80\u4ecb Visual Studio Code Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002 VS Code \u63d2\u4ef6::clangd \u5206\u6790 C++ \u6587\u4ef6\uff0c\u5b9e\u73b0 C++\u4ee3\u7801\u8df3\u8f6c VS Code \u63d2\u4ef6::Python VS Code \u63d2\u4ef6 \u7528\u4e8e\u5206\u6790 Python \u6587\u4ef6\uff0c\u4e3b\u8981\u6709 \u4ee3\u7801\u8df3\u8f6c\uff0c\u53d8\u91cf\u7c7b\u578b\u5206\u6790\u7b49\u3002 VS Code \u63d2\u4ef6::Live Server \u542f\u52a8\u5e26\u6709\u5b9e\u65f6\u91cd\u8f7d\u529f\u80fd\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\uff0c\u7528\u4e8e\u9759\u6001\u548c\u52a8\u6001\u9875\u9762\u3002\u5b9e\u73b0 \u5728\u7ebf\u9884\u89c8 oneflow\u5f00\u53d1\u8fc7\u7a0b\u4e2d html \u6587\u6863\u3002 Debug\u5de5\u5177::pdb pdb \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6e90\u4ee3\u7801\u8c03\u8bd5\u5668\uff0c\u7528\u4e8ePython \u7a0b\u5e8f Debug\u5de5\u5177::GDB GDB : \u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002","title":"\u5de5\u5177\u7bc7"},{"location":"OneFlow/utils/#visual-studio-code","text":"\u5b98\u65b9\u94fe\u63a5 : https://code.visualstudio.com/ \u4f7f\u7528\u4ecb\u7ecd : Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c~ \u6ce8\u610f\u4e8b\u9879 : ~","title":" Visual Studio Code "},{"location":"OneFlow/utils/#clangd","text":"\u5b98\u65b9\u94fe\u63a5 : https://github.com/clangd/clangd \u4f7f\u7528\u4ecb\u7ecd : \u914d\u7f6e clangd \u6559\u7a0b \u6ce8\u610f\u4e8b\u9879 : ~","title":"clangd"},{"location":"OneFlow/utils/#python","text":"vscode \u63d2\u4ef6 \u5b98\u65b9\u94fe\u63a5 : https://www.python.org/ \u4f7f\u7528\u4ecb\u7ecd : \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22 Python \u8fdb\u884c\u5b89\u88c5\u3002 \u5b89\u88c5\u4e4b\u540e\uff0c\u6253\u5f00\u4e00\u4e2a\u65b0\u7684.py\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002 \u6ce8\u610f\u4e8b\u9879 : \u5207\u6362 Python \u89e3\u91ca\u5668\uff1a Crtl+Shift + P \u641c\u7d22 Python:select Interpreter \u914d\u7f6e\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002 \u4ee5\u540e\u6bcf\u6b21\u6253\u5f00VsCode\uff0c\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002good\uff01 VScode\u5e95\u90e8\u72b6\u6001\u680f\u4e0d\u89c1\uff0c \u8bf7\u5982\u4e0b\u56fe\u52fe\u9009 Status Bar","title":"Python"},{"location":"OneFlow/utils/#live-server","text":"\u5b98\u65b9\u94fe\u63a5 \uff1ahttps://github.com/ritwickdey/vscode-live-server-plus-plus \u4f7f\u7528\u4ecb\u7ecd : \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22 Live Server \u8fdb\u884c\u5b89\u88c5\u3002 \u6ce8\u610f\u4e8b\u9879 \uff1a \u6253\u5f00\u4e00\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u5355\u51fb\u72b6\u6001\u680f\u4e2d\u7684 GO Live \u4ee5\u6253\u5f00/\u5173\u95ed\u670d\u52a1\u3002","title":"Live Server"},{"location":"OneFlow/utils/#pdb","text":"pdb --- Python \u7684\u8c03\u8bd5\u5668\u00b6 \u5b98\u65b9\u94fe\u63a5 \uff1ahttps://docs.python.org/zh-cn/3/library/pdb.html \u4f7f\u7528\u4ecb\u7ecd : https://docs.python.org/zh-cn/3/library/pdb.html \u6ce8\u610f\u4e8b\u9879 : ~","title":"pdb"},{"location":"OneFlow/utils/#gdb","text":"\u8fd9\u91cc\u4ecb\u7ecd OneFlow \u4e2d\u4f7f\u7528 gdb debug Cmake \u65f6\u5019\u4f7f\u7528 -DCMAKE_BUILD_TYPE=Debug oneflow Debug \u65b9\u5f0f\u7f16\u8bd1\u793a\u4f8b git clone git@github.com:Oneflow-Inc/oneflow.git && cd oneflow mkdir -p build && cd build cmake .. -C ../cmake/caches/cn/cuda.cmake -DCUDA_TOOLKIT_ROOT_DIR = /usr/local/cuda \\ -DCUDNN_ROOT_DIR = /usr/local/cudnn -DCMAKE_GENERATOR = Ninja -DCMAKE_BUILD_TYPE = Debug \\ -DCMAKE_EXPORT_COMPILE_COMMANDS = 1 ninja -j32 \u6211\u662f\u9ed1\u4f53\u5b57 \u6211\u662f\u5fae\u8f6f\u96c5\u9ed1 \u6211\u662f\u534e\u6587\u5f69\u4e91 \u6211\u662f\u7ea2\u8272 \u6211\u662f\u7eff\u8272 \u6211\u662f\u84dd\u8272 \u6211\u662f\u5c3a\u5bf8 \u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5 \u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5","title":"GDB"},{"location":"PyTorch/Ox01/","text":"gdb\u5bf9pytorch\u8fdb\u884cc++\u8bed\u8a00\u7ea7\u8c03\u8bd5\u7684\u8fc7\u7a0b \u7f16\u8bd1\u5b89\u88c5PyTorch\u8f6f\u4ef6\u5305 git clone https://github.com/pytorch/pytorch.git cd pytorch DEBUG = 1 python setup.py develop \u68c0\u6d4b\u662f\u5426\u5b89\u88c5\u6210\u529f ( pytorch_learn ) fengwen@oneflow:/data/dataset/fengwen/pytorch/.fengwen$ python Python 3 .8.16 ( default, Mar 2 2023 , 03 :21:46 ) [ GCC 11 .2.0 ] :: Anaconda, Inc. on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import torch >>> torch.cuda.is_available () True \u5378\u8f7d PyTorch \u8f6f\u4ef6\u5305 pip uninstall torch && python setup.py clean Developing PyTorch \u8be6\u7ec6\u4ecb\u7ecd > \u622a\u53d6\u81eapytorch\u5f00\u53d1\u6307\u5bfc > \u539f\u6587\u94fe\u63a5\u5730\u5740\uff1a https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#developing-pytorch ## Developing PyTorch Follow the instructions for [installing PyTorch from source](https://github.com/pytorch/pytorch#from-source). If you get stuck when developing PyTorch on your machine, check out the [tips and debugging](#tips-and-debugging) section below for common solutions. ### Tips and Debugging * If you want to have no-op incremental rebuilds (which are fast), see [Make no-op build fast](#make-no-op-build-fast) below. * When installing with `python setup.py develop` (in contrast to `python setup.py install`) you will symlink the Python files from the current local source-tree into the Python install. This way you do not need to repeatedly install after modifying Python files (`.py`). However, you would need to reinstall if you modify Python interface (`.pyi`, `.pyi.in`) or non-Python files (`.cpp`, `.cc`, `.cu`, `.h`, ...). To reinstall, first uninstall all existing PyTorch installs. You may need to run `pip uninstall torch` multiple times. You'll know `torch` is fully uninstalled when you see `WARNING: Skipping torch as it is not installed`. (You should only have to `pip uninstall` a few times, but you can always `uninstall` with `timeout` or in a loop if you're feeling lazy.) conda uninstall pytorch -y yes | pip uninstall torch Next run `python setup.py clean`. After that, you can install in `develop` mode again. * If a commit is simple and doesn't affect any code (keep in mind that some docstrings contain code that is used in tests), you can add `[skip ci]` (case sensitive) somewhere in your commit message to [skip all build / test steps](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/). Note that changing the pull request body or title on GitHub itself has no effect. * If you run into errors when running `python setup.py develop`, here are some debugging steps: 1. Run `printf '#include \\nint main() { printf(\"Hello World\");}'|clang -x c -; ./a.out` to make sure your CMake works and can compile this simple Hello World program without errors. 2. Nuke your `build` directory. The `setup.py` script compiles binaries into the `build` folder and caches many details along the way, which saves time the next time you build. If you're running into issues, you can always `rm -rf build` from the toplevel `pytorch` directory and start over. 3. If you have made edits to the PyTorch repo, commit any change you'd like to keep and clean the repo with the following commands (note that clean _really_ removes all untracked files and changes.): git submodule deinit -f . git clean -xdf python setup.py clean git submodule update --init --recursive # very important to sync the submodules python setup.py develop # then try running the command again 4. The main step within `python setup.py develop` is running `make` from the `build` directory. If you want to experiment with some environment variables, you can pass them into the command: ENV_KEY1 = ENV_VAL1 [ , ENV_KEY2 = ENV_VAL2 ] * python setup.py develop * If you run into issue running `git submodule update --init --recursive`. Please try the following: - If you encounter an error such as error: Submodule 'third_party/pybind11' could not be updated check whether your Git local or global config file contains any `submodule.*` settings. If yes, remove them and try again. (please reference [this doc](https://git-scm.com/docs/git-config#Documentation/git-config.txt-submoduleltnamegturl) for more info). - If you encounter an error such as fatal: unable to access 'https://github.com/pybind11/pybind11.git': could not load PEM client certificate ... this is likely that you are using HTTP proxying and the certificate expired. To check if the certificate is valid, run `git config --global --list` and search for config like `http.proxysslcert= `. Then check certificate valid date by running openssl x509 -noout -in <cert_file> -dates - If you encounter an error that some third_party modules are not checked out correctly, such as Could not find .../pytorch/third_party/pybind11/CMakeLists.txt remove any `submodule.*` settings in your local git config (`.git/config` of your pytorch repo) and try again. * If you're a Windows contributor, please check out [Best Practices](https://github.com/pytorch/pytorch/wiki/Best-Practices-to-Edit-and-Compile-Pytorch-Source-Code-On-Windows). * For help with any part of the contributing process, please don\u2019t hesitate to utilize our Zoom office hours! See details [here](https://github.com/pytorch/pytorch/wiki/Dev-Infra-Office-Hours) gdb demo test.py # aten/src/ATen/native/Scalar.cpp import torch x = torch.tensor ([ 1 ]) .cuda () y = x.item () demo ( pytorch_learn ) fengwen@oneflow-25:/data/dataset/fengwen/pytorch/.fengwen$ gdb --args python test.py GNU gdb ( Ubuntu 9 .2-0ubuntu1~20.04.1 ) 9 .2 Copyright ( C ) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\" . Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\" . Type \"apropos word\" to search for commands related to \"word\" ... Reading symbols from python... ( gdb ) b aten/src/ATen/native/Scalar.cpp:19 No source file named aten/src/ATen/native/Scalar.cpp. Make breakpoint pending on future shared library load? ( y or [ n ]) y Breakpoint 1 ( aten/src/ATen/native/Scalar.cpp:19 ) pending. ( gdb ) r Starting program: /data/home/fengwen/miniconda3/envs/pytorch_learn/bin/python test.py [ Thread debugging using libthread_db enabled ] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\" . [ Detaching after fork from child process 468387 ] .... Thread 1 \"python\" hit Breakpoint 1 , at::native::item ( self = ... ) at /data/dataset/fengwen/pytorch/aten/src/ATen/native/Scalar.cpp:19 warning: Source file is more recent than executable. 19 auto numel = self.sym_numel () ; ( gdb ) l 14 namespace at { 15 namespace native { 16 17 18 Scalar item ( const Tensor & self ) { 19 auto numel = self.sym_numel () ; 20 TORCH_CHECK ( numel == 1 , \"a Tensor with \" , numel, \" elements cannot be converted to Scalar\" ) ; 21 if ( self.is_sparse ()) { 22 if ( self._nnz () == 0 ) return Scalar ( 0 ) ; 23 if ( self.is_coalesced ()) return at::_local_scalar_dense ( self._values ()) ;","title":"Ox01 gdb\u5bf9pytorch\u8fdb\u884cc++\u8bed\u8a00\u7ea7\u8c03\u8bd5\u7684\u8fc7\u7a0b"},{"location":"PyTorch/Ox01/#gdbpytorchc","text":"\u7f16\u8bd1\u5b89\u88c5PyTorch\u8f6f\u4ef6\u5305 git clone https://github.com/pytorch/pytorch.git cd pytorch DEBUG = 1 python setup.py develop \u68c0\u6d4b\u662f\u5426\u5b89\u88c5\u6210\u529f ( pytorch_learn ) fengwen@oneflow:/data/dataset/fengwen/pytorch/.fengwen$ python Python 3 .8.16 ( default, Mar 2 2023 , 03 :21:46 ) [ GCC 11 .2.0 ] :: Anaconda, Inc. on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import torch >>> torch.cuda.is_available () True \u5378\u8f7d PyTorch \u8f6f\u4ef6\u5305 pip uninstall torch && python setup.py clean Developing PyTorch \u8be6\u7ec6\u4ecb\u7ecd > \u622a\u53d6\u81eapytorch\u5f00\u53d1\u6307\u5bfc > \u539f\u6587\u94fe\u63a5\u5730\u5740\uff1a https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#developing-pytorch ## Developing PyTorch Follow the instructions for [installing PyTorch from source](https://github.com/pytorch/pytorch#from-source). If you get stuck when developing PyTorch on your machine, check out the [tips and debugging](#tips-and-debugging) section below for common solutions. ### Tips and Debugging * If you want to have no-op incremental rebuilds (which are fast), see [Make no-op build fast](#make-no-op-build-fast) below. * When installing with `python setup.py develop` (in contrast to `python setup.py install`) you will symlink the Python files from the current local source-tree into the Python install. This way you do not need to repeatedly install after modifying Python files (`.py`). However, you would need to reinstall if you modify Python interface (`.pyi`, `.pyi.in`) or non-Python files (`.cpp`, `.cc`, `.cu`, `.h`, ...). To reinstall, first uninstall all existing PyTorch installs. You may need to run `pip uninstall torch` multiple times. You'll know `torch` is fully uninstalled when you see `WARNING: Skipping torch as it is not installed`. (You should only have to `pip uninstall` a few times, but you can always `uninstall` with `timeout` or in a loop if you're feeling lazy.) conda uninstall pytorch -y yes | pip uninstall torch Next run `python setup.py clean`. After that, you can install in `develop` mode again. * If a commit is simple and doesn't affect any code (keep in mind that some docstrings contain code that is used in tests), you can add `[skip ci]` (case sensitive) somewhere in your commit message to [skip all build / test steps](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/). Note that changing the pull request body or title on GitHub itself has no effect. * If you run into errors when running `python setup.py develop`, here are some debugging steps: 1. Run `printf '#include \\nint main() { printf(\"Hello World\");}'|clang -x c -; ./a.out` to make sure your CMake works and can compile this simple Hello World program without errors. 2. Nuke your `build` directory. The `setup.py` script compiles binaries into the `build` folder and caches many details along the way, which saves time the next time you build. If you're running into issues, you can always `rm -rf build` from the toplevel `pytorch` directory and start over. 3. If you have made edits to the PyTorch repo, commit any change you'd like to keep and clean the repo with the following commands (note that clean _really_ removes all untracked files and changes.): git submodule deinit -f . git clean -xdf python setup.py clean git submodule update --init --recursive # very important to sync the submodules python setup.py develop # then try running the command again 4. The main step within `python setup.py develop` is running `make` from the `build` directory. If you want to experiment with some environment variables, you can pass them into the command: ENV_KEY1 = ENV_VAL1 [ , ENV_KEY2 = ENV_VAL2 ] * python setup.py develop * If you run into issue running `git submodule update --init --recursive`. Please try the following: - If you encounter an error such as error: Submodule 'third_party/pybind11' could not be updated check whether your Git local or global config file contains any `submodule.*` settings. If yes, remove them and try again. (please reference [this doc](https://git-scm.com/docs/git-config#Documentation/git-config.txt-submoduleltnamegturl) for more info). - If you encounter an error such as fatal: unable to access 'https://github.com/pybind11/pybind11.git': could not load PEM client certificate ... this is likely that you are using HTTP proxying and the certificate expired. To check if the certificate is valid, run `git config --global --list` and search for config like `http.proxysslcert= `. Then check certificate valid date by running openssl x509 -noout -in <cert_file> -dates - If you encounter an error that some third_party modules are not checked out correctly, such as Could not find .../pytorch/third_party/pybind11/CMakeLists.txt remove any `submodule.*` settings in your local git config (`.git/config` of your pytorch repo) and try again. * If you're a Windows contributor, please check out [Best Practices](https://github.com/pytorch/pytorch/wiki/Best-Practices-to-Edit-and-Compile-Pytorch-Source-Code-On-Windows). * For help with any part of the contributing process, please don\u2019t hesitate to utilize our Zoom office hours! See details [here](https://github.com/pytorch/pytorch/wiki/Dev-Infra-Office-Hours)","title":"gdb\u5bf9pytorch\u8fdb\u884cc++\u8bed\u8a00\u7ea7\u8c03\u8bd5\u7684\u8fc7\u7a0b"},{"location":"PyTorch/Ox01/#gdb-demo","text":"test.py # aten/src/ATen/native/Scalar.cpp import torch x = torch.tensor ([ 1 ]) .cuda () y = x.item () demo ( pytorch_learn ) fengwen@oneflow-25:/data/dataset/fengwen/pytorch/.fengwen$ gdb --args python test.py GNU gdb ( Ubuntu 9 .2-0ubuntu1~20.04.1 ) 9 .2 Copyright ( C ) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\" . Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\" . Type \"apropos word\" to search for commands related to \"word\" ... Reading symbols from python... ( gdb ) b aten/src/ATen/native/Scalar.cpp:19 No source file named aten/src/ATen/native/Scalar.cpp. Make breakpoint pending on future shared library load? ( y or [ n ]) y Breakpoint 1 ( aten/src/ATen/native/Scalar.cpp:19 ) pending. ( gdb ) r Starting program: /data/home/fengwen/miniconda3/envs/pytorch_learn/bin/python test.py [ Thread debugging using libthread_db enabled ] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\" . [ Detaching after fork from child process 468387 ] .... Thread 1 \"python\" hit Breakpoint 1 , at::native::item ( self = ... ) at /data/dataset/fengwen/pytorch/aten/src/ATen/native/Scalar.cpp:19 warning: Source file is more recent than executable. 19 auto numel = self.sym_numel () ; ( gdb ) l 14 namespace at { 15 namespace native { 16 17 18 Scalar item ( const Tensor & self ) { 19 auto numel = self.sym_numel () ; 20 TORCH_CHECK ( numel == 1 , \"a Tensor with \" , numel, \" elements cannot be converted to Scalar\" ) ; 21 if ( self.is_sparse ()) { 22 if ( self._nnz () == 0 ) return Scalar ( 0 ) ; 23 if ( self.is_coalesced ()) return at::_local_scalar_dense ( self._values ()) ;","title":"gdb demo"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/","text":"Miniconda\u7684\u4ecb\u7ecd\u548c\u57fa\u672c\u4f7f\u7528 conda\uff1a\u662f\u4e00\u79cd\u901a\u7528\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u65e8\u5728\u6784\u5efa\u548c\u7ba1\u7406\u4efb\u4f55\u8bed\u8a00\u548c\u4efb\u4f55\u7c7b\u578b\u7684\u8f6f\u4ef6\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5305\u7ba1\u7406\u4e0epip\u7684\u4f7f\u7528\u7c7b\u4f3c\uff0c\u73af\u5883\u7ba1\u7406\u5219\u5141\u8bb8\u7528\u6237\u65b9\u4fbf\u5730\u5b89\u88c5\u4e0d\u540c\u7248\u672c\u7684python\u5e76\u53ef\u4ee5\u5feb\u901f\u5207\u6362\u3002 \u8fdb\u5165\u7f51\u5740 Miniconda \u5b89\u88c5/\u5378\u8f7d Conda \u7136\u540e\u4fdd\u5b58\u66f4\u6539\uff0c\u8fd0\u884c source ~/.bashrc \u67e5\u770bconda\u7248\u672c conda -V \u865a\u62df\u73af\u5883 - \u67e5\u770b\u865a\u62df\u73af\u5883 conda info -- envs / e - \u521b\u5efa\u865a\u62df\u73af\u5883 conda create - n name python = 3.6 - \u6fc0\u6d3bPy2\u865a\u62df\u73af\u5883 conda activate py2 - \u9000\u51fa conda deactivate - conda env export > environment . yml \uff1a \u5bfc\u51fa\u73af\u5883\u914d\u7f6e - conda env create - f environment . yml \uff1a \u521b\u5efa\u4e00\u6837\u7684\u73af\u5883 - conda remove - n env_name -- all \uff1a \u5220\u9664\u865a\u62df\u73af\u5883 - \u67e5\u770b\u6240\u6709\u865a\u62df\u73af\u5883 conda env list - \u6307\u5b9a\u865a\u62df\u73af\u5883 \uff0c \u67e5\u770b\u5df2\u5b89\u88c5\u7684\u5305 conda list - n envname \u5305\u7ba1\u7406 conda\u548cpip\u533a\u522b conda\u4f5c\u4e3a\u5305\u7ba1\u7406\u5de5\u5177\u548cpip\u7c7b\u4f3c\uff0c\u4f46\u662f\u8fd8\u6709\u533a\u522b\uff1a - \u67d0\u4e9b\u5305\u4e0d\u80fd\u901a\u8fc7conda\u5b89\u88c5\uff0c\u53ea\u80fd\u901a\u8fc7pip\u5b89\u88c5 - anaconda python conda\u90fd\u88abconda\u89c6\u4e3apackage,\u548c\u666e\u901a\u5b89\u88c5\u5305\u7ba1\u7406\u65b9\u5f0f\u76f8\u540c \u5e38\u7528\u547d\u4ee4 - \u67e5\u770b\u5f53\u524d\u6fc0\u6d3b\u73af\u5883\u4e2d\u7684\u5df2\u5b89\u88c5\u5305 \uff0c \u5982\u679c\u5e0c\u671b\u67e5\u8be2\u6307\u5b9a\u73af\u5883\u4e2d\u5df2\u5b89\u88c5\u5305 \uff0c \u5219\u5728command\u547d\u4ee4\u540e\u52a0\u4e0a - n \u73af\u5883\u540d \uff0c \u5176\u4ed6\u547d\u4ee4\u7c7b\u4f3c conda list - \u67e5\u627epackage\u4fe1\u606f conda search numpy - \u67e5\u770b\u67d0\u5b89\u88c5\u5305\u662f\u5426\u5df2\u5b89\u88c5 conda list | grep \u5305\u540d \uff08 \u652f\u6301\u6b63\u5219 \uff09 - \u6307\u5b9a\u73af\u5883 \uff0c \u5b89\u88c5 / \u66f4\u65b0 / \u5220\u9664\u6307\u5b9a\u7684\u5305 conda install / update / remove - n envname package == 1.0.0 - \u6e05\u7406 \uff08 conda\u7626\u8eab \uff09 \uff08 1 \uff09 \u901a\u8fc7conda clean - p\u6765\u5220\u9664\u4e00\u4e9b\u6ca1\u7528\u7684\u5305 \uff0c \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u68c0\u67e5\u54ea\u4e9b\u5305\u6ca1\u6709\u5728\u5305\u7f13\u5b58\u4e2d\u88ab\u786c\u4f9d\u8d56\u5230\u5176\u4ed6\u5730\u65b9 \uff0c \u5e76\u5220\u9664\u5b83\u4eec \u3002 \uff08 2 \uff09 \u901a\u8fc7conda clean - t\u53ef\u4ee5\u5c06\u5220\u9664conda\u4fdd\u5b58\u4e0b\u6765\u7684tar\u5305 \u3002 conda clean - p // \u5220\u9664\u6ca1\u6709\u7528\u7684\u5305 conda clean - t // \u5220\u9664tar\u5305 conda clean - y -- all // \u5220\u9664\u6240\u6709\u7684\u5b89\u88c5\u5305\u53cacache - \u590d\u5236 / \u91cd\u547d\u540d / \u5220\u9664env\u73af\u5883 conda\u662f\u6ca1\u6709\u91cd\u547d\u540d\u73af\u5883\u7684\u529f\u80fd\u7684 , \u8981\u5b9e\u73b0\u8fd9\u4e2a\u57fa\u672c\u9700\u6c42 , \u53ea\u80fd\u901a\u8fc7\u611a\u8822\u7684\u514b\u9686 - \u5220\u9664\u7684\u8fc7\u7a0b \u3002 \u5207\u8bb0\u4e0d\u8981\u76f4\u63a5mv\u79fb\u52a8\u73af\u5883\u7684\u6587\u4ef6\u5939\u6765\u91cd\u547d\u540d , \u4f1a\u5bfc\u81f4\u4e00\u7cfb\u5217\u65e0\u6cd5\u60f3\u8c61\u7684\u9519\u8bef\u7684\u53d1\u751f ! - \u514b\u9686oldname\u73af\u5883\u4e3anewname\u73af\u5883 conda create -- name newname -- clone oldname - \u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda remove -- name oldname -- all \u5b89\u88c5Miniconda\u540e vscode \u627e\u4e0d\u5230\u5305 \u786e\u5b9avscode\u6709\u5b89\u88c5python\u62d3\u5c55 \u6253\u5f00\u8bbe\u7f6e \u5728\u641c\u7d22\u6846\u8f93\u5165\"python.analysis.extraPaths\" \u901a\u8fc7 python3 -m site \u67e5\u770b\u5305 \u6dfb\u52a0\u5230\u914d\u7f6e \u521b\u5efa\u73af\u5883\u5931\u8d25 \u5927\u6982\u7387\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0, \u6dfb\u52a0\u955c\u50cf\u6e90\u5c31\u597d\u4e86\u3002 # \u6e05\u534e\u955c\u50cf conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes","title":"Python\u5305\u7ba1\u7406\u5de5\u5177Conda"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#miniconda","text":"conda\uff1a\u662f\u4e00\u79cd\u901a\u7528\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u65e8\u5728\u6784\u5efa\u548c\u7ba1\u7406\u4efb\u4f55\u8bed\u8a00\u548c\u4efb\u4f55\u7c7b\u578b\u7684\u8f6f\u4ef6\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5305\u7ba1\u7406\u4e0epip\u7684\u4f7f\u7528\u7c7b\u4f3c\uff0c\u73af\u5883\u7ba1\u7406\u5219\u5141\u8bb8\u7528\u6237\u65b9\u4fbf\u5730\u5b89\u88c5\u4e0d\u540c\u7248\u672c\u7684python\u5e76\u53ef\u4ee5\u5feb\u901f\u5207\u6362\u3002 \u8fdb\u5165\u7f51\u5740 Miniconda \u5b89\u88c5/\u5378\u8f7d Conda \u7136\u540e\u4fdd\u5b58\u66f4\u6539\uff0c\u8fd0\u884c source ~/.bashrc \u67e5\u770bconda\u7248\u672c conda -V","title":"Miniconda\u7684\u4ecb\u7ecd\u548c\u57fa\u672c\u4f7f\u7528"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#_1","text":"- \u67e5\u770b\u865a\u62df\u73af\u5883 conda info -- envs / e - \u521b\u5efa\u865a\u62df\u73af\u5883 conda create - n name python = 3.6 - \u6fc0\u6d3bPy2\u865a\u62df\u73af\u5883 conda activate py2 - \u9000\u51fa conda deactivate - conda env export > environment . yml \uff1a \u5bfc\u51fa\u73af\u5883\u914d\u7f6e - conda env create - f environment . yml \uff1a \u521b\u5efa\u4e00\u6837\u7684\u73af\u5883 - conda remove - n env_name -- all \uff1a \u5220\u9664\u865a\u62df\u73af\u5883 - \u67e5\u770b\u6240\u6709\u865a\u62df\u73af\u5883 conda env list - \u6307\u5b9a\u865a\u62df\u73af\u5883 \uff0c \u67e5\u770b\u5df2\u5b89\u88c5\u7684\u5305 conda list - n envname","title":"\u865a\u62df\u73af\u5883"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#_2","text":"","title":"\u5305\u7ba1\u7406"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#condapip","text":"conda\u4f5c\u4e3a\u5305\u7ba1\u7406\u5de5\u5177\u548cpip\u7c7b\u4f3c\uff0c\u4f46\u662f\u8fd8\u6709\u533a\u522b\uff1a - \u67d0\u4e9b\u5305\u4e0d\u80fd\u901a\u8fc7conda\u5b89\u88c5\uff0c\u53ea\u80fd\u901a\u8fc7pip\u5b89\u88c5 - anaconda python conda\u90fd\u88abconda\u89c6\u4e3apackage,\u548c\u666e\u901a\u5b89\u88c5\u5305\u7ba1\u7406\u65b9\u5f0f\u76f8\u540c","title":"conda\u548cpip\u533a\u522b"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#_3","text":"- \u67e5\u770b\u5f53\u524d\u6fc0\u6d3b\u73af\u5883\u4e2d\u7684\u5df2\u5b89\u88c5\u5305 \uff0c \u5982\u679c\u5e0c\u671b\u67e5\u8be2\u6307\u5b9a\u73af\u5883\u4e2d\u5df2\u5b89\u88c5\u5305 \uff0c \u5219\u5728command\u547d\u4ee4\u540e\u52a0\u4e0a - n \u73af\u5883\u540d \uff0c \u5176\u4ed6\u547d\u4ee4\u7c7b\u4f3c conda list - \u67e5\u627epackage\u4fe1\u606f conda search numpy - \u67e5\u770b\u67d0\u5b89\u88c5\u5305\u662f\u5426\u5df2\u5b89\u88c5 conda list | grep \u5305\u540d \uff08 \u652f\u6301\u6b63\u5219 \uff09 - \u6307\u5b9a\u73af\u5883 \uff0c \u5b89\u88c5 / \u66f4\u65b0 / \u5220\u9664\u6307\u5b9a\u7684\u5305 conda install / update / remove - n envname package == 1.0.0 - \u6e05\u7406 \uff08 conda\u7626\u8eab \uff09 \uff08 1 \uff09 \u901a\u8fc7conda clean - p\u6765\u5220\u9664\u4e00\u4e9b\u6ca1\u7528\u7684\u5305 \uff0c \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u68c0\u67e5\u54ea\u4e9b\u5305\u6ca1\u6709\u5728\u5305\u7f13\u5b58\u4e2d\u88ab\u786c\u4f9d\u8d56\u5230\u5176\u4ed6\u5730\u65b9 \uff0c \u5e76\u5220\u9664\u5b83\u4eec \u3002 \uff08 2 \uff09 \u901a\u8fc7conda clean - t\u53ef\u4ee5\u5c06\u5220\u9664conda\u4fdd\u5b58\u4e0b\u6765\u7684tar\u5305 \u3002 conda clean - p // \u5220\u9664\u6ca1\u6709\u7528\u7684\u5305 conda clean - t // \u5220\u9664tar\u5305 conda clean - y -- all // \u5220\u9664\u6240\u6709\u7684\u5b89\u88c5\u5305\u53cacache - \u590d\u5236 / \u91cd\u547d\u540d / \u5220\u9664env\u73af\u5883 conda\u662f\u6ca1\u6709\u91cd\u547d\u540d\u73af\u5883\u7684\u529f\u80fd\u7684 , \u8981\u5b9e\u73b0\u8fd9\u4e2a\u57fa\u672c\u9700\u6c42 , \u53ea\u80fd\u901a\u8fc7\u611a\u8822\u7684\u514b\u9686 - \u5220\u9664\u7684\u8fc7\u7a0b \u3002 \u5207\u8bb0\u4e0d\u8981\u76f4\u63a5mv\u79fb\u52a8\u73af\u5883\u7684\u6587\u4ef6\u5939\u6765\u91cd\u547d\u540d , \u4f1a\u5bfc\u81f4\u4e00\u7cfb\u5217\u65e0\u6cd5\u60f3\u8c61\u7684\u9519\u8bef\u7684\u53d1\u751f ! - \u514b\u9686oldname\u73af\u5883\u4e3anewname\u73af\u5883 conda create -- name newname -- clone oldname - \u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda remove -- name oldname -- all","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#miniconda-vscode","text":"\u786e\u5b9avscode\u6709\u5b89\u88c5python\u62d3\u5c55 \u6253\u5f00\u8bbe\u7f6e \u5728\u641c\u7d22\u6846\u8f93\u5165\"python.analysis.extraPaths\" \u901a\u8fc7 python3 -m site \u67e5\u770b\u5305 \u6dfb\u52a0\u5230\u914d\u7f6e","title":"\u5b89\u88c5Miniconda\u540e vscode \u627e\u4e0d\u5230\u5305"},{"location":"Python/Development_tool/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Conda/#_4","text":"\u5927\u6982\u7387\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0, \u6dfb\u52a0\u955c\u50cf\u6e90\u5c31\u597d\u4e86\u3002 # \u6e05\u534e\u955c\u50cf conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes","title":"\u521b\u5efa\u73af\u5883\u5931\u8d25"},{"location":"Python/Development_tool/VSCode%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/","text":"","title":"VSCode\u8bbe\u7f6e\u7528\u6237\u81ea\u5b9a\u4e49\u4ee3\u7801\u7247\u6bb5"},{"location":"Python/Django/start/","text":"Django Django\u662f\u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684Web\u5e94\u7528\u6846\u67b6,\u7531Python\u5199\u6210\u3002\u91c7\u7528\u4e86MTV\u7684\u6846\u67b6\u6a21\u5f0f,\u5373\u6a21\u578bM,\u89c6\u56feV\u548c\u6a21\u7248T\u3002 django-admin startproject mysitel cd mysitel sudo lsof -i: \u7aef\u53e3 manage.py\u5305\u542b\u9879\u76ee\u7ba1\u7406\u7684\u5b50\u547d\u4ee4,\u5982: python3 manage.py runserver\u542f\u52a8\u670d\u52a1 python3 manage.py startapp\u521b\u5efa\u5e94\u7528 python3 manage.py migrate\u6570\u636e\u5e93\u8fc1\u79fb \u76f4\u63a5\u6267\u884cpython3 manage.py\u53ef\u5217\u51fa\u6240\u6709\u7684Django\u5b50\u547d\u4ee4 \u9879\u76ee\u7ed3\u6784-\u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939 \u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939- mysite1/mysite1 - __init__ : Python\u5305\u7684\u521d\u59cb\u5316\u6587\u4ef6 - wsgi.py : WEB\u670d\u52a1\u7f51\u5173\u7684\u914d\u7f6e\u6587\u4ef6- Django\u6b63\u5f0f\u542f\u52a8\u65f6\uff0c\u9700\u8981\u7528\u5230 - urls.py : \u9879\u76ee\u7684\u4e3b\u8def\u7531\u914d\u7f6e- HTTP\u8bf7\u6c42\u8fdb\u5165Django\u65f6\uff0c\u4f18\u5148\u8c03\u7528\u8be5\u6587\u4ef6 - settings.py : \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6-\u5305\u542b\u9879\u76ee\u542f\u52a8\u65f6\u9700\u8981\u7684\u914d\u7f6e \u9879\u76ee\u7ed3\u6784- settings.py settings.py \u5305\u542b\u4e86Django\u9879\u76ee\u542f\u52a8\u7684\u6240\u6709\u914d\u7f6e\u9879 \u914d\u7f6e\u9879\u5206\u4e3a\u516c\u6709\u914d\u7f6e\u548c\u81ea\u5b9a\u4e49\u914d\u7f6e \u914d\u7f6e\u9879\u683c\u5f0f\u4f8b: BASE DIR = 'xxxx' \u516c\u6709\u914d\u7f6e-Django\u5b98\u65b9\u63d0\u4f9b\u7684\u57fa\u7840\u914d\u7f6e https://docs.djangoproject.com/en/2.2/ref/settings/ \u9879\u76ee \u9879\u76ee\u7ed3\u6784-\u516c\u6709\u914d\u7f6e BASEDIR \u7528\u4e8e\u7ed1\u5b9a\u5f53\u524d\u9879\u76ee\u7684\u7edd\u5bf9\u8def\u5f84(\u52a8\u6001\u8ba1\u7b97\u51fa\u6765\u7684)\uff0c\u6240\u6709\u6587\u4ef6\u5939\u90fd\u53ef\u4ee5\u4f9d\u61d2\u6b64\u8def\u5f84 DEBUG \u7528\u4e8e\u914d\u7f6eDjango\u9879\u76ee\u7684\u542f\u52a8\u6a21\u5f0f,\u53d6\u503c: True\u8868\u793a\u5f00\u53d1\u73af\u5883\u4e2d\u4f7f\u7528\u5f00\u53d1\u8c03\u8bd5\u6a21\u5f0f(\u7528\u4e8e\u5f00\u53d1\u4e2d) False \u8868\u793a\u5f53\u524d\u9879\u76ee\u8fd0\u884c\u5728\u751f\u4ea7\u73af\u5883\u4e2d INSTALLED_ APPS -\u6307\u5b9a\u5f53\u524d\u9879\u76ee\u4e2d\u5b89\u88c5\u7684\u5e94\u7528\u5217\u8868 : MIDDLEWARE -\u7528\u4e8e\u6ce8\u518c\u4e2d\u95f4\u4ef6 TEMPLATES -\u7528\u4e8e\u6307\u5b9a\u6a21\u677f\u7684\u914d\u7f6e\u4fe1\u606f DATABASES -\u7528\u4e8e\u6307\u5b9a\u6570\u636e\u5e93\u7684\u914d\u7f6e\u4fe1\u606f LANGUAGE CODE -\u7528\u4e8e\u6307\u5b9a\u8bed\u8a00\u914d\u7f6e \u82f1\u6587: \"en-us\" \u4e2d\u6587: \"zh-Hans\" TIME_ZONE-\u7528\u4e8e\u6307\u5b9a\u5f53\u524d\u670d\u52a1\u5668\u7aef\u65f6\u533a \u4e16\u754c\u6807\u51c6\u65f6\u95f4: \"UTC\" \u4e2d\u56fd\u65f6\u533a: \"Asia/Shanghai\" ROOT_ _URLCONF -\u7528\u4e8e\u914d\u7f6e\u4e3b url\u914d\u7f6e'mysite1.urls' ROOT URLCONF = 'mysite 1.urls' \u9879\u76ee\u7ed3\u6784-\u81ea\u5b9a\u4e49\u914d\u7f6e settings.py\u4e2d\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5f00\u53d1\u4eba\u5458\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e \u914d\u7f6e\u5efa\u8bae:\u540d\u5b57\u5c3d\u91cf\u4e2a\u6027\u5316-\u4ee5\u9632\u8986\u76d6\u6389\u516c\u6709\u914d\u7f6e \u4f8b\u5982: (ALIPAY KEY= 'xxXxXX' settings.py\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u9879\uff0c\u90fd\u53ef\u4ee5\u6309\u9700\u7684\u5728\u4ee3\u7801\u4e2d\u5f15\u5165 \u5f15\u5165\u65b9\u5f0f: from django.conf import settings URL\u548c\u89c6\u56fe URL - \u7ed3\u6784 - \u5b9a\u4e49\u4e00\u5373\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26Uniform Resource Locator - \u4f5c\u7528-\u7528\u6765\u8868\u793a\u4e92\u8054\u7f51\u4e0a\u67d0\u4e2a\u8d44\u6e90\u7684\u5730\u5740 - URL\u7684\u4e00\u822c\u8bed\u6cd5\u683c\u5f0f\u4e3a(\u6ce8: []\u4ee3\u8868\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u7701\u7565) : protocol :// hostname[:port] / path ?query \u25cfhttp://tts.tmooc.cn/video/showVideo?menuld =657421 &version= AID999#subject protocol (\u534f\u8bae) http://tts.tmooc.cn http\u901a\u8fc7HTTP\u8bbf\u95ee\u8be5\u8d44\u6e90\u3002 \u683c\u5f0fhttp:// https\u901a\u8fc7\u5b89\u5168\u7684HTTPS\u8bbf\u95ee\u8be5\u8d44\u6e90\u3002\u683c\u5f0fhttps:// file\u8d44\u6e90\u662f\u672c\u5730\u8ba1\u7b97\u673a.\u4e0a\u7684\u6587\u4ef6\u3002\u683c\u5f0f: file:/// hostname (\u4e3b\u673a\u540d) http://tts.tmooc.cn \u662f\u6307\u5b58\u653e\u8d44\u6e90\u7684\u670d\u52a1\u5668\u7684\u57df\u540d\u7cfb\u7edf(DNS)\u4e3b\u673a\u540d\u3001\u57df\u540d\u6216IP\u5730\u5740 port (\u7aef\u53e3\u53f7) http://tts.tmooc.cn:80 \u6574\u6570\uff0c\u53ef\u9009\uff0c\u7701\u7565\u65f6\u4f7f\u7528\u65b9\u6848\u7684\u9ed8\u8ba4\u7aef\u53e3 \u5404\u79cd\u4f20\u8f93\u534f\u8bae\u90fd\u6709\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7,\u5982http\u7684\u9ed8\u8ba4\u7aef\u53e3\u4e3a80 path (\u8def\u7531\u5730\u5740) http://tts.tmooc.cn/video/showVideo \u7531\u96f6\u6216\u591a\u4e2a\"/\"\u7b26\u53f7\u9694\u5f00\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u7528\u6765\u8868\u793a\u4e3b\u673a\u4e0a\u7684 \u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6\u5730\u5740\u3002\u8def\u7531\u5730\u5740\u51b3\u5b9a\u4e86\u670d\u52a1\u5668\u7aef\u5982\u4f55\u5904\u7406\u8fd9 \u4e2a\u8bf7\u6c42 query(\u67e5\u8be2) /video/showVided?menuld=657421 &version= AID999 \u53ef\u9009\uff0c\u7528\u4e8e\u7ed9\u52a8\u6001\u7f51\u9875\u4f20\u9012\u53c2\u6570\uff0c\u53ef\u6709\u591a\u4e2a\u53c2\u6570,\u7528\u201c&\u201d\u7b26 \u53f7\u9694\u5f00\uff0c\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u548c\u503c\u7528\u201c=\" \u7b26\u53f7\u9694\u5f00\u3002 fragment (\u4fe1\u606f\u7247\u65ad) version= AID999#subject \u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6307\u5b9a\u7f51\u7edc\u8d44\u6e90\u4e2d\u7684\u7247\u65ad\u3002\u4f8b\u5982\u4e00\u4e2a\u7f51\u9875\u4e2d\u6709\u591a\u4e2a \u540d\u8bcd\u89e3\u91ca\uff0c\u53ef\u4f7f\u7528fragment\u76f4\u63a5\u5b9a\u4f4d\u5230\u67d0\u4e00\u540d\u8bcd\u89e3\u91ca\u3002 \u5904\u7406URL\u8bf7\u6c42 \u6d4f\u89c8\u5668\u5730\u5740\u680f- > http://127.0.0.1:8000/page/2003 Django \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u6839\u636eROOT_ URLCONF\u627e\u5230\u4e3b\u8def\u7531\u6587\u4ef6;\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u8be5\u6587\u4ef6\u5728\u9879\u76ee\u540c\u540d\u76ee\u5f55\u4e0b\u7684urls;\u4f8b\u5982 mysite1/mysite1/urls.py Django \u52a0\u8f7d\u4e3b\u8def\u7531\u6587\u4ef6\u4e2d\u7684urlpatterns \u53d8\u91cf[\u5305\u542b\u5f88\u591a\u8def\u7531\u7684\u6570\u7ec4] \u4f9d\u6b21\u5339\u914durlpatterns\u4e2d\u7684path\uff0c\u5339\u914d\u5230\u7b2c\u4e00 \u4e2a\u5408\u9002\u7684\u4e2d\u65ad\u540e\u7eed\u5339\u914d \u5339\u914d\u6210\u529f-\u8c03\u7528\u5bf9\u5e94\u7684\u89c6\u56fe\u51fd\u6570\u5904\u7406\u8bf7\u6c42\uff0c\u8fd4\u56de\u54cd\u5e94 \u5339\u914d\u5931\u8d25-\u8fd4\u56de404\u54cd\u5e94 \u4e3b\u8def\u7531- urls.py \u4e3b\u8def\u7531-urls.py\u6837\u4f8b from django.urls import path from . import views urlpatterns [ path ( 'admin/' , admin . site . urls ), path ( 'page/2003/' , views . page_ 2003 ), path ( 'page/2004/' , views . page_ 2004 ), ] \u89c6\u56fe\u51fd\u6570 \u89c6\u56fe\u51fd\u6570\u662f\u7528\u4e8e\u63a5\u6536\u4e00\u4e2a\u6d4f\u89c8\u5668\u8bf7\u6c42(HttpRequest\u5bf9\u8c61) \u5e76\u901a\u8fc7HttpResponse\u5bf9\u8c61\u8fd4\u56de\u54cd\u5e94\u7684\u51fd\u6570\u3002 \u6b64\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u6d4f\u89c8\u5668\u8bf7\u6c42\u5e76\u6839\u636e\u4e1a\u52a1\u903b\u8f91\u8fd4\u56de\u76f8\u5e94\u7684\u54cd\u5e94\u5185\u5bb9\u7ed9\u6d4f\u89c8\u5668 \u8bed\u6cd5: def xXX_ _view ( request [, \u5176\u5b83\u53c2\u6570 .. ]): return HttpResponse\u5bf9\u8c61 \u5c0f\u7ed3 \u25cfURL\u5168\u8c8c \u25cfDjango\u5904\u7406URL\u5bf9\u5e94\u8bf7\u6c42\u6d41\u7a0b \u25cf\u4e3b\u8def\u7531 \u25cf\u89c6\u56fe\u51fd\u6570 \u8def\u7531\u914d\u7f6e- path path()\u51fd\u6570. \u5bfc\u5165- from django.urls import path \u8bed\u6cd5- path(route, views, name= None) \u53c2\u6570: route:\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5339\u914d\u7684\u8bf7\u6c42\u8def\u5f84 views:\u6307\u5b9a\u8def\u5f84\u6240\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u540d\u79f0() name:\u4e3a\u5730\u5740\u8d77\u522b\u540d\uff0c\u5728\u6a21\u677f\u4e2d\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528 path\u8f6c\u6362\u5668 \u8bed\u6cd5: <\u8f6c\u6362\u5668\u7c7b\u578b:\u81ea\u5b9a\u4e49> \u4f5c\u7528: \u82e5\u8f6c\u6362\u5668\u7c7b\u578b\u5339\u914d\u5230\u5bf9\u5e94\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u6309\u7167\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570 \u4f8b\u5b50: path('page/ ', views.xxx) \u8f6c\u6362\u5668\u7c7b\u578b \u4f5c\u7528 \u6837\u4f8b str \u5339\u914d\u9664\u4e86'/' \u4e4b\u5916\u7684\u975e\u7a7a\u5b57\u7b26\u4e32 \"v1/users/ \" \u5339\u914d /v1/users/guoxiaonao int \u5339\u914d0\u6216\u4efb\u4f55\u6b63\u6574\u6570\u3002\u8fd4\u56de\u4e00\u4e2a int \"page/ \" \u5339\u914d /page/100 slug \u5339\u914d\u4efb\u610f\u7531ASCII\u5b57\u6bcd\u6216\u6570\u5b57\u4ee5\u53ca\u8fde\u5b57\u7b26\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u77ed\u6807\u7b7e \"detail/ \" \u5339\u914d /detail/this-is-django path \u5339\u914d\u975e\u7a7a\u5b57\u6bb5,\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26'/' \"v1/users/ \u5339\u914d /v1/goods/a/b/C \u8def\u7531\u914d\u7f6e- re_path() re_ path()\u51fd\u6570 \u5728url\u7684\u5339\u914d\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u7cbe\u786e\u5339\u914d \u8bed\u6cd5: re_ path(reg, view, name=xxx) \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u547d\u540d\u5206\u7ec4\u6a21\u5f0f(?P pattern) ;\u5339\u914d\u63d0\u53d6 \u53c2\u6570\u540e\u7528\u5173\u952e\u5b57\u4f20\u53c2\u65b9\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570 \u8bf7\u6c42\u65b9\u6cd5 \u5e8f\u53f7 \u65b9\u6cd5 \u63cf\u8ff0 1 GET \u8bf7\u6c42\u6307\u5b9a\u7684\u9875\u9762\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u5b9e\u4f53\u4e3b\u4f53\u3002 2 HEAD \u7c7b\u4f3c\u4e8eget\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u5185 \u5bb9\uff0c\u7529\u4e8e\u83b7\u53d6\u62a5\u5934 3 POST \u5411\u6307\u5b9a\u8d44\u6e90\u63d0\u4ea4\u6570\u636e\u8fdb\u884c\u5904\u7406\u8bf7\u6c42(\u4f8b\u5982\u63d0\u4ea4\u8868\u5355\u6216\u8005\u4e0a\u4f20\u6587\u4ef6)\u3002\u6570\u636e\u88ab\u5305\u542b\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002POST\u8bf7\u6c42 \u53ef\u80fd\u4f1a\u5bfc\u81f4\u65b0\u7684\u8d44\u6e90\u7684\u5efa\u7acb\u548c/\u6216\u5df2\u6709\u8d44\u6e90\u7684\u4fee\u6539\u3002 4 PUT \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u4f20\u9001\u7684\u6570\u636e\u53d6\u4ee3\u6307\u5b9a\u7684\u6587\u6863\u7684\u5185\u5bb9\u3002 5 DELETE \u8bf7\u6c42\u670d\u52a1\u5668\u5220\u9664\u6307\u5b9a\u7684\u9875\u9762\u3002 6 CONNECT HTTP/1.1\u534f\u8bae\u4e2d\u9884\u7559\u7ed9\u80fd\u591f\u5c06\u8fde\u63a5\u6539\u4e3a\u7ba1\u9053\u65b9\u5f0f\u7684\u4ee3\u7406\u670d\u52a1\u5668\u3002 7 OPTIONS \u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u770b\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 8 TRACE \u56de\u663e\u670d\u52a1\u5668\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u6216\u8bca\u65ad\u3002 Django\u4e2d\u7684\u8bf7\u6c42 \u8bf7\u6c42\u5728Django\u4e2d\u5b9e\u5219\u5c31\u662f\u89c6\u56fe\u51fd\u6570\u7684\u7b2c\u4e00-\u4e2a\u53c2\u6570\uff0c \u5373HttpRequest\u5bf9\u8c61 Django\u63a5\u6536\u5230http\u534f\u8bae\u7684\u8bf7\u6c42\u540e\uff0c\u4f1a\u6839\u636e\u8bf7\u6c42\u6570\u636e\u62a5\u6587\u521b\u5efaHttpRequest\u5bf9\u8c61 HttpRequest\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\u63cf\u8ff0\u4e86\u8bf7\u6c42\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f Django\u4e2d\u7684\u8bf7\u6c42(\u7eed) path_ info: URL\u5b57\u7b26\u4e32 method:\u5b57\u7b26\u4e32\uff0c\u8868\u793aHTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5e38\u7528\u503c: 'GET'\u3001 'POST' GET: QueryDict\u67e5\u8be2\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542bget\u8bf7\u6c42\u65b9\u5f0f\u7684\u6240\u6709\u6570\u636e POST: QueryDict\u67e5\u8be2\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542bpost\u8bf7\u6c42\u65b9\u5f0f\u7684\u6240\u6709\u6570\u636e FILES: \u7c7b\u4f3c\u4e8e\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u6240\u6709\u7684\u4e0a\u4f20\u6587\u4ef6\u4fe1\u606f COOKIES: Python\u5b57\u5178\uff0c \u5305\u542b\u6240\u6709\u7684cookie, \u952e\u548c\u503c\u90fd\u4e3a\u5b57\u7b26\u4e32 session: \u4f3c\u4e8e\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u5f53\u524d\u7684\u4f1a\u8bdd body:\u5b57\u7b26\u4e32\uff0c\u8bf7\u6c42\u4f53\u7684\u5185\u5bb9(POST\u6216PUT) scheme :\u8bf7\u6c42\u534f\u8bae('http'/'https') request.get_ full_ path() :\u8bf7\u6c42\u7684\u5b8c\u6574\u8def\u5f84 request.META: \u8bf7\u6c42\u4e2d\u7684\u5143\u6570\u636e(\u6d88\u606f\u5934) request.META['REMOTE ADDR'] :\u5ba2\u6237\u7aefIP\u5730\u5740 HTTP\u72b6\u6001\u7801\u7684\u82f1\u6587\u4e3aHTTP Status Code \u4e0b\u9762\u662f\u5e38\u89c1\u7684HTTP\u72b6\u6001\u7801: - 200 -\u8bf7\u6c42\u6210\u529f - 301 -\u6c38\u4e45\u91cd\u5b9a\u5411-\u8d44\u6e90(\u7f51\u9875\u7b49)\u88ab\u6c38\u4e45\u8f6c\u79fb\u5230\u5176\u5b83URL - 302 -\u4e34\u65f6\u91cd\u5b9a\u5411 - 404 -\u8bf7\u6c42\u7684\u8d44\u6e90(\u7f51\u9875\u7b49)\u4e0d\u5b58\u5728 - 500 -\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef; Django\u4e2d\u7684\u54cd\u5e94\u5bf9\u8c61 \u6784\u9020\u51fd\u6570\u683c\u5f0f: HttpResponse(content=\u54cd\u5e94\u4f53\uff0ccontent_type= \u54cd\u5e94\u4f53\u6570\u636e\u7c7b\u578b(default = html), status=\u72b6\u6001\u7801) \u4f5c\u7528: \u5411\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u8fd4\u56de\u54cd\u5e94\uff0c\u540c\u65f6\u643a\u5e26\u54cd\u5e94\u4f53\u5185\u5bb9 \u5e38\u7528\u7684Content-Type\u5982\u4e0b 'text/htm]' (\u9ed8\u8ba4\u7684\uff0chtmI\u6587\u4ef6) 'text/plain' (\u7eaf\u6587\u672c) 'text/css' (css\u6587\u4ef6) 'text/javascript' (js\u6587\u4ef6) 'multipart/form-data' (\u6587\u4ef6\u63d0\u4ea4) 'application/json' (json\u4f20\u8f93) 'application/xml' (xml\u6587\u4ef6) HttpResponse\u5b50\u7c7b \u7c7b\u578b \u4f5c\u7528 \u72b6\u6001\u7801 HttpResponseRedirect \u91cd\u5b9a\u5411 302 HttpResponseNotModified \u672a\u4fee\u6539 304 HttpResponseBadRequest \u9519\u8bef\u8bf7\u6c42 400 HttpResponseNotFound \u6ca1\u6709\u5bf9\u5e94\u7684\u8d44\u6e90 404 HttpResponseForbidden \u8bf7\u6c42\u88ab\u7981\u6b62 403 HttpResponseServerError \u670d\u52a1\u5668\u9519\u8bef 500 GET\u8bf7\u6c42\u548cPOST\u8bf7\u6c42 \u65e0\u8bba\u662fGET\u8fd8\u662fPOST\uff0c\u7edf\u4e00\u90fd\u7531\u89c6\u56fe\u51fd\u6570\u63a5\u6536\u8bf7\u6c42\uff0c\u901a\u8fc7\u5224\u65adrequest.method\u533a\u5206\u5177\u4f53\u7684\u8bf7\u6c42\u52a8\u4f5c \u6837\u4f8b: if request . method == 'GET' : \u5904\u7406GET\u8bf7\u6c42\u65f6\u7684\u4e1a\u52a1\u903b\u8f91 elif request . method == ' POST' : \u5904\u7406POST\u8bf7\u6c42\u7684\u4e1a\u52a1\u903b\u8f91 else : \u5176\u4ed6\u8bf7\u6c42\u4e1a\u52a1\u903b\u8f91 GET\u8bf7\u6c42\u52a8\u4f5c\uff0c - -\u822c\u7528\u4e8e\u5411 \u670d\u52a1\u5668\u83b7\u53d6\u6570\u636e \u80fd\u591f\u4ea7\u751fGET\u8bf7\u6c42\u7684\u573a\u666f: \u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165URL,\u56de\u8f66\u540e <a href=\"\u5730\u5740?\u53c2\u6570=\u503c&\u53c2\u6570=\u503c\" > form\u8868\u5355\u4e2d\u7684method\u4e3aget GET\u8bf7\u6c42\u65b9\u5f0f\u4e2d\uff0c\u5982\u679c\u6709\u6570\u636e\u9700\u8981\u4f20\u9012\u7ed9\u670d\u52a1\u5668\uff0c\u901a\u5e38\u4f1a\u7528 \u67e5\u8be2\u5b57\u7b26\u4e32(Query String)\u4f20\u9012 [\u6ce8\u610f:\u4e0d\u8981\u4f20\u9012\u654f\u611f\u6570\u636e] URL\u683c\u5f0f: xxx?\u53c2\u6570\u540d1=\u503c1&\u53c2\u6570\u540d2=\u503c2... - \u5982: http://127.0.0.1:8000/page1?a= 100&b=200 \u670d\u52a1\u5668\u7aef\u63a5\u6536\u53c2\u6570 \u83b7\u53d6\u5ba2\u6237\u7aef\u8bf7\u6c42GET\u8bf7\u6c42\u63d0\u4ea4\u7684\u6570\u636e_ GET\u5904\u7406 \u65b9\u6cd5\u793a\u4f8b: request . GET [ '\u53c2\u6570\u540d' ] # QueryDict request . GET . get ( '\u53c2\u6570\u540d' \uff0c '\u9ed8\u8ba4\u503c' ) request . GET . getlist ( '\u53c2\u6570\u540d' ) # mypage?a=100&b=200&C= 300&b=400 # request. GET=QueryDict({'a':['100'] \uff0c'b':[ ' 200', '400']\uff0c'c':[' 300'] # a = request.GET[' a'] # b = request.GET.getlist('b') POST\u5904\u7406 POST\u8bf7\u6c42\u52a8\u4f5c\uff0c-\u822c\u7528\u4e8e\u5411\u670d\u52a1\u5668\u63d0\u4ea4\u5927\u91cf/\u9690\u79c1\u6570\u636e\u6570 \u636e -\u5ba2\u6237\u7aef\u901a\u8fc7\u8868\u5355\u7b49POST\u8bf7\u6c42\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u670d\u52a1\u5668\u7aef\uff0c\u5982: < form method = \" post' actign=\" / 1ogin \" > \u59d3\u540d: < input type = \"text\" name = \" username\" > < input type = ' submit' value = '\u767b\u9646 ' > </ form > </ html > Django\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u6a21\u677f\u5c42 \u6a21\u677f\u914d\u7f6e TEMPLATES \u521b\u5efa\u6a21\u677f\u6587\u4ef6\u5939<\u9879\u76ee\u540d>/templates \u5728settings.py\u4e2dTEMPLATES\u914d\u7f6e\u9879 BACKEND :\u6307\u5b9a\u6a21\u677f\u7684\u5f15\u64ce DIRS: \u6a21\u677f\u7684\u641c\u7d22\u76ee\u5f55(\u53ef\u4ee5\u662f\u4e00-\u4e2a\u6216\u591a\u4e2a) APP_DIRS:\u662f\u5426\u8981\u5728\u5e94\u7528\u4e2d\u7684templates\u6587\u4ef6\u5939\u4e2d\u641c\u7d22\u6a21\u677f\u6587\u4ef6 OPTIONS :\u6709\u5173\u6a21\u677f\u7684\u9009\u9879 \u914d\u7f6e\u9879\u4e2d\u9700\u8981\u4fee\u6539\u90e8\u5206 \u8bbe\u7f6e DIRS - \"DIRS': [os.path.join(BASE_ DIR, 'templates')], \u5728\u89c6\u56fe\u51fd\u6570\u4e2d: from django. shortcuts import render return render ( request , '\u6a21\u677f\u6587\u4ef6\u540d' \uff0c \u5b57\u5178\u6570\u636e ) \u89c6\u56fe\u5c42\u4e0e\u6a21\u677f\u5c42\u4e4b\u95f4\u7684\u4ea4\u4e92 \u89c6\u56fe\u51fd\u6570\u4e2d\u53ef\u4ee5\u5c06Python\u53d8\u91cf\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u4f20\u9012\u5230\u6a21\u677f \u6837\u4f8b: def xXx_ _vi ew ( request ) dic = { \"\u53d8\u91cf1\" : \"\u503c1\" \uff0c \"\u53d8\u91cf2\" : \"\u503c2\" \uff0c } return render ( request \uff0c 'xxx.html' , dic ) \u6a21\u677f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528{{\u53d8\u91cf\u540d}}\u7684\u8bed\u6cd5\u8c03\u7528\u89c6\u56fe\u4f20\u8fdb\u6765\u7684\u53d8\u91cf \u6a21\u677f\u5c42-\u53d8\u91cf\u548c\u6807\u7b7e \u89c6\u56fe\u51fd\u6570\u4e2d\u53ef\u4ee5\u5c06Python\u53d8\u91cf\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u4f20\u9012\u5230\u6a21\u677f\u4e0a \u6837\u4f8b: def xxx_view ( request ) dic , = { \"\u53d8\u91cf1\" : \"\u503c1\" , \"\u53d8\u91cf2\" : \"\u503c2\" , } return render ( request \uff0c ' xxx.htm1' \uff0c dict ) \u80fd\u4f20\u9012\u5230\u6a21\u677f\u4e2d\u7684\u6570\u636e\u7c7b\u578b str \u5b57\u7b26\u4e32 int- \u6574\u578b list -\u6570\u7ec4 tuple -\u5143\u7ec4 dict -\u5b57\u5178 func-\u65b9\u6cd5 obj-\u7c7b\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u53d8\u91cf\u8bed\u6cd5 {{\u53d8\u91cf\u540d}} {{\u53d8\u91cf\u540d.index }} {{\u53d8\u91cf\u540d.key}} {{\u5bf9\u8c61.\u65b9\u6cd5} {{\u51fd\u6570\u540d}} \u4f5c\u7528:\u5c06\u4e00\u4e9b\u670d\u52a1\u5668\u7aef\u7684\u529f\u80fd\u5d4c\u5165\u5230\u6a21\u677f\u4e2d\uff0c\u4f8b\u5982\u6d41\u7a0b\u63a7\u5236\u7b49 \u6807\u7b7e\u8bed\u6cd5 { % \u6807\u7b7e \u3001 % } { % \u7ed3\u675f\u6807\u7b7e % } if\u6807\u7b7e \u8bed\u6cd5: { % if\u6761\u4ef6\u8868\u8fbe\u5f0f1 % } ... { % elif\u6761\u4ef6\u8868\u8fbe\u5f0f2 % } ... { % elif\u6761\u4ef6\u8868\u8fbe\u5f0f3 % } ... { % eIse % } ... { % endif % } \u6ce8\u610f: if\u6761\u4ef6\u8868\u8fbe\u5f0f\u91cc\u53ef\u4ee5\u7528\u7684\u8fd0\u7b97\u7b26==,!=, <,>, <=,>=, in, not in, is, is not, not\u3001 and\u3001or \u5728if\u6807\u8bb0\u4e2d\u4f7f\u7528\u5b9e\u9645\u62ec\u53f7\u662f\u65e0\u6548\u7684\u8bed\u6cd5\u3002\u5982\u679c\u60a8\u9700\u8981\u5b83\u4eec\u6307\u793a\u4f18\u5148\u7ea7\uff0c\u5219\u5e94\u4f7f\u7528\u5d4c\u5957\u7684if\u6807\u8bb0\u3002 \u6a21\u677f\u8fc7\u6ee4\u5668 \u5b9a\u4e49:\u5728\u53d8\u91cf\u8f93\u51fa\u65f6\u5bf9\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u5904\u7406 \u4f5c\u7528:\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fc7\u6ee4\u5668\u6765\u6539\u53d8\u53d8\u91cf\u7684\u8f93\u51fa\u663e\u793a \u8bed\u6cd5: {{\u53d8\u91cf|\u8fc7\u6ee4\u56681:\u53c2\u6570\u503c1' | \u8fc7\u6ee4\u56682:\u53c2\u6570\u503c2' .. }} \u5b98\u65b9\u6587\u6863: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/ \u5e38\u7528\u8fc7\u6ee4\u5668 | \u8fc7\u6ee4\u5668 | \u8bf4\u660e | | ----------------- | ------------------------------------------------------------------------------------------- | | lower | \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5168\u90e8\u5c0f\u5199\u3002 | | upper | \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f | | safe | \u9ed8\u8ba4\u4e0d\u5bf9\u53d8\u91cf\u5185\u7684\u5b57\u7b26\u4e32\u8fdb\u884chtmI\u8f6c\u4e49 | | add: \"n\" | \u5c06value\u7684\u503c\u589e\u52a0n | | truncatechars:'n' | \u5982\u679c\u5b57\u7b26\u4e32\u5b57\u7b26\u591a\u4e8e\u6307\u5b9a\u7684\u5b57\u7b26\u6570\u91cf,\u90a3\u4e48\u4f1a\u88ab\u622a\u65ad\u3002\u622a\u65ad\u7684\u5b57\u7b26\u4e32\u5c06\u4ee5\u53ef\u7ffb\u8bd1\u7684\u7701\u7565\u53f7\u5e8f\u5217....\u7ed3\u5c3e\u3002 | URL\u89e3\u6790 \u7edd\u5bf9\u5730\u5740: http://127.0.0.1:8000/page/1 \u76f8\u5bf9\u5730\u5740: '/page/1' - '' \u5f00\u5934\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u5f53\u524d\u5730\u5740\u680f \u91cc\u7684\u534f\u8bae\uff0cip\u548c\u7aef\u53e3\u52a0\u4e0a\u8fd9\u4e2a\u5730\u5740\uff0c\u4f5c\u4e3a\u6700\u7ec8\u8bbf\u95ee\u5730\u5740\uff0c\u5373\u5982\u679c\u5f53 \u524d\u9875\u9762\u5730\u5740\u680f\u4e3ahttp://127.0.0.1:8000/page/3;\u5f53\u524d\u76f8\u5bf9\u5730\u5740\u6700\u7ec8 \u7ed3\u679c\u4e3ahttp://127.0.0.1:8000 + /page/1 'page/1'- \u6ca1\u6709/' \u5f00\u5934\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u6d4f\u89c8\u5668\u4f1a\u6839\u636e\u5f53\u524d url\u7684\u6700\u540e-\u4e00\u4e2a / \u4e4b\u524d\u7684\u5185\u5bb9\u52a0\u4e0a\u8be5\u76f8\u5bf9\u5730\u5740\u4f5c\u4e3a\u6700\u7ec8\u8bbf\u95ee\u5730\u5740\uff0c\u4f8b \u5982\u5f53\u524d\u5730\u5740\u680f\u5730\u5740\u4e3ahttp://127.0.0.1:8000/topic / detail; \u5219\u8be5\u76f8\u5bf9 \u5730\u5740\u6700\u7ec8\u7ed3\u679c\u4e3ahttp://127.0.0.1:8000/topic/ + page/1 URL\u53cd\u5411\u89e3\u6790 url\u53cd\u5411\u89e3\u6790\u662f\u6307\u5728\u89c6\u56fe\u6216\u6a21\u677f\u4e2d\uff0c\u7528path\u5b9a\u4e49\u7684\u540d\u79f0\u6765\u52a8\u6001\u67e5\u627e \u6216\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u8def\u7531 path\u51fd\u6570\u7684\u8bed\u6cd5 path(route, views, name=\"\u522b\u540d\") path('page', views.page_view, name='page_url') \u6839\u636epath\u4e2d\u7684name='\u5173\u952e\u5b57\u4f20\u53c2\u7ed9url\u786e\u5b9a\u4e86\u4e2a\u552f\u4e00\u786e\u5b9a\u7684\u540d\u5b57\uff0c\u5728\u6a21\u677f\u6216\u89c6\u56fe\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u540d\u5b57\u53cd\u5411\u63a8\u65ad\u51fa\u6b64url\u4fe1\u606f \u6a21\u677f\u4e2d-\u901a\u8fc7ur|\u6807\u7b7e\u5b9e\u73b0\u5730\u5740\u7684\u53cd\u5411\u89e3\u6790 { % ur ] '\u522b\u540d' % } { % ur ] \u522b\u540d ' ' \u53c2\u6570\u503c1 ' ' \u53c2\u6570\u503c2 ' %} ex : {% ur] ' pagen ' ' 400 ' %} {% ur] ' person ' age=' 18 ' name=' gxn ' % } ## url\u53cd\u5411\u89e3\u6790(\u7eed1) \u5728\u89c6\u56fe\u51fd\u6570\u4e2d->\u53ef\u8c03\u7528django\u4e2d\u7684reverse\u65b9\u6cd5\u8fdb\u884c\u53cd\u5411 from django.ur1s import reverse reverse ( '\u522b\u540d' \uff0c args = [] \uff0c kwargs = {}) ex : print ( reverse ( ' pagen' , args = [ 300 ] )) print ( reverse ( ' person' \uff0c kwargS = { ' name' : 'xixi' , 'age' : 18 })) ## \u5c0f\u7ed3 - \u8bf7\u6c42(request)\u548c\u54cd \u5e94(HttpResponse) - GET/POST\u5904\u7406- request.GET/POST - MVC\u548cMTV - \u6a21\u677f\u5c42\u57fa\u7840\u914d\u7f6e - \u6a21\u677f\u53d8\u91cf/\u6807\u7b7e/\u8fc7\u6ee4\u5668/\u7ee7\u627f - url\u53cd\u5411\u89e3\u6790 ## \u9759\u6001\u6587\u4ef6 \u9759\u6001\u6587\u4ef6\u914d\u7f6e- settings.py\u4e2d[\u8be5\u914d\u7f6e\u9ed8\u8ba4\u5b58\u5728] 1. \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u8bbf\u95ee\u8def\u5f84 - \u901a\u8fc7\u54ea\u4e2aur|\u5730\u5740\u627e\u9759\u6001\u6587\u4ef6 - STATIC URL = '/static/' - \u8bf4\u660e: \u6307\u5b9a\u8bbf\u95ee\u9759\u6001\u6587\u4ef6\u65f6\u662f\u9700\u8981\u901a\u8fc7/static/xxx\u6216 http://127.0.0.1:8000/static/xxx [xxx\u8868\u793a\u5177\u4f53\u7684\u9759\u6001\u8d44\u6e90\u4f4d\u7f6e] 2. \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u5b58\u50a8\u8def\u5f84 `STATICELES_DIRS` STATICFILES_DIRS \u4fdd\u5b58\u7684\u662f\u9759\u6001\u6587\u4ef6\u5728\u670d\u52a1\u5668\u7aef\u7684\u5b58\u50a8\u4f4d\u7f6e # file: setting.py STATICFILES_DIRS = ( os.path.join ( BASE_DIR, \"static\" ) , ) ## \u9759\u6001\u6587\u4ef6\u8bbf\u95ee(\u7eed) \u6a21\u677f\u4e2d\u8bbf\u95ee\u9759\u6001\u6587\u4ef6- img\u6807\u7b7e\u4e3a\u4f8b \u65b9\u68482 \u901a\u8fc7{%static%}\u6807\u7b7e\u8bbf\u95ee\u9759\u6001\u6587\u4ef6 1. \u52a0\u8f7d static - {% load static %} 2. \u4f7f\u7528\u9759\u6001\u8d44\u6e90- {% static '\u9759\u6001\u8d44\u6e90\u8def\u5f84' %} \u793a\u4f8b < img src = \"{% static 'images/lena.jpg' %}\" > ## Django \u5e94\u7528\u5206\u5e03\u5f0f\u8def\u7531 ![\u4ec0\u4e48\u662f\u5e94\u7528?](https://foruda.gitee.com/images/1676475979524645667/45b27197_10213136.png \"\u4ec0\u4e48\u662f\u5e94\u7528?\") ### \u521b\u5efa\u5e94\u7528 1. \u6b65\u9aa41: \u7528manage.py\u4e2d\u7684\u5b50\u547d\u4ee4 `startapp` \u521b\u5efa\u5e94\u7528\u6587\u4ef6\u5939 `python3 manage.py startapp music` 2. \u6b65\u9aa42: \u5728settings.py\u7684 `INSTALLED_APPS` \u5217\u8868\u4e2d\u914d\u7f6e\u5b89\u88c5\u6b64\u5e94\u7528 settings.py\u914d\u7f6e\u6837\u4f8b INSTALLED_APPS = [ # .... 'user' , # \u7528\u6237\u4fe1\u606f\u6a21\u5757 'music' , # \u97f3\u4e50\u6a21\u5757 ] \u521b\u5efa\u540e \u251c\u2500\u2500 music \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations # M: DB \u6570\u636e\u5e93 \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py # M: DB \u6a21\u578b\u5c42 \u2502 \u251c\u2500\u2500 tests.py # \u6d4b\u8bd5\u6a21\u5757 \u2502 \u2514\u2500\u2500 views.py # V: \u5e94\u7528\u89c6\u56fe ![\u5206\u5e03\u5f0f\u8def\u7531](https://foruda.gitee.com/images/1676476577884293103/b1bf5d48_10213136.png \"\u5206\u5e03\u5f0f\u8def\u7531\") ## \u914d\u7f6e\u5206\u5e03\u5f0f\u8def\u7531 ### \u6b65\u9aa4 1 - \u4e3b\u8def\u7531\u4e2d\u8c03\u7528include\u51fd\u6570 - \u8bed\u6cd5: `include('app\u540d \u5b57.url\u6a21\u5757\u540d')` - \u4f5c\u7528:\u7528\u4e8e\u5c06\u5f53\u524d\u8def\u7531\u8f6c\u5230\u5404\u4e2a\u5e94\u7528\u7684\u8def\u7531\u914d\u7f6e\u6587\u4ef6\u7684urlpatterns \u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406 \u793a\u4f8b\uff1a \u4ee5 `http://127.0.0.1:8000/music/index` \u4e3a\u4f8b: from django.urls import path , include from . import views urlpatterns = [ path ( 'admin/' \uff0c admin . site . urls ) , path ( 'test static' \uff0c views . test_static ) , path ( 'music/' , include ( 'music.urls' ) ) ] ### \u6b65\u9aa42 - \u5e94\u7528\u4e0b\u914d\u7f6e urls.py \u5e94\u7528\u4e0b\u624b\u52a8\u521b\u5efa uris.py \u6587\u4ef6 \u5185\u5bb9\u7ed3\u6784\u540c\u4e3b\u8def\u7531\u5b8c\u5168\u4e00\u6837 from django.urls import path from . import views urlpatterns = [ #http://127.0.0.1:8000/music/index path ( 'index' \uff0c views . index_view ) ] ## \u5e94\u7528\u5185\u90e8\u53ef\u4ee5\u914d\u7f6e\u6a21\u677f\u76ee\u5f55 1. \u5e94\u7528\u4e0b\u624b\u52a8\u521b\u5efa `templates` \u6587\u4ef6\u5939 N 2. settings.py\u4e2d \u5f00\u542f\u5e94\u7528\u6a21\u677f\u529f\u80fd `TEMPLATE\u914d\u7f6e\u9879\u4e2d\u7684'APP_DIRS'\u503c\u4e3aTrue\u5373\u53ef` \u5e94\u7528\u4e0b `templates` \u548c\u5916\u5c42 `templates` \u90fd\u5b58\u5728\u65f6\uff0cdjango \u67e5\u627e\u6a21\u677f\u89c4\u5219 1. \u4f18\u5148\u67e5\u627e\u5916\u5c42 `templates` \u76ee\u5f55\u4e0b\u7684\u6a21\u677f 2. \u6309 `INSTALLED_APPS` \u914d\u7f6e\u4e0b\u7684\u5e94\u7528\u987a\u5e8f\u9010\u5c42\u67e5\u627e ## \u5c0f\u7ed3 - \u5e94\u7528 - \u521b\u5efa - \u6ce8\u518c - \u5206\u5e03\u5f0f\u8def\u7531 - \u4e3b\u8def\u7531 - include - \u5e94\u7528\u4e0burls.py\u7f16\u5199 urlpatterns ## \u6a21\u578b\u5c42 ![MTV](https://foruda.gitee.com/images/1676478089132948278/958ced12_10213136.png \"MTV\") ## Django\u914d\u7f6emysq| - \u5b89\u88c5mysqlclient [\u7248\u672cmysqlclient 1.3.13\u4ee5\u4e0a] - \u5b89\u88c5\u524d\u786e\u8ba4ubuntu\u662f\u5426\u5df2\u5b89\u88c5`python3-dev` \u548c`default-libmysqlclient-dev` 1. `sudo apt list --installed|grep -E 'libmysqlclient-dev|python3-dev'` . 2. \u82e5\u547d\u4ee4\u65e0\u8f93\u51fa\u5219\u9700\u8981\u5b89\u88c5 - `sudo apt-get install python3-dev default-libmysqlclient-dev` `sudo pip3 install mysqlclient` \u6ce8\u610f\uff1a`conda \u73af\u5883\u76f4\u63a5\u7528 conda install mysqlclient \u5c31\u597d` \u68c0\u6d4b\u662f\u5426\u88c5\u597d `mysqlclient` \u5305\uff1a ( qqhr ) warmheart@VM-12-12-ubuntu:~/learn_django$ sudo pip3 freeze | grep -i 'mysql' mysqlclient == 2 .1.1 ## mysql\u7684\u5b89\u88c5\uff08linux\u3001ubuntu20.04\uff09 - \u7b2c\u4e00\u6b65 \u5b89\u88c5: - \u6b65\u9aa4\u4e00\uff1b \u6253\u5f00\u7ba1\u7406\u5458\u6743\u9650+\u8f93\u5165\u5bc6\u7801\uff1b $ sudo su - \u6b65\u9aa4\u4e8c\uff1b\u5b89\u88c5 $ apt install mysql-server - \u7b2c\u4e8c\u6b65 \u5b89\u88c5\u5b8c\u67e5\u770bmysql\u542f\u52a8\u72b6\u6001: $ systemctl status mysql \u6216\u8005 $ service mysql status - \u7b2c\u4e09\u6b65 \u76f4\u63a5\u4f7f\u7528root\u8d26\u6237\u767b\u5f55\u7136\u540e\u4fee\u6539\u5bc6\u7801\u5c31\u53ef\u4ee5\u4e86\uff0c\u53ef\u4ee3\u66ff\u4e0b\u9762\u7b2c3\u6b65\u7684\u64cd\u4f5c\uff1a 1. `sudo mysql -uroot -p ` \u56de\u8f66\u8f93\u5165`\u5bc6\u7801` \u767b\u5f55 2. \u4fee\u6539\u5bc6\u7801\uff1a`alter user 'root'@'localhost' identified with mysql_native_password by '\u8fd9\u91cc\u662f\u5bc6\u7801';` \u6ce8\u610f\uff1a`;`\u53f7\u7ed3\u5c3e \u3002 3. \u6267\u884c\uff1a`flush privileges;`\uff1b\u4f7f\u5bc6\u7801\u751f\u6548\uff0c\u7136\u540e\u4f7f\u7528root\u7528\u6237\u767b\u5f55\u3002 - \u7b2c\u56db\u6b65 \u521b\u5efa\u81ea\u5df1\u7684\u7528\u6237\uff1a create user '\u7528\u6237\u540d' @ '%' identified with mysql_native_password by '\u5bc6\u7801' ; grant all privileges on *.* to '\u7528\u6237' @ '%' with grant option ; flush privileges ; # \u4fdd\u5b58\u7b56\u7565 # \u5b8c\u6210\u4e86\uff0c\u76f4\u63a5\u8fdc\u7a0b\u767b\u5f55\u3002 \u6ce8\u610f\uff1a \"localhost\"\uff0c\u662f\u6307\u8be5\u7528\u6237\u53ea\u80fd\u5728\u672c\u5730\u767b\u5f55\uff0c\u4e0d\u80fd\u5728\u53e6\u5916\u4e00\u53f0\u673a\u5668\u4e0a\u8fdc\u7a0b\u767b\u5f55\u3002\u5982\u679c\u60f3\u8fdc\u7a0b\u767b\u5f55\u7684\u8bdd\uff0c\u5c06\"localhost\"\u6539\u4e3a\"%\"\uff0c\u8868\u793a\u5728\u4efb\u4f55\u4e00\u53f0\u7535\u8111\u4e0a\u90fd\u53ef\u4ee5\u767b\u5f55\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u67d0\u53f0\u673a\u5668\u53ef\u4ee5\u8fdc\u7a0b\u767b\u5f55\u3002 - \u5176\u4ed6 \u6570\u636e\u5e93\u7684\u542f\u52a8|\u91cd\u542f|\u5173\u673a\u547d\u4ee4 \uff1b | \u6570\u636e\u5e93\u7684 | \u542f\u52a8 | \u91cd\u542f | \u5173\u673a\u547d\u4ee4 | | ------------------- | ----- | ------- | -------- | | sudo service mysql | strat | restart | stop | \u53ca\u662f `sudo service mysql start/restart/stop` \u76f8\u5173\u6559\u7a0b: - [Ubuntu 20.04 \u5b89\u88c5mysql\u6570\u636e\u5e93\u6559\u7a0b](https://blog.csdn.net/cyz141001/article/details/119028923) \u6216\u8005 systemctl status mysql.service ## Django\u914d\u7f6emysql (\u7eed) - 1. \u521b\u5efa\u6570\u636e\u5e93,\u8fdb\u5165mysql\u6570\u636e\u5e93\u6267\u884c - `create database \u6570\u636e\u5e93\u540d default charset utf8;` - `\u901a\u5e38\u6570\u636e\u5e93\u540d\u8ddf\u9879\u76ee\u540d\u4fdd\u6301\u4e00\u81f4` - 2. settings.py\u91cc\u8fdb\u884c\u6570\u636e\u5e93\u7684\u914d\u7f6e\u4fee\u6539 1. `DATABASES` \u914d\u7f6e\u9879\u7684\u5185\u5bb9\uff0c\u7531 `'ENGINE': 'django.db.backends.sqlite3'` \u53d8\u4e3a `'ENGINE': 'django.db.backends.mysql'`, 2. \u6dfb\u52a0 \u5176\u4ed6\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b: DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'mysitel' , # \u6570\u636e\u5e93\u540d 'USER' : 'warmheart' , 'PASSWORD' : '13467947371fwFW!' , 'HOST' : '127.0.0.1' , 'PORT' : '3306' } } ## \u4ec0\u4e48\u662f\u6a21\u578b - \u6a21\u578b\u662f\u4e00\u4e2aPython\u7c7b,\u5b83\u662f\u7531django.db.models.Model\u6d3e\u751f\u51fa\u7684\u5b50\u7c7b\u3002 - \u4e00\u4e2a\u6a21\u578b\u7c7b\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5f20\u6570\u636e\u8868 - \u6a21\u578b\u7c7b\u4e2d\u6bcf\u4e00\u4e2a\u7c7b\u5c5e\u6027\u90fd\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u3002 - \u6a21\u578b\u662f\u6570\u636e\u4ea4\u4e92\u7684\u63a5\u53e3\uff0c\u662f\u8868\u793a\u548c\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u65b9\u6cd5\u548c\u65b9\u5f0f ## ORM\u6846\u67b6 ![ORM](https://foruda.gitee.com/images/1676482006679819467/afffe6cf_10213136.png \"ORM\") - \u5b9a\u4e49: ORM (Object Relational Mapping) \u5373\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff0c\u5b83 \u662f\u4e00\u79cd\u7a0b\u5e8f\u6280\u672f\uff0c\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u548c\u5bf9\u8c61\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u4ece\u800c \u907f\u514d\u901a\u8fc7SQL\u8bed\u53e5\u64cd\u4f5c\u6570\u636e\u5e93 - \u4f5c\u7528: 1. \u5efa\u7acb\u6a21\u578b\u7c7b\u548c\u8868\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002 2. \u6839\u636e\u8bbe\u8ba1\u7684\u6a21\u578b\u7c7b\u751f\u6210\u6570\u636e\u5e93\u4e2d\u7684\u8868\u683c\u3002 3. \u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u5e93\u7684\u5207\u6362\u3002 ## ORM\u6846\u67b6(\u7eed) ### \u4f18\u70b9: - \u53ea\u9700\u8981\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u4e0d\u9700\u8981\u9762\u5411\u6570\u636e\u5e93\u7f16\u5199\u4ee3\u7801. - \u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u90fd\u8f6c\u5316\u6210\u5bf9\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u64cd\u4f5c. - \u4e0d\u7528\u7f16\u5199\u5404\u79cd\u6570\u636e\u5e93\u7684sql\u8bed\u53e5. - \u5b9e\u73b0\u4e86\u6570\u636e\u6a21\u578b\u4e0e\u6570\u636e\u5e93\u7684\u89e3\u8026\uff0c\u5c4f\u853d\u4e86\u4e0d\u540c\u6570\u636e\u5e93\u64cd\u4f5c\u4e0a\u7684\u5dee \u5f02. - \u4e0d\u5728\u5173\u6ce8\u7528\u7684\u662fmysql\u3001oracl..\u7b49\u6570\u636e\u5e93\u7684\u5185\u90e8\u7ec6\u8282. - \u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u8f7b\u677e\u66f4\u6362\u6570\u636e\u5e93,\u800c\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801 ### \u7f3a\u70b9 - \u5bf9\u4e8e\u590d\u6742\u4e1a\u52a1\uff0c\u4f7f\u7528\u6210\u672c\u8f83\u9ad8 - \u6839\u636e\u5bf9\u8c61\u7684\u64cd\u4f5c\u8f6c\u6362\u6210SQL\u8bed\u53e5\uff0c\u6839\u636e\u67e5\u8be2\u7684\u7ed3\u679c\u8f6c\u5316\u6210\u5bf9\u8c61, \u5728\u6620\u5c04\u8fc7\u7a0b\u4e2d\u6709\u6027\u80fd\u635f\u5931. ## \u6a21\u578b\u793a\u4f8b - \u6b64\u793a\u4f8b\u4e3a\u6dfb\u52a0\u4e00\u4e2a `bookstore_book` \u6570\u636e\u8868\u6765\u5b58\u653e\u56fe\u4e66 \u9986\u4e2d\u4e66\u76ee\u4fe1\u606f 1. **\u6dfb\u52a0\u4e00\u4e2abookstore\u7684app** $ python3 manage.py startapp bookstore 2. **\u6dfb\u52a0\u6a21\u578b\u7c7b\u5e76\u6ce8\u518capp** \u6a21\u578b\u7c7b\u4ee3\u7801\u793a\u4f8b # file : bookstore/models.py from django.db import models # Create your models here. class Book ( models . Model ): title = models . CharField ( \"\u4e66\u540d\" , max_length = 50 , default = '' ) price = models . DecimalField ( '\u5b9a\u4ef7' , max_digits = 7 , decimal_places = 2 , default = 0.0 ) # 00000.00 3. \u6570\u636e\u5e93\u8fc1\u79fb - \u8fc1\u79fb\u662fDjango\u540c\u6b65\u60a8\u5bf9\u6a21\u578b\u6240\u505a\u66f4\u6539(\u6dfb\u52a0\u5b57\u6bb5\uff0c\u5220\u9664\u6a21\u578b\u7b49)\u5230\u60a8\u7684\u6570\u636e\u5e93\u6a21\u5f0f\u7684\u65b9\u5f0f - \u751f\u6210\u8fc1\u79fb\u6587\u4ef6- \u6267\u884c `python manage.py makemigrations` \u5c06\u5e94\u7528\u4e0b\u7684models.py\u6587\u4ef6\u751f\u6210\u4e00\u4e2a\u4e2d\u95f4\u6587 \u4ef6\u5e76\u4fdd\u5b58\u5728 `migrations` \u6587\u4ef6\u5939\u4e2d - \u6267\u884c\u8fc1\u79fb\u811a\u672c\u7a0b\u5e8f-\u6267\u884c `python manage.py migrate`\u6267\u884c\u8fc1\u79fb\u7a0b\u5e8f\u5b9e\u73b0\u8fc1\u79fb\u3002\u5c06\u6bcf\u4e2a\u5e94\u7528\u4e0b\u7684migrations\u76ee\u5f55\u4e2d\u7684\u4e2d\u95f4\u6587\u4ef6\u540c\u6b65\u56de\u6570\u636e\u5e93 `python manage.py migrate`\u53ef\u80fd\u9047\u5230\u9519\u8bef: django.db.utils.OperationalError: ( 1044 , \"Access denied for user 'warmheart'@'%' to database 'mysitel'\" ) \u539f\u56e0\u6743\u9650\u4e0d\u591f\uff1a \u89e3\u51b3\u65b9\u6848\uff0c\u5728Mysql\u91cc\u9762\u5199\u5165\u672c\u5730\u8bbf\u95ee\u6743\u9650\uff1a `GRANT ALL PRIVILEGES ON *.* TO 'warmheart'@'%';` - [\u8bbf\u95eeMySQL\u6570\u636e\u5e93\u63d0\u793a\u6743\u9650\u4e0d\u591f\u7684\u89e3\u51b3\u65b9\u6848](https://huaweicloud.csdn.net/6335795ed3efff3090b584b7.html?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-1-116140575-blog-113163490.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-1-116140575-blog-113163490.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2) - [\u4fee\u6539mysql\u7684\u5bc6\u7801\u65f6\u9047\u5230\u95ee\u9898ERROR 1064 (42000): You have an error in your SQL syntax\uff1b check the manual that corre](https://blog.csdn.net/lic1697067085/article/details/120234287) \u5176\u4ed6 mysql\u5e38\u7528\u6307\u4ee4: $ SHOW DATABASES ; # \u8bed\u53e5\u7528\u4e8e\u5217\u51fa\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u6570\u636e\u5e93 $ flush privileges ; # \u4fdd\u5b58\u7b56\u7565 $ desc table ; # \u67e5\u770b\u8868\u7ed3\u6784 ## \u6a21\u578b\u7c7b-\u521b\u5efa \u25cf\u6a21\u578b\u7c7b-\u521b\u5efa from django.db import models class \u6a21\u578b\u7c7b\u540d ( models . Mode1 ): \u5b57\u6bb5\u540d = models . \u5b57\u6bb5\u7c7b\u578b ( \u5b57\u6bb5\u9009\u9879 ) ## \u5c0f\u7ed3 - \u6a21\u578b\u5c42\u4ecb\u7ecd - \u914d\u7f6emysql - ORM - \u521b\u5efa\u6a21\u578b\u7c7b ## \u521b\u5efa\u6a21\u578b\u7c7b\u6d41\u7a0b(\u7eed) - \u4efb\u4f55\u5173\u4e8e\u8868\u7ed3\u6784\u7684\u4fee\u6539\uff0c\u52a1\u5fc5\u5728\u5bf9\u5e94\u6a21\u578b\u7c7b.\u4e0a\u4fee\u6539 \u4f8b:\u4e3abookstore_ book\u8868\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3ainfo\u7684\u5b57\u6bb5 varchar(100) \u89e3\u51b3\u65b9\u6848 1. \u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u5bf9\u5e94\u7c7b\u5c5e\u6027 2. \u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb ## \u6a21\u578b\u7c7b- \u5b57\u6bb5\u7c7b\u578b - BooleanField() 1. \u6570\u636e\u5e93\u7c7b\u578b:tinyint(1) 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d:\u4f7f\u7528Irue\u6216Fa!se\u6765\u8868\u793a\u503c 3. \u5728\u6570\u636e\u5e93\u4e2d:\u4f7f\u75281\u62160\u6765\u8868\u793a\u5177\u4f53\u7684\u503c - CharField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar 2. \u6ce8\u610f:\u5fc5\u987b\u8981\u6307\u5b9amax_length\u53c2\u6570\u503c 3. - DateField() 1. \u6570\u636e\u5e93\u7c7b\u578b:date 2. \u4f5c\u7528:\u8868\u793a\u65e5\u671f. 3. \u53c2\u6570: 1. auto_ now:\u6bcf\u6b21\u4fdd\u5b58\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u4e3a\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:True/False)\u3002 2. auto_now_add:\u5f53\u5bf9\u8c61\u7b2c-\u6b21\u88ab\u521b\u5efa\u65f6\u81ea\u52a8\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:True/False)\u3002 3. default: \u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:\u5b57\u7b26\u4e32\u683c\u5f0f\u65f6\u95f4\u5982: '2019-6-1)\u3002 4. \u4ee5\u4e0a\u4e09\u4e2a\u53c2\u6570\u53ea\u80fd\u591a\u9009\u4e00 - DateTimeField() 1. \u6570\u636e\u5e93\u7c7b\u578b:datetime(6) 2. \u4f5c\u7528:\u8868\u793a\u65e5\u671f\u548c\u65f6\u95f4 3. \u53c2\u6570\u540cDateField - FloatField() 1. \u6570\u636e\u5e93\u7c7b\u578b:double 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d\u548c\u6570\u636e\u5e93\u4e2d\u90fd\u4f7f\u7528\u5c0f\u6570\u8868\u793a\u503c - DecimalField() 1. \u6570\u636e\u5e93\u7c7b\u578b:decimal(x,y) 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d:\u4f7f\u7528\u5c0f\u6570\u8868\u793a\u8be5\u5217\u7684\u503c 3. \u5728\u6570\u636e\u5e93\u4e2d:\u4f7f\u7528\u5c0f\u6570 4. \u53c2\u6570: - max_ digits: \u4f4d\u6570\u603b\u6570\uff0c\u5305\u62ec\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002\u8be5\u503c\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8edecimal_places. - decimal_places:\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u6570\u91cf - EmailField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar 2. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32 - IntegerField() 1. \u6570\u636e\u5e93\u7c7b\u578b:int 2. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u6574\u6570 - ImageField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar(100) 2. \u4f5c\u7528:\u5728\u6570\u636e\u5e93\u4e2d\u4e3a\u4e86\u4fdd\u5b58\u56fe\u7247\u7684\u8def\u5f84 3. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32 - TextField() 1. \u6570\u636e\u5e93\u7c7b\u578b:longtext 2. \u4f5c\u7528:\u8868\u793a\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u6570\u636e \u66f4\u591a\u7cbe\u5f69\u8bf7\u9605\u5b98\u65b9\u6587\u6863 https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types ## \u6a21\u578b\u7c7b-\u5b57\u6bb5\u9009\u9879 - \u5b57\u6bb5\u9009\u9879,\u6307\u5b9a\u521b\u5efa\u7684\u5217\u7684\u989d\u5916\u7684\u4fe1\u606f - \u5141\u8bb8\u51fa\u73b0\u591a\u4e2a\u5b57\u6bb5\u9009\u9879\uff0c\u591a\u4e2a\u9009\u9879\u4e4b\u95f4\u4f7f\u7528,\u9694\u5f00 - primary_key: \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5217\u4e3a\u4e3b\u952e\uff0c\u5982\u679c\u6307\u5b9a\u4e00\u4e2a\u5b57\u6bb5\u4e3a\u4e3b\u952e\uff0c\u5219\u6b64 \u6570\u5e93\u8868\u4e0d\u4f1a\u521b\u5efaid\u5b57\u6bb5 - blank: \u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c \u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002\u8bbe\u7f6e\u4e3a False \u65f6, \u5b57\u6bb5\u662f\u5fc5\u987b\u586b\u5199 - null: - \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5217\u503c\u5141\u8bb8\u4e3a\u7a7a\u3002 - \u9ed8\u8ba4\u4e3aFalse,\u5982\u679c\u6b64\u9009\u9879\u4e3aFalse\u5efa\u8bae\u52a0\u5165 default \u9009\u9879\u6765\u8bbe\u7f6e\u9ed8\u8ba4\u503c - default\uff1a\u8bbe\u7f6e\u6240\u5728\u5217\u7684\u9ed8\u8ba4\u503c\u5982\u679c\u5b57\u6bb5\u9009\u9879 null = False \u5efa\u8bae\u6dfb\u52a0\u6b64\u9879 - db_ index\uff1a \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u4e3a\u8be5\u5217\u589e\u52a0\u7d22\u5f15 - unique\uff1a \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5b57\u6bb5\u5728\u6570\u636e\u5e93\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u552f\u4e00(\u4e0d\u80fd \u91cd\u590d\u51fa\u73b0\u7684) - db_column\uff1a\u6307\u5b9a\u5217\u7684\u540d\u79f0\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5219\u91c7\u7528\u5c5e\u6027\u540d\u4f5c\u4e3a\u5217\u540d - verbose_ name\uff1a \u8bbe\u7f6e\u6b64\u5b57\u6bb5\u5728admin\u754c\u9762\u4ee5\u4e0a\u7684\u663e\u793a\u540d\u79f0 \u5b57\u6bb5\u9009\u9879\u6837\u4f8b #\u521b\u5efa\u4e00\u4e2a\u5c5e\u6027,\u8868\u793a\u7528\u6237\u540d\u79f0\uff0c\u957f\u5ea630\u4e2a\u5b57\u7b26,\u5fc5\u987b\u662f\u552f\u4e00\u7684,\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6dfb\u52a0 \u7d22\u5f15 name = mode1s . charFie1d ( max_1ength = 30 \uff0c unique = True \uff0c nu11 = False \uff0c db_index = True ) \u66f4\u591a\u7cbe\u5f69\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863 https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-options \u597d\u4e60\u60ef:\u4fee\u6539\u8fc7\u5b57\u6bb5\u9009\u9879{\u6dfb\u52a0\u6216\u66f4\u6539] \u5747\u8981\u6267\u884c makemigrations\u548cmigrate ## \u6a21\u578b\u7c7b-Meta\u7c7b \u4f7f\u7528\u5185\u90e8Meta\u7c7b\u6765\u7ed9\u6a21\u578b\u8d4b\u4e88\u5c5e\u6027\uff0cMeta\u7c7b\u4e0b\u6709\u5f88\u591a\u5185\u5efa\u7684\u7c7b\u5c5e \u6027\uff0c\u53ef\u5bf9\u6a21\u578b\u7c7b\u505a\u4e00\u4e9b\u63a7\u5236 \u793a\u4f8b: . # file : bookstore/models.py from django.db import models # Create your models here. class Book ( models . Model ): title = models . CharField ( \"\u4e66\u540d\" , max_length = 50 , default = '' ) price = models . DecimalField ( '\u5b9a\u4ef7' , max_digits = 7 , decimal_places = 2 , default = 0.0 ) # 00000.00 class Meta : db_table = 'book' # \u53ef\u6539\u53d8\u5f53\u524d\u6a21\u578b\u7c7b\u5bf9\u5e94\u7684\u8868\u540d ## \u4fee\u6539\u6a21\u578b\u7c7b \u6a21\u578b\u7c7b - **Book\u8868\u540dbook** - title - CharField(50)-\u4e66\u540d\u552f\u4e00 - pub - CharField(100)-\u51fa\u7248\u793e(\u975e\u7a7a - (price - DecimalField - \u56fe\u4e66\u5b9a\u4ef7 ~ \u603b\u4f4d7/\u5c0f\u6570\u70b92\u4f4d - market price -\u56fe\u4e66\u96f6\u552e\u4ef7\u603b\u4f4d7/\u5c0f\u6570\u70b92\u4f4d \u6a21\u578b\u7c7b - **Author\u8868\u540dauthor** - name - CharField(11)\u2013 \u59d3\u540d\u975e\u7a7a - age - IntegerField - \u5e74\u9f84\u9ed8\u8ba4\u503c\u4e3a 1 - email - EmailField - \u90ae\u7bb1\u5141\u8bb8\u4e3a\u7a7a ## \u5c0f\u7ed3 \u5b57\u6bb5\u9009\u9879& Meta\u5185\u90e8\u7c7b ## ORM-\u57fa\u672c\u64cd\u4f5c-\u521b\u5efa\u6570\u636e \u6570\u636e\u5e93\u7684\u8fc1\u79fb\u6587\u4ef6\u6df7\u4e71\u7684\u89e3\u51b3\u529e\u6cd5 \u6570\u636e\u5e93\u4e2ddjango_migte\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5426\u5219migrate\u4f1a\u62a5\u9519\u76ee\u5404\u5e94\u7528\u4e2d\u7684migrate\u6587\u4ef6\u5e94\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5426\u5219migrate\u4f1a\u62a5\u9519 \u89e3\u51b3\u65b9\u6848: - 1.\u5220\u9664\u6240\u6709migrations \u91cc\u6240\u6709\u7684000?_XXXX.py ( _init_.py \u9664\u5916) - 2\uff0e\u5220\u9664\u6570\u636e\u5e93: `sql> drop database mywebdb;` - 3.\u91cd\u65b0\u521b\u5efa\u6570\u636e\u5e93 sql> create datebase mywebdb default charset...; - 4.\u91cd\u65b0\u751f\u6210migrations\u91cc\u6240\u6709\u7684000?_XXXX.pypython3 manage.py makemigrations - 5.\u91cd\u65b0\u66f4\u65b0\u6570\u636e\u5e93 python3 manage.py migrate ## ORM-\u64cd\u4f5c \u57fa\u672c\u64cd\u4f5c\u5305\u62ec\u589e\u5220\u6539\u67e5\u64cd\u4f5c\uff0c\u5373(CRUD\u64cd\u4f5c) CRUD\u662f\u6307\u5728\u505a\u8ba1\u7b97\u5904\u7406\u65f6\u7684\u589e\u52a0(Create)\u3001\u8bfb\u53d6\u67e5\u8be2(Read)\u3001\u66f4\u65b0(Update)\u548c\u5220\u9664(Delete) \u5fc3 ORM CRUD\u6838\u5fc3->\u6a21\u578b\u7c7b.\u7ba1\u7406\u5668\u5bf9\u8c61 ## \u521b\u5efa\u6570\u636e \u6bcf\u4e2a\u7ee7\u627f\u81eamodels.Model\u7684\u6a21\u578b\u7c7b\uff0c\u90fd\u4f1a \u6709\u4e00\u4e2aobjects\u5bf9\u8c61\u88ab\u540c\u6837\u7ee7\u627f\u4e0b\u6765\u3002\u8fd9\u4e2a\u5bf9\u8c61\u53eb\u7ba1\u7406\u5668\u5bf9\u8c61 \u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u53ef\u4ee5\u901a\u8fc7\u6a21\u578b\u7684\u7ba1\u7406\u5668\u5b9e\u73b0 class MyMode1 (models.Mode1): MyMode1.objects.create(...) # objects\u662f\u7ba1\u7406\u5668\u5bf9\u8c61 DjangoORM\u4f7f\u7528\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u5f0f\u628a\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u8868\u793a\u6210 Python\u5bf9\u8c61 \u521b\u5efa\u6570\u636e\u4e2d\u6bcf\u4e00\u6761\u8bb0\u5f55\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 - \u65b9\u68481 MyModel.objects.create(\u5c5e\u60271=\u503c1,\u5c5e\u60272=\u503c...) - \u6210\u529f:\u8fd4\u56de\u521b\u5efa\u597d\u7684\u5b9e\u4f53\u5bf9\u8c61 - \u5931\u8d25: \u629b\u51fa\u5f02\u5e38 - \u65b9\u68482 \u521b\u5efaMyModel\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528save()\u8fdb\u884c\u4fdd\u5b58 obj = MyMode1 ( \u5c5e\u6027 = \u503c , \u5c5e\u6027 = \u503c ) obj . \u5c5e\u6027 = \u503c obj . save () Django Shell \u5728Django\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7684\u64cd\u4f5c\u9879\u76ee\u53eb `Django Shell` \u5b83\u80fd\u591f\u5728 \u4ea4\u4e92\u6a21\u5f0f\u7528\u9879\u76ee\u5de5\u7a0b\u7684\u4ee3\u7801\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c \u5229\u7528`Django Shell`\u53ef\u4ee5\u4ee3\u66ff\u7f16\u5199view\u7684\u4ee3\u7801\u6765\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c \u6ce8\u610f:\u9879\u76ee\u4ee3\u7801\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165Django shell \u542f\u52a8\u65b9\u5f0f: `python3 manage.py shell` show databases ; # \u67e5\u770b\u6570\u636e\u5e93\uff0c\u9009\u4e2d\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u5e76\u67e5\u770b\u6570\u636e\u5e93\u8868\uff0c\u5177\u4f53\u64cd\u4f5c\u547d\u4ee4\u5982\u4e0b\uff1a use xxxx ; show tables ; ## ORM-\u67e5\u8be2\u64cd\u4f5c - \u6570\u636e\u5e93\u7684\u67e5\u8be2\u9700\u8981\u4f7f\u7528\u7ba1\u7406\u5668\u5bf9\u8c61\u8fdb\u884c - \u901a\u8fc7MyModel.objects\u7ba1\u7406\u5668\u65b9\u6cd5\u8c03\u7528\u67e5\u8be2\u65b9\u6cd5 | \u65b9\u6cd5 | \u8bf4\u660e | | --------- | --------------------------------- | | all() | \u67e5\u8be2\u5168\u90e8\u8bb0\u5f55,\u8fd4\u56deQuerySet\u67e5\u8be2\u5bf9\u8c61 | | get() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u7684\u5355\u4e00\u8bb0\u5f55 | | filter() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u7684\u591a\u6761\u8bb0\u5f55 | | exclude() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u4e4b\u5916\u7684\u5168\u90e8\u8bb0\u5f55 | - all()\u65b9\u6cd5 \u7528\u6cd5: MyModel.objects.all() \u4f5c\u7528:\u67e5\u8be2MyModel\u5b9e\u4f53\u4e2d\u6240\u6709\u7684\u6570\u636e \u7b49\u540c\u4e8e select * from tabel \u8fd4\u56de\u503c: QuerySet\u5bb9\u5668\u5bf9\u8c61\uff0c\u5185\u90e8\u5b58\u653eMyModel\u5b9e\u4f8b from bookstore.models import Book books = Book . objects . a11 () for book in books : print ( \"\u4e66\u540d\" \uff0c book . title \uff0c ' \u51fa\u7248\u793e:' \uff0c book . pub ) \u53ef\u4ee5\u5728\u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49 __str__ \u65b9\u6cd5\uff0c \u81ea\u5b9a\u4e49 `QuerySet` \u4e2d\u7684\u8f93\u51fa\u683c\u5f0f \u4f8b\u5982\u5728Book\u6a21\u578b\u7c7b\u4e0b\u5b9a\u4e49\u5982\u4e0b: def __str__ ( self ): return '%S_ %S_ %S_ %S' % ( self . title , self . price , self . pub , self . market_ price ) \u5219\u5728djangoshell\u4e2d\u53ef\u5f97\u5230\u5982\u4e0b\u663e\u793a\u8f93\u51fa In [ 20 ] : Book.objects.all () 0ut [ 20 ] : <QuerySet [ <Book: Python_ 20 .00 \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e25. 00 >\uff0c<Book: Django_ 70 .00_ \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e_ 75 .00>\uff0c <Book: HTML5_ 9 0 .00_\u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e_ 105 .00>, <Book: JQuery_ 90 .00_ \u673a\u68b0\u5de5\u4e1a\u51fa \u7248\u793e_ 85 . 00 >, <Book: Linux_ 80 .00\u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e_ 65 . 00 > ] > - values('\u52171'\uff0c'\u52172'..) - \u7528\u6cd5: MyModel.objects.values(..) - \u4f5c\u7528: \u67e5\u8be2\u90e8\u5206\u5217\u7684\u6570\u636e\u5e76\u8fd4\u56de - \u7b49\u540c\u4e8e select \u52171\uff0c\u52172 from xXx - \u8fd4\u56de\u503c: QuerySet - \u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u5bb9\u5668\uff0c\u5bb9\u5668\u5185\u5b58\u5b57\u5178\uff0c\u6bcf\u4e2a\u5b57\u5178\u4ee3\u8868\u4e00\u6761\u6570\u636e, - \u683c\u5f0f\u4e3a : {'\u52171':\u503c1,'\u52172':\u503c2} - values_list('\u52171';\u5217...) - \u7528\u6cd5:MyModel.objects.values_list(...) - \u4f5c\u7528:\u8fd4\u56de\u5143\u7ec4\u5f62\u5f0f\u7684\u67e5\u8be2\u7ed3\u679c - \u7b49\u540c\u4e8eselect\u52171,\u52172 from xxx - \u8fd4\u56de\u503c:QuerySet\u5bb9\u5668\u5bf9\u8c61,\u5185\u90e8\u5b58\u653e\u5143\u7ec4 - \u4f1a\u5c06\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u5c01\u88c5\u5230\u5143\u7ec4\u4e2d\uff0c\u518d\u5c01\u88c5\u5230\u67e5\u8be2\u96c6\u5408QuenySer\u4e2d - order_by() - \u7528\u6cd5:MyModel.objects.order_by('-\u5217;\u5217\") - \u4f5c\u7528:\u4e0eall()\u65b9\u6cd5\u4e0d\u540c\uff0c\u5b83\u4f1a\u7528SQL\u8bed\u53e5\u7684ORDER BY\u5b50\u53e5\u5bf9\u67e5\u8be2\u7ed3\u679c \u8fdb\u884c\u6839\u636e\u67d0\u4e2a\u5b57\u6bb5\u9009\u62e9\u6027\u7684\u8fdb\u884c\u6392\u5e8f \u8bf4\u660e: - \u9ed8\u8ba4\u662f\u6309\u7167\u5347\u5e8f\u6392\u5e8f\uff0c\u964d\u5e8f\u6392\u5e8f\u5219\u9700\u8981\u5728\u5217\u524d\u589e\u52a0'-'\u8868\u793a ## \u5c0f\u7ed3 \u25cf\u67e5\u8be2\u65b9\u6cd5- all() \u25cf\u67e5\u8be2\u65b9\u6cd5- values() \u25cf\u67e5\u8be2\u65b9\u6cd5- values_ list() \u25cf\u67e5\u8be2\u65b9\u6cd5-order_ _by() < table border = \"l\" > < tr > < th > id </ th > < th > title </ th > < th > pub </ th > < th > price </ th > < th > market_price </ th > < th > op </ th > </ tr > {% for book in all_book %} < tr > < th > {{ book.id }} </ th > < th > {{ book.title }} </ th > < th > {{ book.pub }} </ th > < th > {{ book.price }} </ th > < th > {{ book.mark_price }} </ th > < td > < a href = \"\" > \u66f4\u65b0 </ a > < a href = \"\" > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} +----+--------+-------+------------+-----------------+ | id | title | price | mark_price | pub | +----+--------+-------+------------+-----------------+ | 1 | Python | 20 .00 | 25 .00 | \u6e05\u534e\u51fa\u7248\u793e | | 2 | HTML | 90 .00 | 100 .00 | \u6e05\u534e\u51fa\u7248\u793e | | 3 | Vuen | 20 .00 | 35 .00 | \u6e05\u534e\u51fa\u7248\u793e | +----+--------+-------+------------+-----------------+ ## ORM-\u67e5\u8be2\u64cd\u4f5c-2 > \u6761\u4ef6\u67e5\u8be2\uff0c\u600e\u4e48\u52a0\u6761\u4ef6 - filter(\u6761\u4ef6) - \u8bed\u6cd5: MyModel.objects.filter(\u5c5e\u60271=\u503c1,\u5c5e\u60272=\u503c2) - \u4f5c\u7528:\u8fd4\u56de\u5305\u542b\u6b64\u6761\u4ef6\u7684\u5168\u90e8\u7684\u6570\u636e\u96c6 - \u8fd4\u56de\u503c:QuerySet\u5bb9\u5668\u5bf9\u8c61\uff0c\u5185\u90e8\u5b58\u653eMyModel\u5b9e\u4f8b \u8bf4\u660e: \u5f53\u591a\u4e2a\u5c5e\u6027\u5728\u4e00\u8d77\u65f6\u4e3a\"\u4e0e\"\u5173\u7cfb\uff0c\u5373\u5f53 ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559782766302544/319e3eba_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559924965392641/9dfabedc_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559963190245200/f314e324_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") \u601d\u8003?\u5982\u4f55\u505a\u975e\u7b49\u503c\u7684\u8fc7\u6ee4\u67e5\u8be2\uff0c\u5373where id > 1 \u5c1d\u8bd5: Book.objects.filter(id > 1) ? ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560311810794298/6fc5ecdc_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560336738175966/de77bc00_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560413733223425/b8fd47f3_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560440059950264/4cf897b3_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") \u66f4\u591a\u7cbe\u5f69\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863: https://docs.djangoproject.com/en/2.2/ref/models/querysets/#field-lookups ## \u5c0f\u7ed3 \u6761\u4ef6\u67e5\u8be2 1. filter/exclude - QuerySet 2. get - obj - \u67e5\u8be2\u8c13\u8bcd - \u7c7b\u5c5e\u6027 + '__' + \u8c13\u8bcd ## ORM - \u66f4\u65b0\u64cd\u4f5c ## ORM - \u5220\u9664\u64cd\u4f5c ## F\u5bf9\u8c61 \u548c Q\u5bf9\u8c61 ## \u805a\u5408\u67e5\u8be2\u548c\u539f\u751f\u6570\u636e\u5e93\u64cd\u4f5c ## \u9879\u76ee\u90e8\u7f72 1. \u7528 `uWSGI` \u66ff\u4ee3 `python manage.py runserver` \u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u5668 2. \u914d\u7f6e `nginx` \u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668 3. \u7528 `nginx` \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u8def\u5f84\u89e3\u51b3\u9759\u6001\u8def\u5f84\u95ee\u9898 WSGI (Web Server Gateway Interface)Web\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u662f Python\u5e94\u7528\u7a0b\u5e8f\u6216\u6846\u67b6\u548cWeb\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4e00\u79cd\u63a5\u53e3\uff0c\u88ab\u5e7f\u6cdb\u4f7f \u7528,\u4f7f\u7528 `python manage.py runserver` \u901a\u5e38\u53ea\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e2d\u4f7f\u7528, \u5f53\u5f00\u53d1\u7ed3\u675f\u540e\uff0c\u5b8c\u5584\u7684\u9879\u76ee\u4ee3\u7801\u9700\u8981\u5728\u4e00\u4e2a\u9ad8\u6548\u7a33\u5b9a\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528WSGI\u3002 uWSGI\u662fWSGI\u7684\u4e00\u79cd, \u5b83\u5b9e\u73b0\u4e86http\u534f\u8baeWSGl\u534f\u8bae\u4ee5\u53cauwsgi\u534f\u8bae uWSGI\u529f\u80fd\u5b8c\u5584\uff0c\u652f\u6301\u534f\u8bae\u4f17\u591a\uff0c\u5728python web\u5708\u70ed\u5ea6\u6781\u9ad8 **uWSGI\u4e3b\u8981\u4ee5\u5b66\u4e60\u914d\u7f6e\u4e3a\u4e3b** ## \u914d\u7f6euWSGI \u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939/uwsgi.ini \u5982: `mysite1/mysite1/uwsgi.ini` \u6587\u4ef6\u4ee5[uwsgi]\u5f00\u5934\uff0c\u6709\u5982\u4e0b\u914d\u7f6e\u9879: \u5957\u63a5\u5b57\u65b9\u5f0f\u7684IP\u5730\u5740:\u7aef\u53e3\u53f7[\u6b64\u6a21\u5f0f \u9700\u8981\u6709nginx] `socket= 127.0.0.1:8000` Http\u901a\u4fe1\u65b9\u5f0f\u7684IP\u5730\u5740:\u7aef\u53e3\u53f7 `http = 127.0.0.1:8000` ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560795505499865/f28b933c_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") uwsgi.ini \u9879\u76ee\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 chdir = /home/tarena/.../my_project \u9879\u76ee\u4e2dwsgi.py\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u76f8\u5bf9\u4e8e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 wsgi-file = my_project/wsgi.py \u8fdb\u7a0b\u4e2a\u6570 process = 4 \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e2a\u6570 threads = 2 \u670d\u52a1\u7684pid\u8bb0\u5f55\u6587\u4ef6 pidfile = uwsgi.pid \u670d\u52a1\u7684\u76ee\u5fd7\u6587\u4ef6\u4f4d\u7f6e daemonize = uwsgi.log \u5f00\u542f\u4e3b\u8fdb\u7a0b\u7ba1\u7406\u6a21\u5f0f master = True \u6ce8\u610f: \u89e3\u51b3conda\u73af\u5883\u5b89\u88c5 uwsgi \u9519\u8bef I almost want to give up, then I find this page: https://github.com/conda-forge/uwsgi-feedstock Now you can install uwsgi though conda: conda config --add channels conda-forge conda install uwsgi \u7279\u6b8a\u8bf4\u660e: Django \u7684settings.py\u9700\u8981\u505a\u5982\u4e0b\u914d\u7f6e 1. \u4fee\u6539settings.py\u5c06 DEBUG=True \u6539\u4e3a DEBUG=False 2. \u4fee\u6539settings.py\u5c06 ALLOWED_HOSTS = [] \u6539\u4e3a ALLOWED_HOSTS = ['\u7f51\u7ad9\u57df\u540d']\u6216\u8005['\u670d\u52a1\u76d1\u542c\u7684ip\u5730\u5740'] ## uWSGI\u7684\u8fd0\u884c\u7ba1\u7406 - \u542f\u52a8uwsgi cd\u5230 uWSGI.ini \u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55 $ uwsgi --ini uwsgi.ini - \u505c\u6b62uwsgi cd\u5230 uWSGI.ini \u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55 $ uwsgi --stop uwsgi.pid - \u68c0\u6d4b\uff1a `ps aux | grep 'uwsgi'` ## \u914d\u7f6e nginx \u4fee\u6539nginx\u7684\u914d\u7f6e\u6587\u4ef6 `/etc/nginx/sites-enabled/default`; `sudo vim \u8be5\u6587\u4ef6` #\u5728server\u8282\u70b9\u4e0b\u6dfb\u52a0\u65b0\u7684Tocation\u9879\uff0c\u6307\u5411uwsgi\u7684ip\u4e0e\u7aef\u53e3\u3002 server { location / { uwsgi_pass 127.0.0.1:8000; # \u91cd\u5b9a\u5411\u5230127 .0.0.1\u7684 8000\u7aef\u53e3 include /etc/nginx/uwsgi_params; #\u5c06\u6240\u6709\u7684\u53c2\u6570\u8f6c\u5230uwsgi\u4e0b } } ## nginx \u542f\u52a8/\u505c\u6b62 $ sudo /etc/init.d/nginx start | stop | restart | status #\u6216 $ sudo service nginx start | stop | restart | status - \u542f\u52a8- sudo /etc/init.d/nginx start - \u505c\u6b62- sudo /etc/init.d/nginx stop - \u91cd\u542f- sudo /etc/init.d/nginx restart \u6ce8\u610f: nginx\u914d\u7f6e \u53ea\u8981\u4fee\u6539\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u91cd\u542f\uff0c\u5426\u5219\u914d\u7f6e\u4e0d\u751f\u6548 - `sudo nginx -t` \u68c0\u6d4b\u914d\u7f6e\u6587\u4ef6\u8bed\u6cd5 ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676611029506777917/37d3b521_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ## nginx\u914d\u7f6e\u9759\u6001\u6587\u4ef6 ## git Action \u5165\u95e8\u6559\u7a0b \u6301\u7eed\u96c6\u6210\uff08Continuous integration\uff09\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7ecf\u5e38\u8bf4\u7684CI\u3002\u5b83\u662f\u4e00\u79cd\u8f6f\u4ef6\u5f00\u53d1\u5b9e\u8df5\uff0c\u53ef\u4ee5\u8ba9\u56e2\u961f\u5728\u6301\u7eed\u7684\u57fa\u7840\u4e0a\u6536\u5230\u53cd\u9988\u5e76\u8fdb\u884c\u6539\u8fdb\uff0c\u4e0d\u5fc5\u7b49\u5230\u5f00\u53d1\u540e\u671f\u624d\u5bfb\u627e\u548c\u4fee\u590d\u7f3a\u9677\uff0c\u5e38\u8fd0\u7528\u4e8e\u8f6f\u4ef6\u7684\u654f\u6377\u5f00\u53d1\u4e2d\u3002Jenkins\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684\u6301\u7eed\u96c6\u6210\u5e73\u53f0\u5de5\u5177\u3002 \u7406\u89e3\u4e86\u6301\u7eed\u96c6\u6210\u7684\u6982\u5ff5\u4e4b\u540e\uff0c\u4e0b\u9762\u6211\u7b80\u5355\u8bb2\u4e00\u4e0b\u4f7f\u7528\u6301\u7eed\u96c6\u6210\u7684\u597d\u5904\uff1a \u63d0\u9ad8\u6548\u7387\uff0c\u51cf\u5c11\u4e86\u91cd\u590d\u6027\u5de5\u4f5c\uff1a\u4e00\u4e9b\u91cd\u590d\u6027\u7684\u5de5\u4f5c\u5199\u6210\u811a\u672c\u4ea4\u7ed9\u6301\u7eed\u96c6\u6210\u670d\u52a1\u6267\u884c\u3002 \u51cf\u5c11\u4e86\u4eba\u5de5\u5e26\u6765\u7684\u9519\u8bef\uff1a\u673a\u5668\u901a\u8fc7\u9884\u5148\u5199\u597d\u7684\u811a\u672c\u6267\u884c\u72af\u9519\u7684\u51e0\u7387\u6bd4\u4eba\u5de5\u4f4e\u5f88\u591a\u3002 \u51cf\u5c11\u7b49\u5f85\u7684\u65f6\u95f4\uff1a\u4e00\u5957\u5b8c\u5907\u7684\u6301\u7eed\u96c6\u6210\u670d\u52a1\u6db5\u76d6\u4e86\u5f00\u53d1\u3001\u96c6\u6210\u3001\u6d4b\u8bd5\u3001\u90e8\u7f72\u7b49\u5404\u4e2a\u73af\u8282\u3002 \u63d0\u9ad8\u4ea7\u54c1\u8d28\u91cf\uff1a\u5f88\u591a\u5927\u516c\u53f8\u5728\u4ee3\u7801\u63d0\u4ea4\u540e\u90fd\u4f1a\u6709\u4e00\u5957\u4ee3\u7801\u68c0\u89c6\u811a\u672c\uff08\u4fd7\u79f0\u95e8\u7981\uff09\u6765\u68c0\u67e5\u4ee3\u7801\u7684\u63d0\u4ea4\u662f\u5426\u7b26\u5408\u89c4\u8303\uff0c\u4ece\u800c\u4ece\u6e90\u5934\u904f\u5236\u95ee\u9898\u7684\u4ea7\u751f\u3002 [https://docs.github.com/zh/actions/using-workflows](https://docs.github.com/zh/actions/using-workflows) [GitHub Actions \u5165\u95e8\u6559\u7a0b](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html) [GitHub\u4e5f\u80fdCI/CD\u4e86 \u5982\u4f55\u4f7f\u7528GitHub\u7684Action\uff1f](https://blog.csdn.net/qq_41636947/article/details/121683905) [\u624b\u628a\u624b\u6559\u4f60\u5982\u4f55\u5de7\u7528Github\u7684Action\u529f\u80fd](https://www.bilibili.com/read/cv9190554) 1. workflow\uff08\u5de5\u4f5c\u6d41\u7a0b\uff09\uff1a\u6301\u7eed\u96c6\u6210\u4e00\u6b21\u8fd0\u884c\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u4e00\u4e2aworkflow\u3002 2. job\uff08\u4efb\u52a1\uff09\uff1a\u4e00\u4e2aworkflow\u7531\u4e00\u4e2a\u6216\u591a\u4e2ajobs\u6784\u6210\uff0c\u542b\u4e49\u662f\u4e00\u6b21\u6301\u7eed\u96c6\u6210\u7684\u8fd0\u884c\uff0c\u53ef\u4ee5\u5b8c\u6210\u591a\u4e2a\u4efb\u52a1\u3002 3. step\uff08\u6b65\u9aa4\uff09\uff1a\u6bcf\u4e2ajob\u7531\u591a\u4e2astep\u6784\u6210\uff0c\u4e00\u6b65\u6b65\u5b8c\u6210\u3002 4. action\uff08\u52a8\u4f5c\uff09\uff1a\u6bcf\u4e2astep\u53ef\u4ee5\u4f9d\u6b21\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u547d\u4ee4\uff08action\uff09\u3002 \u4f5c\u8005\uff1axuexiangjys https://www.bilibili.com/read/cv9190554 \u51fa\u5904\uff1abilibili - steps\u5177\u4f53\u63cf\u8ff0\u4e86\u8be5\u600e\u4e48\u6267\u884c\u811a\u672c `uses` \u662f\u4f7f\u7528\u4e86\u522b\u4eba\u5df2\u7ecf\u9884\u5148\u5b9a\u4e49\u597d\u7684\u811a\u672c\uff0c\u8fd9\u91cc\u7684 `actions/checkout@v2` \u5c31\u662f\u4e00\u4e2a\u628a\u4ed3\u5e93\u62c9\u53d6\u5230\u6700\u65b0\u7684\u811a\u672c, \u6211\u4eec\u5c06\u4ed3\u5e93\u62c9\u5230\u6700\u65b0\u540e\u5c31\u76f4\u63a5\u8fd0\u884c","title":"Django"},{"location":"Python/Django/start/#django","text":"Django\u662f\u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684Web\u5e94\u7528\u6846\u67b6,\u7531Python\u5199\u6210\u3002\u91c7\u7528\u4e86MTV\u7684\u6846\u67b6\u6a21\u5f0f,\u5373\u6a21\u578bM,\u89c6\u56feV\u548c\u6a21\u7248T\u3002 django-admin startproject mysitel cd mysitel sudo lsof -i: \u7aef\u53e3","title":"Django"},{"location":"Python/Django/start/#managepy","text":"python3 manage.py runserver\u542f\u52a8\u670d\u52a1 python3 manage.py startapp\u521b\u5efa\u5e94\u7528 python3 manage.py migrate\u6570\u636e\u5e93\u8fc1\u79fb \u76f4\u63a5\u6267\u884cpython3 manage.py\u53ef\u5217\u51fa\u6240\u6709\u7684Django\u5b50\u547d\u4ee4","title":"manage.py\u5305\u542b\u9879\u76ee\u7ba1\u7406\u7684\u5b50\u547d\u4ee4,\u5982:"},{"location":"Python/Django/start/#-","text":"\u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939- mysite1/mysite1 - __init__ : Python\u5305\u7684\u521d\u59cb\u5316\u6587\u4ef6 - wsgi.py : WEB\u670d\u52a1\u7f51\u5173\u7684\u914d\u7f6e\u6587\u4ef6- Django\u6b63\u5f0f\u542f\u52a8\u65f6\uff0c\u9700\u8981\u7528\u5230 - urls.py : \u9879\u76ee\u7684\u4e3b\u8def\u7531\u914d\u7f6e- HTTP\u8bf7\u6c42\u8fdb\u5165Django\u65f6\uff0c\u4f18\u5148\u8c03\u7528\u8be5\u6587\u4ef6 - settings.py : \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6-\u5305\u542b\u9879\u76ee\u542f\u52a8\u65f6\u9700\u8981\u7684\u914d\u7f6e","title":"\u9879\u76ee\u7ed3\u6784-\u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939"},{"location":"Python/Django/start/#-settingspy","text":"settings.py \u5305\u542b\u4e86Django\u9879\u76ee\u542f\u52a8\u7684\u6240\u6709\u914d\u7f6e\u9879 \u914d\u7f6e\u9879\u5206\u4e3a\u516c\u6709\u914d\u7f6e\u548c\u81ea\u5b9a\u4e49\u914d\u7f6e \u914d\u7f6e\u9879\u683c\u5f0f\u4f8b: BASE DIR = 'xxxx' \u516c\u6709\u914d\u7f6e-Django\u5b98\u65b9\u63d0\u4f9b\u7684\u57fa\u7840\u914d\u7f6e https://docs.djangoproject.com/en/2.2/ref/settings/","title":"\u9879\u76ee\u7ed3\u6784- settings.py"},{"location":"Python/Django/start/#-_1","text":"","title":"\u9879\u76ee \u9879\u76ee\u7ed3\u6784-\u516c\u6709\u914d\u7f6e"},{"location":"Python/Django/start/#basedir","text":"\u7528\u4e8e\u7ed1\u5b9a\u5f53\u524d\u9879\u76ee\u7684\u7edd\u5bf9\u8def\u5f84(\u52a8\u6001\u8ba1\u7b97\u51fa\u6765\u7684)\uff0c\u6240\u6709\u6587\u4ef6\u5939\u90fd\u53ef\u4ee5\u4f9d\u61d2\u6b64\u8def\u5f84","title":"BASEDIR"},{"location":"Python/Django/start/#debug","text":"\u7528\u4e8e\u914d\u7f6eDjango\u9879\u76ee\u7684\u542f\u52a8\u6a21\u5f0f,\u53d6\u503c: True\u8868\u793a\u5f00\u53d1\u73af\u5883\u4e2d\u4f7f\u7528\u5f00\u53d1\u8c03\u8bd5\u6a21\u5f0f(\u7528\u4e8e\u5f00\u53d1\u4e2d) False \u8868\u793a\u5f53\u524d\u9879\u76ee\u8fd0\u884c\u5728\u751f\u4ea7\u73af\u5883\u4e2d INSTALLED_ APPS -\u6307\u5b9a\u5f53\u524d\u9879\u76ee\u4e2d\u5b89\u88c5\u7684\u5e94\u7528\u5217\u8868 : MIDDLEWARE -\u7528\u4e8e\u6ce8\u518c\u4e2d\u95f4\u4ef6 TEMPLATES -\u7528\u4e8e\u6307\u5b9a\u6a21\u677f\u7684\u914d\u7f6e\u4fe1\u606f DATABASES -\u7528\u4e8e\u6307\u5b9a\u6570\u636e\u5e93\u7684\u914d\u7f6e\u4fe1\u606f LANGUAGE CODE -\u7528\u4e8e\u6307\u5b9a\u8bed\u8a00\u914d\u7f6e \u82f1\u6587: \"en-us\" \u4e2d\u6587: \"zh-Hans\" TIME_ZONE-\u7528\u4e8e\u6307\u5b9a\u5f53\u524d\u670d\u52a1\u5668\u7aef\u65f6\u533a \u4e16\u754c\u6807\u51c6\u65f6\u95f4: \"UTC\" \u4e2d\u56fd\u65f6\u533a: \"Asia/Shanghai\" ROOT_ _URLCONF -\u7528\u4e8e\u914d\u7f6e\u4e3b url\u914d\u7f6e'mysite1.urls' ROOT URLCONF = 'mysite 1.urls'","title":"DEBUG"},{"location":"Python/Django/start/#-_2","text":"settings.py\u4e2d\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5f00\u53d1\u4eba\u5458\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e \u914d\u7f6e\u5efa\u8bae:\u540d\u5b57\u5c3d\u91cf\u4e2a\u6027\u5316-\u4ee5\u9632\u8986\u76d6\u6389\u516c\u6709\u914d\u7f6e \u4f8b\u5982: (ALIPAY KEY= 'xxXxXX' settings.py\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u9879\uff0c\u90fd\u53ef\u4ee5\u6309\u9700\u7684\u5728\u4ee3\u7801\u4e2d\u5f15\u5165 \u5f15\u5165\u65b9\u5f0f: from django.conf import settings","title":"\u9879\u76ee\u7ed3\u6784-\u81ea\u5b9a\u4e49\u914d\u7f6e"},{"location":"Python/Django/start/#url","text":"URL - \u7ed3\u6784 - \u5b9a\u4e49\u4e00\u5373\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26Uniform Resource Locator - \u4f5c\u7528-\u7528\u6765\u8868\u793a\u4e92\u8054\u7f51\u4e0a\u67d0\u4e2a\u8d44\u6e90\u7684\u5730\u5740 - URL\u7684\u4e00\u822c\u8bed\u6cd5\u683c\u5f0f\u4e3a(\u6ce8: []\u4ee3\u8868\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u7701\u7565) : protocol :// hostname[:port] / path ?query \u25cfhttp://tts.tmooc.cn/video/showVideo?menuld =657421 &version= AID999#subject protocol (\u534f\u8bae) http://tts.tmooc.cn http\u901a\u8fc7HTTP\u8bbf\u95ee\u8be5\u8d44\u6e90\u3002 \u683c\u5f0fhttp:// https\u901a\u8fc7\u5b89\u5168\u7684HTTPS\u8bbf\u95ee\u8be5\u8d44\u6e90\u3002\u683c\u5f0fhttps:// file\u8d44\u6e90\u662f\u672c\u5730\u8ba1\u7b97\u673a.\u4e0a\u7684\u6587\u4ef6\u3002\u683c\u5f0f: file:/// hostname (\u4e3b\u673a\u540d) http://tts.tmooc.cn \u662f\u6307\u5b58\u653e\u8d44\u6e90\u7684\u670d\u52a1\u5668\u7684\u57df\u540d\u7cfb\u7edf(DNS)\u4e3b\u673a\u540d\u3001\u57df\u540d\u6216IP\u5730\u5740 port (\u7aef\u53e3\u53f7) http://tts.tmooc.cn:80 \u6574\u6570\uff0c\u53ef\u9009\uff0c\u7701\u7565\u65f6\u4f7f\u7528\u65b9\u6848\u7684\u9ed8\u8ba4\u7aef\u53e3 \u5404\u79cd\u4f20\u8f93\u534f\u8bae\u90fd\u6709\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7,\u5982http\u7684\u9ed8\u8ba4\u7aef\u53e3\u4e3a80 path (\u8def\u7531\u5730\u5740) http://tts.tmooc.cn/video/showVideo \u7531\u96f6\u6216\u591a\u4e2a\"/\"\u7b26\u53f7\u9694\u5f00\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u7528\u6765\u8868\u793a\u4e3b\u673a\u4e0a\u7684 \u4e00\u4e2a\u76ee\u5f55\u6216\u6587\u4ef6\u5730\u5740\u3002\u8def\u7531\u5730\u5740\u51b3\u5b9a\u4e86\u670d\u52a1\u5668\u7aef\u5982\u4f55\u5904\u7406\u8fd9 \u4e2a\u8bf7\u6c42 query(\u67e5\u8be2) /video/showVided?menuld=657421 &version= AID999 \u53ef\u9009\uff0c\u7528\u4e8e\u7ed9\u52a8\u6001\u7f51\u9875\u4f20\u9012\u53c2\u6570\uff0c\u53ef\u6709\u591a\u4e2a\u53c2\u6570,\u7528\u201c&\u201d\u7b26 \u53f7\u9694\u5f00\uff0c\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u548c\u503c\u7528\u201c=\" \u7b26\u53f7\u9694\u5f00\u3002 fragment (\u4fe1\u606f\u7247\u65ad) version= AID999#subject \u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6307\u5b9a\u7f51\u7edc\u8d44\u6e90\u4e2d\u7684\u7247\u65ad\u3002\u4f8b\u5982\u4e00\u4e2a\u7f51\u9875\u4e2d\u6709\u591a\u4e2a \u540d\u8bcd\u89e3\u91ca\uff0c\u53ef\u4f7f\u7528fragment\u76f4\u63a5\u5b9a\u4f4d\u5230\u67d0\u4e00\u540d\u8bcd\u89e3\u91ca\u3002","title":"URL\u548c\u89c6\u56fe"},{"location":"Python/Django/start/#url_1","text":"\u6d4f\u89c8\u5668\u5730\u5740\u680f- > http://127.0.0.1:8000/page/2003 Django \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u6839\u636eROOT_ URLCONF\u627e\u5230\u4e3b\u8def\u7531\u6587\u4ef6;\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u8be5\u6587\u4ef6\u5728\u9879\u76ee\u540c\u540d\u76ee\u5f55\u4e0b\u7684urls;\u4f8b\u5982 mysite1/mysite1/urls.py Django \u52a0\u8f7d\u4e3b\u8def\u7531\u6587\u4ef6\u4e2d\u7684urlpatterns \u53d8\u91cf[\u5305\u542b\u5f88\u591a\u8def\u7531\u7684\u6570\u7ec4] \u4f9d\u6b21\u5339\u914durlpatterns\u4e2d\u7684path\uff0c\u5339\u914d\u5230\u7b2c\u4e00 \u4e2a\u5408\u9002\u7684\u4e2d\u65ad\u540e\u7eed\u5339\u914d \u5339\u914d\u6210\u529f-\u8c03\u7528\u5bf9\u5e94\u7684\u89c6\u56fe\u51fd\u6570\u5904\u7406\u8bf7\u6c42\uff0c\u8fd4\u56de\u54cd\u5e94 \u5339\u914d\u5931\u8d25-\u8fd4\u56de404\u54cd\u5e94","title":"\u5904\u7406URL\u8bf7\u6c42"},{"location":"Python/Django/start/#-urlspy","text":"\u4e3b\u8def\u7531-urls.py\u6837\u4f8b from django.urls import path from . import views urlpatterns [ path ( 'admin/' , admin . site . urls ), path ( 'page/2003/' , views . page_ 2003 ), path ( 'page/2004/' , views . page_ 2004 ), ]","title":"\u4e3b\u8def\u7531- urls.py"},{"location":"Python/Django/start/#_1","text":"\u89c6\u56fe\u51fd\u6570\u662f\u7528\u4e8e\u63a5\u6536\u4e00\u4e2a\u6d4f\u89c8\u5668\u8bf7\u6c42(HttpRequest\u5bf9\u8c61) \u5e76\u901a\u8fc7HttpResponse\u5bf9\u8c61\u8fd4\u56de\u54cd\u5e94\u7684\u51fd\u6570\u3002 \u6b64\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u6d4f\u89c8\u5668\u8bf7\u6c42\u5e76\u6839\u636e\u4e1a\u52a1\u903b\u8f91\u8fd4\u56de\u76f8\u5e94\u7684\u54cd\u5e94\u5185\u5bb9\u7ed9\u6d4f\u89c8\u5668 \u8bed\u6cd5: def xXX_ _view ( request [, \u5176\u5b83\u53c2\u6570 .. ]): return HttpResponse\u5bf9\u8c61","title":"\u89c6\u56fe\u51fd\u6570"},{"location":"Python/Django/start/#_2","text":"\u25cfURL\u5168\u8c8c \u25cfDjango\u5904\u7406URL\u5bf9\u5e94\u8bf7\u6c42\u6d41\u7a0b \u25cf\u4e3b\u8def\u7531 \u25cf\u89c6\u56fe\u51fd\u6570","title":"\u5c0f\u7ed3"},{"location":"Python/Django/start/#-path","text":"path()\u51fd\u6570. \u5bfc\u5165- from django.urls import path \u8bed\u6cd5- path(route, views, name= None) \u53c2\u6570: route:\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5339\u914d\u7684\u8bf7\u6c42\u8def\u5f84 views:\u6307\u5b9a\u8def\u5f84\u6240\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u540d\u79f0() name:\u4e3a\u5730\u5740\u8d77\u522b\u540d\uff0c\u5728\u6a21\u677f\u4e2d\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528","title":"\u8def\u7531\u914d\u7f6e- path"},{"location":"Python/Django/start/#path","text":"\u8bed\u6cd5: <\u8f6c\u6362\u5668\u7c7b\u578b:\u81ea\u5b9a\u4e49> \u4f5c\u7528: \u82e5\u8f6c\u6362\u5668\u7c7b\u578b\u5339\u914d\u5230\u5bf9\u5e94\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u6309\u7167\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570 \u4f8b\u5b50: path('page/ ', views.xxx) \u8f6c\u6362\u5668\u7c7b\u578b \u4f5c\u7528 \u6837\u4f8b str \u5339\u914d\u9664\u4e86'/' \u4e4b\u5916\u7684\u975e\u7a7a\u5b57\u7b26\u4e32 \"v1/users/ \" \u5339\u914d /v1/users/guoxiaonao int \u5339\u914d0\u6216\u4efb\u4f55\u6b63\u6574\u6570\u3002\u8fd4\u56de\u4e00\u4e2a int \"page/ \" \u5339\u914d /page/100 slug \u5339\u914d\u4efb\u610f\u7531ASCII\u5b57\u6bcd\u6216\u6570\u5b57\u4ee5\u53ca\u8fde\u5b57\u7b26\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u77ed\u6807\u7b7e \"detail/ \" \u5339\u914d /detail/this-is-django path \u5339\u914d\u975e\u7a7a\u5b57\u6bb5,\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26'/' \"v1/users/ \u5339\u914d /v1/goods/a/b/C","title":"path\u8f6c\u6362\u5668"},{"location":"Python/Django/start/#-re_path","text":"re_ path()\u51fd\u6570 \u5728url\u7684\u5339\u914d\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u7cbe\u786e\u5339\u914d \u8bed\u6cd5: re_ path(reg, view, name=xxx) \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u547d\u540d\u5206\u7ec4\u6a21\u5f0f(?P pattern) ;\u5339\u914d\u63d0\u53d6 \u53c2\u6570\u540e\u7528\u5173\u952e\u5b57\u4f20\u53c2\u65b9\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570","title":"\u8def\u7531\u914d\u7f6e- re_path()"},{"location":"Python/Django/start/#_3","text":"\u5e8f\u53f7 \u65b9\u6cd5 \u63cf\u8ff0 1 GET \u8bf7\u6c42\u6307\u5b9a\u7684\u9875\u9762\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u5b9e\u4f53\u4e3b\u4f53\u3002 2 HEAD \u7c7b\u4f3c\u4e8eget\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u5185 \u5bb9\uff0c\u7529\u4e8e\u83b7\u53d6\u62a5\u5934 3 POST \u5411\u6307\u5b9a\u8d44\u6e90\u63d0\u4ea4\u6570\u636e\u8fdb\u884c\u5904\u7406\u8bf7\u6c42(\u4f8b\u5982\u63d0\u4ea4\u8868\u5355\u6216\u8005\u4e0a\u4f20\u6587\u4ef6)\u3002\u6570\u636e\u88ab\u5305\u542b\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002POST\u8bf7\u6c42 \u53ef\u80fd\u4f1a\u5bfc\u81f4\u65b0\u7684\u8d44\u6e90\u7684\u5efa\u7acb\u548c/\u6216\u5df2\u6709\u8d44\u6e90\u7684\u4fee\u6539\u3002 4 PUT \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u4f20\u9001\u7684\u6570\u636e\u53d6\u4ee3\u6307\u5b9a\u7684\u6587\u6863\u7684\u5185\u5bb9\u3002 5 DELETE \u8bf7\u6c42\u670d\u52a1\u5668\u5220\u9664\u6307\u5b9a\u7684\u9875\u9762\u3002 6 CONNECT HTTP/1.1\u534f\u8bae\u4e2d\u9884\u7559\u7ed9\u80fd\u591f\u5c06\u8fde\u63a5\u6539\u4e3a\u7ba1\u9053\u65b9\u5f0f\u7684\u4ee3\u7406\u670d\u52a1\u5668\u3002 7 OPTIONS \u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u770b\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 8 TRACE \u56de\u663e\u670d\u52a1\u5668\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u6216\u8bca\u65ad\u3002","title":"\u8bf7\u6c42\u65b9\u6cd5"},{"location":"Python/Django/start/#django_1","text":"\u8bf7\u6c42\u5728Django\u4e2d\u5b9e\u5219\u5c31\u662f\u89c6\u56fe\u51fd\u6570\u7684\u7b2c\u4e00-\u4e2a\u53c2\u6570\uff0c \u5373HttpRequest\u5bf9\u8c61 Django\u63a5\u6536\u5230http\u534f\u8bae\u7684\u8bf7\u6c42\u540e\uff0c\u4f1a\u6839\u636e\u8bf7\u6c42\u6570\u636e\u62a5\u6587\u521b\u5efaHttpRequest\u5bf9\u8c61 HttpRequest\u5bf9\u8c61\u901a\u8fc7\u5c5e\u6027\u63cf\u8ff0\u4e86\u8bf7\u6c42\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f","title":"Django\u4e2d\u7684\u8bf7\u6c42"},{"location":"Python/Django/start/#django_2","text":"path_ info: URL\u5b57\u7b26\u4e32 method:\u5b57\u7b26\u4e32\uff0c\u8868\u793aHTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5e38\u7528\u503c: 'GET'\u3001 'POST' GET: QueryDict\u67e5\u8be2\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542bget\u8bf7\u6c42\u65b9\u5f0f\u7684\u6240\u6709\u6570\u636e POST: QueryDict\u67e5\u8be2\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542bpost\u8bf7\u6c42\u65b9\u5f0f\u7684\u6240\u6709\u6570\u636e FILES: \u7c7b\u4f3c\u4e8e\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u6240\u6709\u7684\u4e0a\u4f20\u6587\u4ef6\u4fe1\u606f COOKIES: Python\u5b57\u5178\uff0c \u5305\u542b\u6240\u6709\u7684cookie, \u952e\u548c\u503c\u90fd\u4e3a\u5b57\u7b26\u4e32 session: \u4f3c\u4e8e\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u5f53\u524d\u7684\u4f1a\u8bdd body:\u5b57\u7b26\u4e32\uff0c\u8bf7\u6c42\u4f53\u7684\u5185\u5bb9(POST\u6216PUT) scheme :\u8bf7\u6c42\u534f\u8bae('http'/'https') request.get_ full_ path() :\u8bf7\u6c42\u7684\u5b8c\u6574\u8def\u5f84 request.META: \u8bf7\u6c42\u4e2d\u7684\u5143\u6570\u636e(\u6d88\u606f\u5934) request.META['REMOTE ADDR'] :\u5ba2\u6237\u7aefIP\u5730\u5740","title":"Django\u4e2d\u7684\u8bf7\u6c42(\u7eed)"},{"location":"Python/Django/start/#httphttp-status-code","text":"\u4e0b\u9762\u662f\u5e38\u89c1\u7684HTTP\u72b6\u6001\u7801: - 200 -\u8bf7\u6c42\u6210\u529f - 301 -\u6c38\u4e45\u91cd\u5b9a\u5411-\u8d44\u6e90(\u7f51\u9875\u7b49)\u88ab\u6c38\u4e45\u8f6c\u79fb\u5230\u5176\u5b83URL - 302 -\u4e34\u65f6\u91cd\u5b9a\u5411 - 404 -\u8bf7\u6c42\u7684\u8d44\u6e90(\u7f51\u9875\u7b49)\u4e0d\u5b58\u5728 - 500 -\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef;","title":"HTTP\u72b6\u6001\u7801\u7684\u82f1\u6587\u4e3aHTTP Status Code"},{"location":"Python/Django/start/#django_3","text":"\u6784\u9020\u51fd\u6570\u683c\u5f0f: HttpResponse(content=\u54cd\u5e94\u4f53\uff0ccontent_type= \u54cd\u5e94\u4f53\u6570\u636e\u7c7b\u578b(default = html), status=\u72b6\u6001\u7801) \u4f5c\u7528: \u5411\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u8fd4\u56de\u54cd\u5e94\uff0c\u540c\u65f6\u643a\u5e26\u54cd\u5e94\u4f53\u5185\u5bb9 \u5e38\u7528\u7684Content-Type\u5982\u4e0b 'text/htm]' (\u9ed8\u8ba4\u7684\uff0chtmI\u6587\u4ef6) 'text/plain' (\u7eaf\u6587\u672c) 'text/css' (css\u6587\u4ef6) 'text/javascript' (js\u6587\u4ef6) 'multipart/form-data' (\u6587\u4ef6\u63d0\u4ea4) 'application/json' (json\u4f20\u8f93) 'application/xml' (xml\u6587\u4ef6)","title":"Django\u4e2d\u7684\u54cd\u5e94\u5bf9\u8c61"},{"location":"Python/Django/start/#httpresponse","text":"\u7c7b\u578b \u4f5c\u7528 \u72b6\u6001\u7801 HttpResponseRedirect \u91cd\u5b9a\u5411 302 HttpResponseNotModified \u672a\u4fee\u6539 304 HttpResponseBadRequest \u9519\u8bef\u8bf7\u6c42 400 HttpResponseNotFound \u6ca1\u6709\u5bf9\u5e94\u7684\u8d44\u6e90 404 HttpResponseForbidden \u8bf7\u6c42\u88ab\u7981\u6b62 403 HttpResponseServerError \u670d\u52a1\u5668\u9519\u8bef 500","title":"HttpResponse\u5b50\u7c7b"},{"location":"Python/Django/start/#getpost","text":"\u65e0\u8bba\u662fGET\u8fd8\u662fPOST\uff0c\u7edf\u4e00\u90fd\u7531\u89c6\u56fe\u51fd\u6570\u63a5\u6536\u8bf7\u6c42\uff0c\u901a\u8fc7\u5224\u65adrequest.method\u533a\u5206\u5177\u4f53\u7684\u8bf7\u6c42\u52a8\u4f5c \u6837\u4f8b: if request . method == 'GET' : \u5904\u7406GET\u8bf7\u6c42\u65f6\u7684\u4e1a\u52a1\u903b\u8f91 elif request . method == ' POST' : \u5904\u7406POST\u8bf7\u6c42\u7684\u4e1a\u52a1\u903b\u8f91 else : \u5176\u4ed6\u8bf7\u6c42\u4e1a\u52a1\u903b\u8f91 GET\u8bf7\u6c42\u52a8\u4f5c\uff0c - -\u822c\u7528\u4e8e\u5411 \u670d\u52a1\u5668\u83b7\u53d6\u6570\u636e \u80fd\u591f\u4ea7\u751fGET\u8bf7\u6c42\u7684\u573a\u666f: \u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165URL,\u56de\u8f66\u540e <a href=\"\u5730\u5740?\u53c2\u6570=\u503c&\u53c2\u6570=\u503c\" > form\u8868\u5355\u4e2d\u7684method\u4e3aget GET\u8bf7\u6c42\u65b9\u5f0f\u4e2d\uff0c\u5982\u679c\u6709\u6570\u636e\u9700\u8981\u4f20\u9012\u7ed9\u670d\u52a1\u5668\uff0c\u901a\u5e38\u4f1a\u7528 \u67e5\u8be2\u5b57\u7b26\u4e32(Query String)\u4f20\u9012 [\u6ce8\u610f:\u4e0d\u8981\u4f20\u9012\u654f\u611f\u6570\u636e] URL\u683c\u5f0f: xxx?\u53c2\u6570\u540d1=\u503c1&\u53c2\u6570\u540d2=\u503c2... - \u5982: http://127.0.0.1:8000/page1?a= 100&b=200 \u670d\u52a1\u5668\u7aef\u63a5\u6536\u53c2\u6570 \u83b7\u53d6\u5ba2\u6237\u7aef\u8bf7\u6c42GET\u8bf7\u6c42\u63d0\u4ea4\u7684\u6570\u636e_","title":"GET\u8bf7\u6c42\u548cPOST\u8bf7\u6c42"},{"location":"Python/Django/start/#get","text":"\u65b9\u6cd5\u793a\u4f8b: request . GET [ '\u53c2\u6570\u540d' ] # QueryDict request . GET . get ( '\u53c2\u6570\u540d' \uff0c '\u9ed8\u8ba4\u503c' ) request . GET . getlist ( '\u53c2\u6570\u540d' ) # mypage?a=100&b=200&C= 300&b=400 # request. GET=QueryDict({'a':['100'] \uff0c'b':[ ' 200', '400']\uff0c'c':[' 300'] # a = request.GET[' a'] # b = request.GET.getlist('b')","title":"GET\u5904\u7406"},{"location":"Python/Django/start/#post","text":"POST\u8bf7\u6c42\u52a8\u4f5c\uff0c-\u822c\u7528\u4e8e\u5411\u670d\u52a1\u5668\u63d0\u4ea4\u5927\u91cf/\u9690\u79c1\u6570\u636e\u6570 \u636e -\u5ba2\u6237\u7aef\u901a\u8fc7\u8868\u5355\u7b49POST\u8bf7\u6c42\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u670d\u52a1\u5668\u7aef\uff0c\u5982: < form method = \" post' actign=\" / 1ogin \" > \u59d3\u540d: < input type = \"text\" name = \" username\" > < input type = ' submit' value = '\u767b\u9646 ' > </ form > </ html >","title":"POST\u5904\u7406"},{"location":"Python/Django/start/#django_4","text":"","title":"Django\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u6a21\u677f\u5c42"},{"location":"Python/Django/start/#templates","text":"\u521b\u5efa\u6a21\u677f\u6587\u4ef6\u5939<\u9879\u76ee\u540d>/templates \u5728settings.py\u4e2dTEMPLATES\u914d\u7f6e\u9879 BACKEND :\u6307\u5b9a\u6a21\u677f\u7684\u5f15\u64ce DIRS: \u6a21\u677f\u7684\u641c\u7d22\u76ee\u5f55(\u53ef\u4ee5\u662f\u4e00-\u4e2a\u6216\u591a\u4e2a) APP_DIRS:\u662f\u5426\u8981\u5728\u5e94\u7528\u4e2d\u7684templates\u6587\u4ef6\u5939\u4e2d\u641c\u7d22\u6a21\u677f\u6587\u4ef6 OPTIONS :\u6709\u5173\u6a21\u677f\u7684\u9009\u9879 \u914d\u7f6e\u9879\u4e2d\u9700\u8981\u4fee\u6539\u90e8\u5206 \u8bbe\u7f6e DIRS - \"DIRS': [os.path.join(BASE_ DIR, 'templates')], \u5728\u89c6\u56fe\u51fd\u6570\u4e2d: from django. shortcuts import render return render ( request , '\u6a21\u677f\u6587\u4ef6\u540d' \uff0c \u5b57\u5178\u6570\u636e )","title":"\u6a21\u677f\u914d\u7f6e TEMPLATES"},{"location":"Python/Django/start/#_4","text":"\u89c6\u56fe\u51fd\u6570\u4e2d\u53ef\u4ee5\u5c06Python\u53d8\u91cf\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u4f20\u9012\u5230\u6a21\u677f \u6837\u4f8b: def xXx_ _vi ew ( request ) dic = { \"\u53d8\u91cf1\" : \"\u503c1\" \uff0c \"\u53d8\u91cf2\" : \"\u503c2\" \uff0c } return render ( request \uff0c 'xxx.html' , dic ) \u6a21\u677f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528{{\u53d8\u91cf\u540d}}\u7684\u8bed\u6cd5\u8c03\u7528\u89c6\u56fe\u4f20\u8fdb\u6765\u7684\u53d8\u91cf","title":"\u89c6\u56fe\u5c42\u4e0e\u6a21\u677f\u5c42\u4e4b\u95f4\u7684\u4ea4\u4e92"},{"location":"Python/Django/start/#-_3","text":"\u89c6\u56fe\u51fd\u6570\u4e2d\u53ef\u4ee5\u5c06Python\u53d8\u91cf\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u4f20\u9012\u5230\u6a21\u677f\u4e0a \u6837\u4f8b: def xxx_view ( request ) dic , = { \"\u53d8\u91cf1\" : \"\u503c1\" , \"\u53d8\u91cf2\" : \"\u503c2\" , } return render ( request \uff0c ' xxx.htm1' \uff0c dict ) \u80fd\u4f20\u9012\u5230\u6a21\u677f\u4e2d\u7684\u6570\u636e\u7c7b\u578b str \u5b57\u7b26\u4e32 int- \u6574\u578b list -\u6570\u7ec4 tuple -\u5143\u7ec4 dict -\u5b57\u5178 func-\u65b9\u6cd5 obj-\u7c7b\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u53d8\u91cf\u8bed\u6cd5 {{\u53d8\u91cf\u540d}} {{\u53d8\u91cf\u540d.index }} {{\u53d8\u91cf\u540d.key}} {{\u5bf9\u8c61.\u65b9\u6cd5} {{\u51fd\u6570\u540d}} \u4f5c\u7528:\u5c06\u4e00\u4e9b\u670d\u52a1\u5668\u7aef\u7684\u529f\u80fd\u5d4c\u5165\u5230\u6a21\u677f\u4e2d\uff0c\u4f8b\u5982\u6d41\u7a0b\u63a7\u5236\u7b49 \u6807\u7b7e\u8bed\u6cd5 { % \u6807\u7b7e \u3001 % } { % \u7ed3\u675f\u6807\u7b7e % } if\u6807\u7b7e \u8bed\u6cd5: { % if\u6761\u4ef6\u8868\u8fbe\u5f0f1 % } ... { % elif\u6761\u4ef6\u8868\u8fbe\u5f0f2 % } ... { % elif\u6761\u4ef6\u8868\u8fbe\u5f0f3 % } ... { % eIse % } ... { % endif % } \u6ce8\u610f: if\u6761\u4ef6\u8868\u8fbe\u5f0f\u91cc\u53ef\u4ee5\u7528\u7684\u8fd0\u7b97\u7b26==,!=, <,>, <=,>=, in, not in, is, is not, not\u3001 and\u3001or \u5728if\u6807\u8bb0\u4e2d\u4f7f\u7528\u5b9e\u9645\u62ec\u53f7\u662f\u65e0\u6548\u7684\u8bed\u6cd5\u3002\u5982\u679c\u60a8\u9700\u8981\u5b83\u4eec\u6307\u793a\u4f18\u5148\u7ea7\uff0c\u5219\u5e94\u4f7f\u7528\u5d4c\u5957\u7684if\u6807\u8bb0\u3002","title":"\u6a21\u677f\u5c42-\u53d8\u91cf\u548c\u6807\u7b7e"},{"location":"Python/Django/start/#_5","text":"\u5b9a\u4e49:\u5728\u53d8\u91cf\u8f93\u51fa\u65f6\u5bf9\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u5904\u7406 \u4f5c\u7528:\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fc7\u6ee4\u5668\u6765\u6539\u53d8\u53d8\u91cf\u7684\u8f93\u51fa\u663e\u793a \u8bed\u6cd5: {{\u53d8\u91cf|\u8fc7\u6ee4\u56681:\u53c2\u6570\u503c1' | \u8fc7\u6ee4\u56682:\u53c2\u6570\u503c2' .. }} \u5b98\u65b9\u6587\u6863: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/ \u5e38\u7528\u8fc7\u6ee4\u5668 | \u8fc7\u6ee4\u5668 | \u8bf4\u660e | | ----------------- | ------------------------------------------------------------------------------------------- | | lower | \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5168\u90e8\u5c0f\u5199\u3002 | | upper | \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f | | safe | \u9ed8\u8ba4\u4e0d\u5bf9\u53d8\u91cf\u5185\u7684\u5b57\u7b26\u4e32\u8fdb\u884chtmI\u8f6c\u4e49 | | add: \"n\" | \u5c06value\u7684\u503c\u589e\u52a0n | | truncatechars:'n' | \u5982\u679c\u5b57\u7b26\u4e32\u5b57\u7b26\u591a\u4e8e\u6307\u5b9a\u7684\u5b57\u7b26\u6570\u91cf,\u90a3\u4e48\u4f1a\u88ab\u622a\u65ad\u3002\u622a\u65ad\u7684\u5b57\u7b26\u4e32\u5c06\u4ee5\u53ef\u7ffb\u8bd1\u7684\u7701\u7565\u53f7\u5e8f\u5217....\u7ed3\u5c3e\u3002 |","title":"\u6a21\u677f\u8fc7\u6ee4\u5668"},{"location":"Python/Django/start/#url_2","text":"\u7edd\u5bf9\u5730\u5740: http://127.0.0.1:8000/page/1 \u76f8\u5bf9\u5730\u5740: '/page/1' - '' \u5f00\u5934\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u5f53\u524d\u5730\u5740\u680f \u91cc\u7684\u534f\u8bae\uff0cip\u548c\u7aef\u53e3\u52a0\u4e0a\u8fd9\u4e2a\u5730\u5740\uff0c\u4f5c\u4e3a\u6700\u7ec8\u8bbf\u95ee\u5730\u5740\uff0c\u5373\u5982\u679c\u5f53 \u524d\u9875\u9762\u5730\u5740\u680f\u4e3ahttp://127.0.0.1:8000/page/3;\u5f53\u524d\u76f8\u5bf9\u5730\u5740\u6700\u7ec8 \u7ed3\u679c\u4e3ahttp://127.0.0.1:8000 + /page/1 'page/1'- \u6ca1\u6709/' \u5f00\u5934\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u6d4f\u89c8\u5668\u4f1a\u6839\u636e\u5f53\u524d url\u7684\u6700\u540e-\u4e00\u4e2a / \u4e4b\u524d\u7684\u5185\u5bb9\u52a0\u4e0a\u8be5\u76f8\u5bf9\u5730\u5740\u4f5c\u4e3a\u6700\u7ec8\u8bbf\u95ee\u5730\u5740\uff0c\u4f8b \u5982\u5f53\u524d\u5730\u5740\u680f\u5730\u5740\u4e3ahttp://127.0.0.1:8000/topic / detail; \u5219\u8be5\u76f8\u5bf9 \u5730\u5740\u6700\u7ec8\u7ed3\u679c\u4e3ahttp://127.0.0.1:8000/topic/ + page/1","title":"URL\u89e3\u6790"},{"location":"Python/Django/start/#url_3","text":"url\u53cd\u5411\u89e3\u6790\u662f\u6307\u5728\u89c6\u56fe\u6216\u6a21\u677f\u4e2d\uff0c\u7528path\u5b9a\u4e49\u7684\u540d\u79f0\u6765\u52a8\u6001\u67e5\u627e \u6216\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u8def\u7531 path\u51fd\u6570\u7684\u8bed\u6cd5 path(route, views, name=\"\u522b\u540d\") path('page', views.page_view, name='page_url') \u6839\u636epath\u4e2d\u7684name='\u5173\u952e\u5b57\u4f20\u53c2\u7ed9url\u786e\u5b9a\u4e86\u4e2a\u552f\u4e00\u786e\u5b9a\u7684\u540d\u5b57\uff0c\u5728\u6a21\u677f\u6216\u89c6\u56fe\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u540d\u5b57\u53cd\u5411\u63a8\u65ad\u51fa\u6b64url\u4fe1\u606f \u6a21\u677f\u4e2d-\u901a\u8fc7ur|\u6807\u7b7e\u5b9e\u73b0\u5730\u5740\u7684\u53cd\u5411\u89e3\u6790 { % ur ] '\u522b\u540d' % } { % ur ] \u522b\u540d ' ' \u53c2\u6570\u503c1 ' ' \u53c2\u6570\u503c2 ' %} ex : {% ur] ' pagen ' ' 400 ' %} {% ur] ' person ' age=' 18 ' name=' gxn ' % } ## url\u53cd\u5411\u89e3\u6790(\u7eed1) \u5728\u89c6\u56fe\u51fd\u6570\u4e2d->\u53ef\u8c03\u7528django\u4e2d\u7684reverse\u65b9\u6cd5\u8fdb\u884c\u53cd\u5411 from django.ur1s import reverse reverse ( '\u522b\u540d' \uff0c args = [] \uff0c kwargs = {}) ex : print ( reverse ( ' pagen' , args = [ 300 ] )) print ( reverse ( ' person' \uff0c kwargS = { ' name' : 'xixi' , 'age' : 18 })) ## \u5c0f\u7ed3 - \u8bf7\u6c42(request)\u548c\u54cd \u5e94(HttpResponse) - GET/POST\u5904\u7406- request.GET/POST - MVC\u548cMTV - \u6a21\u677f\u5c42\u57fa\u7840\u914d\u7f6e - \u6a21\u677f\u53d8\u91cf/\u6807\u7b7e/\u8fc7\u6ee4\u5668/\u7ee7\u627f - url\u53cd\u5411\u89e3\u6790 ## \u9759\u6001\u6587\u4ef6 \u9759\u6001\u6587\u4ef6\u914d\u7f6e- settings.py\u4e2d[\u8be5\u914d\u7f6e\u9ed8\u8ba4\u5b58\u5728] 1. \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u8bbf\u95ee\u8def\u5f84 - \u901a\u8fc7\u54ea\u4e2aur|\u5730\u5740\u627e\u9759\u6001\u6587\u4ef6 - STATIC URL = '/static/' - \u8bf4\u660e: \u6307\u5b9a\u8bbf\u95ee\u9759\u6001\u6587\u4ef6\u65f6\u662f\u9700\u8981\u901a\u8fc7/static/xxx\u6216 http://127.0.0.1:8000/static/xxx [xxx\u8868\u793a\u5177\u4f53\u7684\u9759\u6001\u8d44\u6e90\u4f4d\u7f6e] 2. \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u5b58\u50a8\u8def\u5f84 `STATICELES_DIRS` STATICFILES_DIRS \u4fdd\u5b58\u7684\u662f\u9759\u6001\u6587\u4ef6\u5728\u670d\u52a1\u5668\u7aef\u7684\u5b58\u50a8\u4f4d\u7f6e # file: setting.py STATICFILES_DIRS = ( os.path.join ( BASE_DIR, \"static\" ) , ) ## \u9759\u6001\u6587\u4ef6\u8bbf\u95ee(\u7eed) \u6a21\u677f\u4e2d\u8bbf\u95ee\u9759\u6001\u6587\u4ef6- img\u6807\u7b7e\u4e3a\u4f8b \u65b9\u68482 \u901a\u8fc7{%static%}\u6807\u7b7e\u8bbf\u95ee\u9759\u6001\u6587\u4ef6 1. \u52a0\u8f7d static - {% load static %} 2. \u4f7f\u7528\u9759\u6001\u8d44\u6e90- {% static '\u9759\u6001\u8d44\u6e90\u8def\u5f84' %} \u793a\u4f8b < img src = \"{% static 'images/lena.jpg' %}\" > ## Django \u5e94\u7528\u5206\u5e03\u5f0f\u8def\u7531 ![\u4ec0\u4e48\u662f\u5e94\u7528?](https://foruda.gitee.com/images/1676475979524645667/45b27197_10213136.png \"\u4ec0\u4e48\u662f\u5e94\u7528?\") ### \u521b\u5efa\u5e94\u7528 1. \u6b65\u9aa41: \u7528manage.py\u4e2d\u7684\u5b50\u547d\u4ee4 `startapp` \u521b\u5efa\u5e94\u7528\u6587\u4ef6\u5939 `python3 manage.py startapp music` 2. \u6b65\u9aa42: \u5728settings.py\u7684 `INSTALLED_APPS` \u5217\u8868\u4e2d\u914d\u7f6e\u5b89\u88c5\u6b64\u5e94\u7528 settings.py\u914d\u7f6e\u6837\u4f8b INSTALLED_APPS = [ # .... 'user' , # \u7528\u6237\u4fe1\u606f\u6a21\u5757 'music' , # \u97f3\u4e50\u6a21\u5757 ] \u521b\u5efa\u540e \u251c\u2500\u2500 music \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations # M: DB \u6570\u636e\u5e93 \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py # M: DB \u6a21\u578b\u5c42 \u2502 \u251c\u2500\u2500 tests.py # \u6d4b\u8bd5\u6a21\u5757 \u2502 \u2514\u2500\u2500 views.py # V: \u5e94\u7528\u89c6\u56fe ![\u5206\u5e03\u5f0f\u8def\u7531](https://foruda.gitee.com/images/1676476577884293103/b1bf5d48_10213136.png \"\u5206\u5e03\u5f0f\u8def\u7531\") ## \u914d\u7f6e\u5206\u5e03\u5f0f\u8def\u7531 ### \u6b65\u9aa4 1 - \u4e3b\u8def\u7531\u4e2d\u8c03\u7528include\u51fd\u6570 - \u8bed\u6cd5: `include('app\u540d \u5b57.url\u6a21\u5757\u540d')` - \u4f5c\u7528:\u7528\u4e8e\u5c06\u5f53\u524d\u8def\u7531\u8f6c\u5230\u5404\u4e2a\u5e94\u7528\u7684\u8def\u7531\u914d\u7f6e\u6587\u4ef6\u7684urlpatterns \u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406 \u793a\u4f8b\uff1a \u4ee5 `http://127.0.0.1:8000/music/index` \u4e3a\u4f8b: from django.urls import path , include from . import views urlpatterns = [ path ( 'admin/' \uff0c admin . site . urls ) , path ( 'test static' \uff0c views . test_static ) , path ( 'music/' , include ( 'music.urls' ) ) ] ### \u6b65\u9aa42 - \u5e94\u7528\u4e0b\u914d\u7f6e urls.py \u5e94\u7528\u4e0b\u624b\u52a8\u521b\u5efa uris.py \u6587\u4ef6 \u5185\u5bb9\u7ed3\u6784\u540c\u4e3b\u8def\u7531\u5b8c\u5168\u4e00\u6837 from django.urls import path from . import views urlpatterns = [ #http://127.0.0.1:8000/music/index path ( 'index' \uff0c views . index_view ) ] ## \u5e94\u7528\u5185\u90e8\u53ef\u4ee5\u914d\u7f6e\u6a21\u677f\u76ee\u5f55 1. \u5e94\u7528\u4e0b\u624b\u52a8\u521b\u5efa `templates` \u6587\u4ef6\u5939 N 2. settings.py\u4e2d \u5f00\u542f\u5e94\u7528\u6a21\u677f\u529f\u80fd `TEMPLATE\u914d\u7f6e\u9879\u4e2d\u7684'APP_DIRS'\u503c\u4e3aTrue\u5373\u53ef` \u5e94\u7528\u4e0b `templates` \u548c\u5916\u5c42 `templates` \u90fd\u5b58\u5728\u65f6\uff0cdjango \u67e5\u627e\u6a21\u677f\u89c4\u5219 1. \u4f18\u5148\u67e5\u627e\u5916\u5c42 `templates` \u76ee\u5f55\u4e0b\u7684\u6a21\u677f 2. \u6309 `INSTALLED_APPS` \u914d\u7f6e\u4e0b\u7684\u5e94\u7528\u987a\u5e8f\u9010\u5c42\u67e5\u627e ## \u5c0f\u7ed3 - \u5e94\u7528 - \u521b\u5efa - \u6ce8\u518c - \u5206\u5e03\u5f0f\u8def\u7531 - \u4e3b\u8def\u7531 - include - \u5e94\u7528\u4e0burls.py\u7f16\u5199 urlpatterns ## \u6a21\u578b\u5c42 ![MTV](https://foruda.gitee.com/images/1676478089132948278/958ced12_10213136.png \"MTV\") ## Django\u914d\u7f6emysq| - \u5b89\u88c5mysqlclient [\u7248\u672cmysqlclient 1.3.13\u4ee5\u4e0a] - \u5b89\u88c5\u524d\u786e\u8ba4ubuntu\u662f\u5426\u5df2\u5b89\u88c5`python3-dev` \u548c`default-libmysqlclient-dev` 1. `sudo apt list --installed|grep -E 'libmysqlclient-dev|python3-dev'` . 2. \u82e5\u547d\u4ee4\u65e0\u8f93\u51fa\u5219\u9700\u8981\u5b89\u88c5 - `sudo apt-get install python3-dev default-libmysqlclient-dev` `sudo pip3 install mysqlclient` \u6ce8\u610f\uff1a`conda \u73af\u5883\u76f4\u63a5\u7528 conda install mysqlclient \u5c31\u597d` \u68c0\u6d4b\u662f\u5426\u88c5\u597d `mysqlclient` \u5305\uff1a ( qqhr ) warmheart@VM-12-12-ubuntu:~/learn_django$ sudo pip3 freeze | grep -i 'mysql' mysqlclient == 2 .1.1 ## mysql\u7684\u5b89\u88c5\uff08linux\u3001ubuntu20.04\uff09 - \u7b2c\u4e00\u6b65 \u5b89\u88c5: - \u6b65\u9aa4\u4e00\uff1b \u6253\u5f00\u7ba1\u7406\u5458\u6743\u9650+\u8f93\u5165\u5bc6\u7801\uff1b $ sudo su - \u6b65\u9aa4\u4e8c\uff1b\u5b89\u88c5 $ apt install mysql-server - \u7b2c\u4e8c\u6b65 \u5b89\u88c5\u5b8c\u67e5\u770bmysql\u542f\u52a8\u72b6\u6001: $ systemctl status mysql \u6216\u8005 $ service mysql status - \u7b2c\u4e09\u6b65 \u76f4\u63a5\u4f7f\u7528root\u8d26\u6237\u767b\u5f55\u7136\u540e\u4fee\u6539\u5bc6\u7801\u5c31\u53ef\u4ee5\u4e86\uff0c\u53ef\u4ee3\u66ff\u4e0b\u9762\u7b2c3\u6b65\u7684\u64cd\u4f5c\uff1a 1. `sudo mysql -uroot -p ` \u56de\u8f66\u8f93\u5165`\u5bc6\u7801` \u767b\u5f55 2. \u4fee\u6539\u5bc6\u7801\uff1a`alter user 'root'@'localhost' identified with mysql_native_password by '\u8fd9\u91cc\u662f\u5bc6\u7801';` \u6ce8\u610f\uff1a`;`\u53f7\u7ed3\u5c3e \u3002 3. \u6267\u884c\uff1a`flush privileges;`\uff1b\u4f7f\u5bc6\u7801\u751f\u6548\uff0c\u7136\u540e\u4f7f\u7528root\u7528\u6237\u767b\u5f55\u3002 - \u7b2c\u56db\u6b65 \u521b\u5efa\u81ea\u5df1\u7684\u7528\u6237\uff1a create user '\u7528\u6237\u540d' @ '%' identified with mysql_native_password by '\u5bc6\u7801' ; grant all privileges on *.* to '\u7528\u6237' @ '%' with grant option ; flush privileges ; # \u4fdd\u5b58\u7b56\u7565 # \u5b8c\u6210\u4e86\uff0c\u76f4\u63a5\u8fdc\u7a0b\u767b\u5f55\u3002 \u6ce8\u610f\uff1a \"localhost\"\uff0c\u662f\u6307\u8be5\u7528\u6237\u53ea\u80fd\u5728\u672c\u5730\u767b\u5f55\uff0c\u4e0d\u80fd\u5728\u53e6\u5916\u4e00\u53f0\u673a\u5668\u4e0a\u8fdc\u7a0b\u767b\u5f55\u3002\u5982\u679c\u60f3\u8fdc\u7a0b\u767b\u5f55\u7684\u8bdd\uff0c\u5c06\"localhost\"\u6539\u4e3a\"%\"\uff0c\u8868\u793a\u5728\u4efb\u4f55\u4e00\u53f0\u7535\u8111\u4e0a\u90fd\u53ef\u4ee5\u767b\u5f55\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u67d0\u53f0\u673a\u5668\u53ef\u4ee5\u8fdc\u7a0b\u767b\u5f55\u3002 - \u5176\u4ed6 \u6570\u636e\u5e93\u7684\u542f\u52a8|\u91cd\u542f|\u5173\u673a\u547d\u4ee4 \uff1b | \u6570\u636e\u5e93\u7684 | \u542f\u52a8 | \u91cd\u542f | \u5173\u673a\u547d\u4ee4 | | ------------------- | ----- | ------- | -------- | | sudo service mysql | strat | restart | stop | \u53ca\u662f `sudo service mysql start/restart/stop` \u76f8\u5173\u6559\u7a0b: - [Ubuntu 20.04 \u5b89\u88c5mysql\u6570\u636e\u5e93\u6559\u7a0b](https://blog.csdn.net/cyz141001/article/details/119028923) \u6216\u8005 systemctl status mysql.service ## Django\u914d\u7f6emysql (\u7eed) - 1. \u521b\u5efa\u6570\u636e\u5e93,\u8fdb\u5165mysql\u6570\u636e\u5e93\u6267\u884c - `create database \u6570\u636e\u5e93\u540d default charset utf8;` - `\u901a\u5e38\u6570\u636e\u5e93\u540d\u8ddf\u9879\u76ee\u540d\u4fdd\u6301\u4e00\u81f4` - 2. settings.py\u91cc\u8fdb\u884c\u6570\u636e\u5e93\u7684\u914d\u7f6e\u4fee\u6539 1. `DATABASES` \u914d\u7f6e\u9879\u7684\u5185\u5bb9\uff0c\u7531 `'ENGINE': 'django.db.backends.sqlite3'` \u53d8\u4e3a `'ENGINE': 'django.db.backends.mysql'`, 2. \u6dfb\u52a0 \u5176\u4ed6\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b: DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'mysitel' , # \u6570\u636e\u5e93\u540d 'USER' : 'warmheart' , 'PASSWORD' : '13467947371fwFW!' , 'HOST' : '127.0.0.1' , 'PORT' : '3306' } } ## \u4ec0\u4e48\u662f\u6a21\u578b - \u6a21\u578b\u662f\u4e00\u4e2aPython\u7c7b,\u5b83\u662f\u7531django.db.models.Model\u6d3e\u751f\u51fa\u7684\u5b50\u7c7b\u3002 - \u4e00\u4e2a\u6a21\u578b\u7c7b\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5f20\u6570\u636e\u8868 - \u6a21\u578b\u7c7b\u4e2d\u6bcf\u4e00\u4e2a\u7c7b\u5c5e\u6027\u90fd\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u3002 - \u6a21\u578b\u662f\u6570\u636e\u4ea4\u4e92\u7684\u63a5\u53e3\uff0c\u662f\u8868\u793a\u548c\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u65b9\u6cd5\u548c\u65b9\u5f0f ## ORM\u6846\u67b6 ![ORM](https://foruda.gitee.com/images/1676482006679819467/afffe6cf_10213136.png \"ORM\") - \u5b9a\u4e49: ORM (Object Relational Mapping) \u5373\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff0c\u5b83 \u662f\u4e00\u79cd\u7a0b\u5e8f\u6280\u672f\uff0c\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u548c\u5bf9\u8c61\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\uff0c\u4ece\u800c \u907f\u514d\u901a\u8fc7SQL\u8bed\u53e5\u64cd\u4f5c\u6570\u636e\u5e93 - \u4f5c\u7528: 1. \u5efa\u7acb\u6a21\u578b\u7c7b\u548c\u8868\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002 2. \u6839\u636e\u8bbe\u8ba1\u7684\u6a21\u578b\u7c7b\u751f\u6210\u6570\u636e\u5e93\u4e2d\u7684\u8868\u683c\u3002 3. \u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u5e93\u7684\u5207\u6362\u3002 ## ORM\u6846\u67b6(\u7eed) ### \u4f18\u70b9: - \u53ea\u9700\u8981\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u4e0d\u9700\u8981\u9762\u5411\u6570\u636e\u5e93\u7f16\u5199\u4ee3\u7801. - \u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u90fd\u8f6c\u5316\u6210\u5bf9\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u64cd\u4f5c. - \u4e0d\u7528\u7f16\u5199\u5404\u79cd\u6570\u636e\u5e93\u7684sql\u8bed\u53e5. - \u5b9e\u73b0\u4e86\u6570\u636e\u6a21\u578b\u4e0e\u6570\u636e\u5e93\u7684\u89e3\u8026\uff0c\u5c4f\u853d\u4e86\u4e0d\u540c\u6570\u636e\u5e93\u64cd\u4f5c\u4e0a\u7684\u5dee \u5f02. - \u4e0d\u5728\u5173\u6ce8\u7528\u7684\u662fmysql\u3001oracl..\u7b49\u6570\u636e\u5e93\u7684\u5185\u90e8\u7ec6\u8282. - \u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u8f7b\u677e\u66f4\u6362\u6570\u636e\u5e93,\u800c\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801 ### \u7f3a\u70b9 - \u5bf9\u4e8e\u590d\u6742\u4e1a\u52a1\uff0c\u4f7f\u7528\u6210\u672c\u8f83\u9ad8 - \u6839\u636e\u5bf9\u8c61\u7684\u64cd\u4f5c\u8f6c\u6362\u6210SQL\u8bed\u53e5\uff0c\u6839\u636e\u67e5\u8be2\u7684\u7ed3\u679c\u8f6c\u5316\u6210\u5bf9\u8c61, \u5728\u6620\u5c04\u8fc7\u7a0b\u4e2d\u6709\u6027\u80fd\u635f\u5931. ## \u6a21\u578b\u793a\u4f8b - \u6b64\u793a\u4f8b\u4e3a\u6dfb\u52a0\u4e00\u4e2a `bookstore_book` \u6570\u636e\u8868\u6765\u5b58\u653e\u56fe\u4e66 \u9986\u4e2d\u4e66\u76ee\u4fe1\u606f 1. **\u6dfb\u52a0\u4e00\u4e2abookstore\u7684app** $ python3 manage.py startapp bookstore 2. **\u6dfb\u52a0\u6a21\u578b\u7c7b\u5e76\u6ce8\u518capp** \u6a21\u578b\u7c7b\u4ee3\u7801\u793a\u4f8b # file : bookstore/models.py from django.db import models # Create your models here. class Book ( models . Model ): title = models . CharField ( \"\u4e66\u540d\" , max_length = 50 , default = '' ) price = models . DecimalField ( '\u5b9a\u4ef7' , max_digits = 7 , decimal_places = 2 , default = 0.0 ) # 00000.00 3. \u6570\u636e\u5e93\u8fc1\u79fb - \u8fc1\u79fb\u662fDjango\u540c\u6b65\u60a8\u5bf9\u6a21\u578b\u6240\u505a\u66f4\u6539(\u6dfb\u52a0\u5b57\u6bb5\uff0c\u5220\u9664\u6a21\u578b\u7b49)\u5230\u60a8\u7684\u6570\u636e\u5e93\u6a21\u5f0f\u7684\u65b9\u5f0f - \u751f\u6210\u8fc1\u79fb\u6587\u4ef6- \u6267\u884c `python manage.py makemigrations` \u5c06\u5e94\u7528\u4e0b\u7684models.py\u6587\u4ef6\u751f\u6210\u4e00\u4e2a\u4e2d\u95f4\u6587 \u4ef6\u5e76\u4fdd\u5b58\u5728 `migrations` \u6587\u4ef6\u5939\u4e2d - \u6267\u884c\u8fc1\u79fb\u811a\u672c\u7a0b\u5e8f-\u6267\u884c `python manage.py migrate`\u6267\u884c\u8fc1\u79fb\u7a0b\u5e8f\u5b9e\u73b0\u8fc1\u79fb\u3002\u5c06\u6bcf\u4e2a\u5e94\u7528\u4e0b\u7684migrations\u76ee\u5f55\u4e2d\u7684\u4e2d\u95f4\u6587\u4ef6\u540c\u6b65\u56de\u6570\u636e\u5e93 `python manage.py migrate`\u53ef\u80fd\u9047\u5230\u9519\u8bef: django.db.utils.OperationalError: ( 1044 , \"Access denied for user 'warmheart'@'%' to database 'mysitel'\" ) \u539f\u56e0\u6743\u9650\u4e0d\u591f\uff1a \u89e3\u51b3\u65b9\u6848\uff0c\u5728Mysql\u91cc\u9762\u5199\u5165\u672c\u5730\u8bbf\u95ee\u6743\u9650\uff1a `GRANT ALL PRIVILEGES ON *.* TO 'warmheart'@'%';` - [\u8bbf\u95eeMySQL\u6570\u636e\u5e93\u63d0\u793a\u6743\u9650\u4e0d\u591f\u7684\u89e3\u51b3\u65b9\u6848](https://huaweicloud.csdn.net/6335795ed3efff3090b584b7.html?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-1-116140575-blog-113163490.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-1-116140575-blog-113163490.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2) - [\u4fee\u6539mysql\u7684\u5bc6\u7801\u65f6\u9047\u5230\u95ee\u9898ERROR 1064 (42000): You have an error in your SQL syntax\uff1b check the manual that corre](https://blog.csdn.net/lic1697067085/article/details/120234287) \u5176\u4ed6 mysql\u5e38\u7528\u6307\u4ee4: $ SHOW DATABASES ; # \u8bed\u53e5\u7528\u4e8e\u5217\u51fa\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u6570\u636e\u5e93 $ flush privileges ; # \u4fdd\u5b58\u7b56\u7565 $ desc table ; # \u67e5\u770b\u8868\u7ed3\u6784 ## \u6a21\u578b\u7c7b-\u521b\u5efa \u25cf\u6a21\u578b\u7c7b-\u521b\u5efa from django.db import models class \u6a21\u578b\u7c7b\u540d ( models . Mode1 ): \u5b57\u6bb5\u540d = models . \u5b57\u6bb5\u7c7b\u578b ( \u5b57\u6bb5\u9009\u9879 ) ## \u5c0f\u7ed3 - \u6a21\u578b\u5c42\u4ecb\u7ecd - \u914d\u7f6emysql - ORM - \u521b\u5efa\u6a21\u578b\u7c7b ## \u521b\u5efa\u6a21\u578b\u7c7b\u6d41\u7a0b(\u7eed) - \u4efb\u4f55\u5173\u4e8e\u8868\u7ed3\u6784\u7684\u4fee\u6539\uff0c\u52a1\u5fc5\u5728\u5bf9\u5e94\u6a21\u578b\u7c7b.\u4e0a\u4fee\u6539 \u4f8b:\u4e3abookstore_ book\u8868\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3ainfo\u7684\u5b57\u6bb5 varchar(100) \u89e3\u51b3\u65b9\u6848 1. \u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u5bf9\u5e94\u7c7b\u5c5e\u6027 2. \u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb ## \u6a21\u578b\u7c7b- \u5b57\u6bb5\u7c7b\u578b - BooleanField() 1. \u6570\u636e\u5e93\u7c7b\u578b:tinyint(1) 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d:\u4f7f\u7528Irue\u6216Fa!se\u6765\u8868\u793a\u503c 3. \u5728\u6570\u636e\u5e93\u4e2d:\u4f7f\u75281\u62160\u6765\u8868\u793a\u5177\u4f53\u7684\u503c - CharField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar 2. \u6ce8\u610f:\u5fc5\u987b\u8981\u6307\u5b9amax_length\u53c2\u6570\u503c 3. - DateField() 1. \u6570\u636e\u5e93\u7c7b\u578b:date 2. \u4f5c\u7528:\u8868\u793a\u65e5\u671f. 3. \u53c2\u6570: 1. auto_ now:\u6bcf\u6b21\u4fdd\u5b58\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u4e3a\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:True/False)\u3002 2. auto_now_add:\u5f53\u5bf9\u8c61\u7b2c-\u6b21\u88ab\u521b\u5efa\u65f6\u81ea\u52a8\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:True/False)\u3002 3. default: \u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4(\u53d6\u503c:\u5b57\u7b26\u4e32\u683c\u5f0f\u65f6\u95f4\u5982: '2019-6-1)\u3002 4. \u4ee5\u4e0a\u4e09\u4e2a\u53c2\u6570\u53ea\u80fd\u591a\u9009\u4e00 - DateTimeField() 1. \u6570\u636e\u5e93\u7c7b\u578b:datetime(6) 2. \u4f5c\u7528:\u8868\u793a\u65e5\u671f\u548c\u65f6\u95f4 3. \u53c2\u6570\u540cDateField - FloatField() 1. \u6570\u636e\u5e93\u7c7b\u578b:double 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d\u548c\u6570\u636e\u5e93\u4e2d\u90fd\u4f7f\u7528\u5c0f\u6570\u8868\u793a\u503c - DecimalField() 1. \u6570\u636e\u5e93\u7c7b\u578b:decimal(x,y) 2. \u7f16\u7a0b\u8bed\u8a00\u4e2d:\u4f7f\u7528\u5c0f\u6570\u8868\u793a\u8be5\u5217\u7684\u503c 3. \u5728\u6570\u636e\u5e93\u4e2d:\u4f7f\u7528\u5c0f\u6570 4. \u53c2\u6570: - max_ digits: \u4f4d\u6570\u603b\u6570\uff0c\u5305\u62ec\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002\u8be5\u503c\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8edecimal_places. - decimal_places:\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u6570\u91cf - EmailField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar 2. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32 - IntegerField() 1. \u6570\u636e\u5e93\u7c7b\u578b:int 2. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u6574\u6570 - ImageField() 1. \u6570\u636e\u5e93\u7c7b\u578b:varchar(100) 2. \u4f5c\u7528:\u5728\u6570\u636e\u5e93\u4e2d\u4e3a\u4e86\u4fdd\u5b58\u56fe\u7247\u7684\u8def\u5f84 3. \u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32 - TextField() 1. \u6570\u636e\u5e93\u7c7b\u578b:longtext 2. \u4f5c\u7528:\u8868\u793a\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u6570\u636e \u66f4\u591a\u7cbe\u5f69\u8bf7\u9605\u5b98\u65b9\u6587\u6863 https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types ## \u6a21\u578b\u7c7b-\u5b57\u6bb5\u9009\u9879 - \u5b57\u6bb5\u9009\u9879,\u6307\u5b9a\u521b\u5efa\u7684\u5217\u7684\u989d\u5916\u7684\u4fe1\u606f - \u5141\u8bb8\u51fa\u73b0\u591a\u4e2a\u5b57\u6bb5\u9009\u9879\uff0c\u591a\u4e2a\u9009\u9879\u4e4b\u95f4\u4f7f\u7528,\u9694\u5f00 - primary_key: \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5217\u4e3a\u4e3b\u952e\uff0c\u5982\u679c\u6307\u5b9a\u4e00\u4e2a\u5b57\u6bb5\u4e3a\u4e3b\u952e\uff0c\u5219\u6b64 \u6570\u5e93\u8868\u4e0d\u4f1a\u521b\u5efaid\u5b57\u6bb5 - blank: \u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c \u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002\u8bbe\u7f6e\u4e3a False \u65f6, \u5b57\u6bb5\u662f\u5fc5\u987b\u586b\u5199 - null: - \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5217\u503c\u5141\u8bb8\u4e3a\u7a7a\u3002 - \u9ed8\u8ba4\u4e3aFalse,\u5982\u679c\u6b64\u9009\u9879\u4e3aFalse\u5efa\u8bae\u52a0\u5165 default \u9009\u9879\u6765\u8bbe\u7f6e\u9ed8\u8ba4\u503c - default\uff1a\u8bbe\u7f6e\u6240\u5728\u5217\u7684\u9ed8\u8ba4\u503c\u5982\u679c\u5b57\u6bb5\u9009\u9879 null = False \u5efa\u8bae\u6dfb\u52a0\u6b64\u9879 - db_ index\uff1a \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u4e3a\u8be5\u5217\u589e\u52a0\u7d22\u5f15 - unique\uff1a \u5982\u679c\u8bbe\u7f6e\u4e3aTrue,\u8868\u793a\u8be5\u5b57\u6bb5\u5728\u6570\u636e\u5e93\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u552f\u4e00(\u4e0d\u80fd \u91cd\u590d\u51fa\u73b0\u7684) - db_column\uff1a\u6307\u5b9a\u5217\u7684\u540d\u79f0\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5219\u91c7\u7528\u5c5e\u6027\u540d\u4f5c\u4e3a\u5217\u540d - verbose_ name\uff1a \u8bbe\u7f6e\u6b64\u5b57\u6bb5\u5728admin\u754c\u9762\u4ee5\u4e0a\u7684\u663e\u793a\u540d\u79f0 \u5b57\u6bb5\u9009\u9879\u6837\u4f8b #\u521b\u5efa\u4e00\u4e2a\u5c5e\u6027,\u8868\u793a\u7528\u6237\u540d\u79f0\uff0c\u957f\u5ea630\u4e2a\u5b57\u7b26,\u5fc5\u987b\u662f\u552f\u4e00\u7684,\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6dfb\u52a0 \u7d22\u5f15 name = mode1s . charFie1d ( max_1ength = 30 \uff0c unique = True \uff0c nu11 = False \uff0c db_index = True ) \u66f4\u591a\u7cbe\u5f69\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863 https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-options \u597d\u4e60\u60ef:\u4fee\u6539\u8fc7\u5b57\u6bb5\u9009\u9879{\u6dfb\u52a0\u6216\u66f4\u6539] \u5747\u8981\u6267\u884c makemigrations\u548cmigrate ## \u6a21\u578b\u7c7b-Meta\u7c7b \u4f7f\u7528\u5185\u90e8Meta\u7c7b\u6765\u7ed9\u6a21\u578b\u8d4b\u4e88\u5c5e\u6027\uff0cMeta\u7c7b\u4e0b\u6709\u5f88\u591a\u5185\u5efa\u7684\u7c7b\u5c5e \u6027\uff0c\u53ef\u5bf9\u6a21\u578b\u7c7b\u505a\u4e00\u4e9b\u63a7\u5236 \u793a\u4f8b: . # file : bookstore/models.py from django.db import models # Create your models here. class Book ( models . Model ): title = models . CharField ( \"\u4e66\u540d\" , max_length = 50 , default = '' ) price = models . DecimalField ( '\u5b9a\u4ef7' , max_digits = 7 , decimal_places = 2 , default = 0.0 ) # 00000.00 class Meta : db_table = 'book' # \u53ef\u6539\u53d8\u5f53\u524d\u6a21\u578b\u7c7b\u5bf9\u5e94\u7684\u8868\u540d ## \u4fee\u6539\u6a21\u578b\u7c7b \u6a21\u578b\u7c7b - **Book\u8868\u540dbook** - title - CharField(50)-\u4e66\u540d\u552f\u4e00 - pub - CharField(100)-\u51fa\u7248\u793e(\u975e\u7a7a - (price - DecimalField - \u56fe\u4e66\u5b9a\u4ef7 ~ \u603b\u4f4d7/\u5c0f\u6570\u70b92\u4f4d - market price -\u56fe\u4e66\u96f6\u552e\u4ef7\u603b\u4f4d7/\u5c0f\u6570\u70b92\u4f4d \u6a21\u578b\u7c7b - **Author\u8868\u540dauthor** - name - CharField(11)\u2013 \u59d3\u540d\u975e\u7a7a - age - IntegerField - \u5e74\u9f84\u9ed8\u8ba4\u503c\u4e3a 1 - email - EmailField - \u90ae\u7bb1\u5141\u8bb8\u4e3a\u7a7a ## \u5c0f\u7ed3 \u5b57\u6bb5\u9009\u9879& Meta\u5185\u90e8\u7c7b ## ORM-\u57fa\u672c\u64cd\u4f5c-\u521b\u5efa\u6570\u636e \u6570\u636e\u5e93\u7684\u8fc1\u79fb\u6587\u4ef6\u6df7\u4e71\u7684\u89e3\u51b3\u529e\u6cd5 \u6570\u636e\u5e93\u4e2ddjango_migte\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5426\u5219migrate\u4f1a\u62a5\u9519\u76ee\u5404\u5e94\u7528\u4e2d\u7684migrate\u6587\u4ef6\u5e94\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5426\u5219migrate\u4f1a\u62a5\u9519 \u89e3\u51b3\u65b9\u6848: - 1.\u5220\u9664\u6240\u6709migrations \u91cc\u6240\u6709\u7684000?_XXXX.py ( _init_.py \u9664\u5916) - 2\uff0e\u5220\u9664\u6570\u636e\u5e93: `sql> drop database mywebdb;` - 3.\u91cd\u65b0\u521b\u5efa\u6570\u636e\u5e93 sql> create datebase mywebdb default charset...; - 4.\u91cd\u65b0\u751f\u6210migrations\u91cc\u6240\u6709\u7684000?_XXXX.pypython3 manage.py makemigrations - 5.\u91cd\u65b0\u66f4\u65b0\u6570\u636e\u5e93 python3 manage.py migrate ## ORM-\u64cd\u4f5c \u57fa\u672c\u64cd\u4f5c\u5305\u62ec\u589e\u5220\u6539\u67e5\u64cd\u4f5c\uff0c\u5373(CRUD\u64cd\u4f5c) CRUD\u662f\u6307\u5728\u505a\u8ba1\u7b97\u5904\u7406\u65f6\u7684\u589e\u52a0(Create)\u3001\u8bfb\u53d6\u67e5\u8be2(Read)\u3001\u66f4\u65b0(Update)\u548c\u5220\u9664(Delete) \u5fc3 ORM CRUD\u6838\u5fc3->\u6a21\u578b\u7c7b.\u7ba1\u7406\u5668\u5bf9\u8c61 ## \u521b\u5efa\u6570\u636e \u6bcf\u4e2a\u7ee7\u627f\u81eamodels.Model\u7684\u6a21\u578b\u7c7b\uff0c\u90fd\u4f1a \u6709\u4e00\u4e2aobjects\u5bf9\u8c61\u88ab\u540c\u6837\u7ee7\u627f\u4e0b\u6765\u3002\u8fd9\u4e2a\u5bf9\u8c61\u53eb\u7ba1\u7406\u5668\u5bf9\u8c61 \u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u53ef\u4ee5\u901a\u8fc7\u6a21\u578b\u7684\u7ba1\u7406\u5668\u5b9e\u73b0 class MyMode1 (models.Mode1): MyMode1.objects.create(...) # objects\u662f\u7ba1\u7406\u5668\u5bf9\u8c61 DjangoORM\u4f7f\u7528\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u5f0f\u628a\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u8868\u793a\u6210 Python\u5bf9\u8c61 \u521b\u5efa\u6570\u636e\u4e2d\u6bcf\u4e00\u6761\u8bb0\u5f55\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 - \u65b9\u68481 MyModel.objects.create(\u5c5e\u60271=\u503c1,\u5c5e\u60272=\u503c...) - \u6210\u529f:\u8fd4\u56de\u521b\u5efa\u597d\u7684\u5b9e\u4f53\u5bf9\u8c61 - \u5931\u8d25: \u629b\u51fa\u5f02\u5e38 - \u65b9\u68482 \u521b\u5efaMyModel\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528save()\u8fdb\u884c\u4fdd\u5b58 obj = MyMode1 ( \u5c5e\u6027 = \u503c , \u5c5e\u6027 = \u503c ) obj . \u5c5e\u6027 = \u503c obj . save () Django Shell \u5728Django\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7684\u64cd\u4f5c\u9879\u76ee\u53eb `Django Shell` \u5b83\u80fd\u591f\u5728 \u4ea4\u4e92\u6a21\u5f0f\u7528\u9879\u76ee\u5de5\u7a0b\u7684\u4ee3\u7801\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c \u5229\u7528`Django Shell`\u53ef\u4ee5\u4ee3\u66ff\u7f16\u5199view\u7684\u4ee3\u7801\u6765\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c \u6ce8\u610f:\u9879\u76ee\u4ee3\u7801\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165Django shell \u542f\u52a8\u65b9\u5f0f: `python3 manage.py shell` show databases ; # \u67e5\u770b\u6570\u636e\u5e93\uff0c\u9009\u4e2d\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u5e76\u67e5\u770b\u6570\u636e\u5e93\u8868\uff0c\u5177\u4f53\u64cd\u4f5c\u547d\u4ee4\u5982\u4e0b\uff1a use xxxx ; show tables ; ## ORM-\u67e5\u8be2\u64cd\u4f5c - \u6570\u636e\u5e93\u7684\u67e5\u8be2\u9700\u8981\u4f7f\u7528\u7ba1\u7406\u5668\u5bf9\u8c61\u8fdb\u884c - \u901a\u8fc7MyModel.objects\u7ba1\u7406\u5668\u65b9\u6cd5\u8c03\u7528\u67e5\u8be2\u65b9\u6cd5 | \u65b9\u6cd5 | \u8bf4\u660e | | --------- | --------------------------------- | | all() | \u67e5\u8be2\u5168\u90e8\u8bb0\u5f55,\u8fd4\u56deQuerySet\u67e5\u8be2\u5bf9\u8c61 | | get() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u7684\u5355\u4e00\u8bb0\u5f55 | | filter() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u7684\u591a\u6761\u8bb0\u5f55 | | exclude() | \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u4e4b\u5916\u7684\u5168\u90e8\u8bb0\u5f55 | - all()\u65b9\u6cd5 \u7528\u6cd5: MyModel.objects.all() \u4f5c\u7528:\u67e5\u8be2MyModel\u5b9e\u4f53\u4e2d\u6240\u6709\u7684\u6570\u636e \u7b49\u540c\u4e8e select * from tabel \u8fd4\u56de\u503c: QuerySet\u5bb9\u5668\u5bf9\u8c61\uff0c\u5185\u90e8\u5b58\u653eMyModel\u5b9e\u4f8b from bookstore.models import Book books = Book . objects . a11 () for book in books : print ( \"\u4e66\u540d\" \uff0c book . title \uff0c ' \u51fa\u7248\u793e:' \uff0c book . pub ) \u53ef\u4ee5\u5728\u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49 __str__ \u65b9\u6cd5\uff0c \u81ea\u5b9a\u4e49 `QuerySet` \u4e2d\u7684\u8f93\u51fa\u683c\u5f0f \u4f8b\u5982\u5728Book\u6a21\u578b\u7c7b\u4e0b\u5b9a\u4e49\u5982\u4e0b: def __str__ ( self ): return '%S_ %S_ %S_ %S' % ( self . title , self . price , self . pub , self . market_ price ) \u5219\u5728djangoshell\u4e2d\u53ef\u5f97\u5230\u5982\u4e0b\u663e\u793a\u8f93\u51fa In [ 20 ] : Book.objects.all () 0ut [ 20 ] : <QuerySet [ <Book: Python_ 20 .00 \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e25. 00 >\uff0c<Book: Django_ 70 .00_ \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e_ 75 .00>\uff0c <Book: HTML5_ 9 0 .00_\u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e_ 105 .00>, <Book: JQuery_ 90 .00_ \u673a\u68b0\u5de5\u4e1a\u51fa \u7248\u793e_ 85 . 00 >, <Book: Linux_ 80 .00\u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e_ 65 . 00 > ] > - values('\u52171'\uff0c'\u52172'..) - \u7528\u6cd5: MyModel.objects.values(..) - \u4f5c\u7528: \u67e5\u8be2\u90e8\u5206\u5217\u7684\u6570\u636e\u5e76\u8fd4\u56de - \u7b49\u540c\u4e8e select \u52171\uff0c\u52172 from xXx - \u8fd4\u56de\u503c: QuerySet - \u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u5bb9\u5668\uff0c\u5bb9\u5668\u5185\u5b58\u5b57\u5178\uff0c\u6bcf\u4e2a\u5b57\u5178\u4ee3\u8868\u4e00\u6761\u6570\u636e, - \u683c\u5f0f\u4e3a : {'\u52171':\u503c1,'\u52172':\u503c2} - values_list('\u52171';\u5217...) - \u7528\u6cd5:MyModel.objects.values_list(...) - \u4f5c\u7528:\u8fd4\u56de\u5143\u7ec4\u5f62\u5f0f\u7684\u67e5\u8be2\u7ed3\u679c - \u7b49\u540c\u4e8eselect\u52171,\u52172 from xxx - \u8fd4\u56de\u503c:QuerySet\u5bb9\u5668\u5bf9\u8c61,\u5185\u90e8\u5b58\u653e\u5143\u7ec4 - \u4f1a\u5c06\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u5c01\u88c5\u5230\u5143\u7ec4\u4e2d\uff0c\u518d\u5c01\u88c5\u5230\u67e5\u8be2\u96c6\u5408QuenySer\u4e2d - order_by() - \u7528\u6cd5:MyModel.objects.order_by('-\u5217;\u5217\") - \u4f5c\u7528:\u4e0eall()\u65b9\u6cd5\u4e0d\u540c\uff0c\u5b83\u4f1a\u7528SQL\u8bed\u53e5\u7684ORDER BY\u5b50\u53e5\u5bf9\u67e5\u8be2\u7ed3\u679c \u8fdb\u884c\u6839\u636e\u67d0\u4e2a\u5b57\u6bb5\u9009\u62e9\u6027\u7684\u8fdb\u884c\u6392\u5e8f \u8bf4\u660e: - \u9ed8\u8ba4\u662f\u6309\u7167\u5347\u5e8f\u6392\u5e8f\uff0c\u964d\u5e8f\u6392\u5e8f\u5219\u9700\u8981\u5728\u5217\u524d\u589e\u52a0'-'\u8868\u793a ## \u5c0f\u7ed3 \u25cf\u67e5\u8be2\u65b9\u6cd5- all() \u25cf\u67e5\u8be2\u65b9\u6cd5- values() \u25cf\u67e5\u8be2\u65b9\u6cd5- values_ list() \u25cf\u67e5\u8be2\u65b9\u6cd5-order_ _by() < table border = \"l\" > < tr > < th > id </ th > < th > title </ th > < th > pub </ th > < th > price </ th > < th > market_price </ th > < th > op </ th > </ tr > {% for book in all_book %} < tr > < th > {{ book.id }} </ th > < th > {{ book.title }} </ th > < th > {{ book.pub }} </ th > < th > {{ book.price }} </ th > < th > {{ book.mark_price }} </ th > < td > < a href = \"\" > \u66f4\u65b0 </ a > < a href = \"\" > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} +----+--------+-------+------------+-----------------+ | id | title | price | mark_price | pub | +----+--------+-------+------------+-----------------+ | 1 | Python | 20 .00 | 25 .00 | \u6e05\u534e\u51fa\u7248\u793e | | 2 | HTML | 90 .00 | 100 .00 | \u6e05\u534e\u51fa\u7248\u793e | | 3 | Vuen | 20 .00 | 35 .00 | \u6e05\u534e\u51fa\u7248\u793e | +----+--------+-------+------------+-----------------+ ## ORM-\u67e5\u8be2\u64cd\u4f5c-2 > \u6761\u4ef6\u67e5\u8be2\uff0c\u600e\u4e48\u52a0\u6761\u4ef6 - filter(\u6761\u4ef6) - \u8bed\u6cd5: MyModel.objects.filter(\u5c5e\u60271=\u503c1,\u5c5e\u60272=\u503c2) - \u4f5c\u7528:\u8fd4\u56de\u5305\u542b\u6b64\u6761\u4ef6\u7684\u5168\u90e8\u7684\u6570\u636e\u96c6 - \u8fd4\u56de\u503c:QuerySet\u5bb9\u5668\u5bf9\u8c61\uff0c\u5185\u90e8\u5b58\u653eMyModel\u5b9e\u4f8b \u8bf4\u660e: \u5f53\u591a\u4e2a\u5c5e\u6027\u5728\u4e00\u8d77\u65f6\u4e3a\"\u4e0e\"\u5173\u7cfb\uff0c\u5373\u5f53 ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559782766302544/319e3eba_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559924965392641/9dfabedc_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676559963190245200/f314e324_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") \u601d\u8003?\u5982\u4f55\u505a\u975e\u7b49\u503c\u7684\u8fc7\u6ee4\u67e5\u8be2\uff0c\u5373where id > 1 \u5c1d\u8bd5: Book.objects.filter(id > 1) ? ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560311810794298/6fc5ecdc_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560336738175966/de77bc00_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560413733223425/b8fd47f3_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560440059950264/4cf897b3_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") \u66f4\u591a\u7cbe\u5f69\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863: https://docs.djangoproject.com/en/2.2/ref/models/querysets/#field-lookups ## \u5c0f\u7ed3 \u6761\u4ef6\u67e5\u8be2 1. filter/exclude - QuerySet 2. get - obj - \u67e5\u8be2\u8c13\u8bcd - \u7c7b\u5c5e\u6027 + '__' + \u8c13\u8bcd ## ORM - \u66f4\u65b0\u64cd\u4f5c ## ORM - \u5220\u9664\u64cd\u4f5c ## F\u5bf9\u8c61 \u548c Q\u5bf9\u8c61 ## \u805a\u5408\u67e5\u8be2\u548c\u539f\u751f\u6570\u636e\u5e93\u64cd\u4f5c ## \u9879\u76ee\u90e8\u7f72 1. \u7528 `uWSGI` \u66ff\u4ee3 `python manage.py runserver` \u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u5668 2. \u914d\u7f6e `nginx` \u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668 3. \u7528 `nginx` \u914d\u7f6e\u9759\u6001\u6587\u4ef6\u8def\u5f84\u89e3\u51b3\u9759\u6001\u8def\u5f84\u95ee\u9898 WSGI (Web Server Gateway Interface)Web\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u662f Python\u5e94\u7528\u7a0b\u5e8f\u6216\u6846\u67b6\u548cWeb\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4e00\u79cd\u63a5\u53e3\uff0c\u88ab\u5e7f\u6cdb\u4f7f \u7528,\u4f7f\u7528 `python manage.py runserver` \u901a\u5e38\u53ea\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e2d\u4f7f\u7528, \u5f53\u5f00\u53d1\u7ed3\u675f\u540e\uff0c\u5b8c\u5584\u7684\u9879\u76ee\u4ee3\u7801\u9700\u8981\u5728\u4e00\u4e2a\u9ad8\u6548\u7a33\u5b9a\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528WSGI\u3002 uWSGI\u662fWSGI\u7684\u4e00\u79cd, \u5b83\u5b9e\u73b0\u4e86http\u534f\u8baeWSGl\u534f\u8bae\u4ee5\u53cauwsgi\u534f\u8bae uWSGI\u529f\u80fd\u5b8c\u5584\uff0c\u652f\u6301\u534f\u8bae\u4f17\u591a\uff0c\u5728python web\u5708\u70ed\u5ea6\u6781\u9ad8 **uWSGI\u4e3b\u8981\u4ee5\u5b66\u4e60\u914d\u7f6e\u4e3a\u4e3b** ## \u914d\u7f6euWSGI \u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\u9879\u76ee\u540c\u540d\u6587\u4ef6\u5939/uwsgi.ini \u5982: `mysite1/mysite1/uwsgi.ini` \u6587\u4ef6\u4ee5[uwsgi]\u5f00\u5934\uff0c\u6709\u5982\u4e0b\u914d\u7f6e\u9879: \u5957\u63a5\u5b57\u65b9\u5f0f\u7684IP\u5730\u5740:\u7aef\u53e3\u53f7[\u6b64\u6a21\u5f0f \u9700\u8981\u6709nginx] `socket= 127.0.0.1:8000` Http\u901a\u4fe1\u65b9\u5f0f\u7684IP\u5730\u5740:\u7aef\u53e3\u53f7 `http = 127.0.0.1:8000` ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676560795505499865/f28b933c_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") uwsgi.ini \u9879\u76ee\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 chdir = /home/tarena/.../my_project \u9879\u76ee\u4e2dwsgi.py\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u76f8\u5bf9\u4e8e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 wsgi-file = my_project/wsgi.py \u8fdb\u7a0b\u4e2a\u6570 process = 4 \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e2a\u6570 threads = 2 \u670d\u52a1\u7684pid\u8bb0\u5f55\u6587\u4ef6 pidfile = uwsgi.pid \u670d\u52a1\u7684\u76ee\u5fd7\u6587\u4ef6\u4f4d\u7f6e daemonize = uwsgi.log \u5f00\u542f\u4e3b\u8fdb\u7a0b\u7ba1\u7406\u6a21\u5f0f master = True \u6ce8\u610f: \u89e3\u51b3conda\u73af\u5883\u5b89\u88c5 uwsgi \u9519\u8bef I almost want to give up, then I find this page: https://github.com/conda-forge/uwsgi-feedstock Now you can install uwsgi though conda: conda config --add channels conda-forge conda install uwsgi \u7279\u6b8a\u8bf4\u660e: Django \u7684settings.py\u9700\u8981\u505a\u5982\u4e0b\u914d\u7f6e 1. \u4fee\u6539settings.py\u5c06 DEBUG=True \u6539\u4e3a DEBUG=False 2. \u4fee\u6539settings.py\u5c06 ALLOWED_HOSTS = [] \u6539\u4e3a ALLOWED_HOSTS = ['\u7f51\u7ad9\u57df\u540d']\u6216\u8005['\u670d\u52a1\u76d1\u542c\u7684ip\u5730\u5740'] ## uWSGI\u7684\u8fd0\u884c\u7ba1\u7406 - \u542f\u52a8uwsgi cd\u5230 uWSGI.ini \u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55 $ uwsgi --ini uwsgi.ini - \u505c\u6b62uwsgi cd\u5230 uWSGI.ini \u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55 $ uwsgi --stop uwsgi.pid - \u68c0\u6d4b\uff1a `ps aux | grep 'uwsgi'` ## \u914d\u7f6e nginx \u4fee\u6539nginx\u7684\u914d\u7f6e\u6587\u4ef6 `/etc/nginx/sites-enabled/default`; `sudo vim \u8be5\u6587\u4ef6` #\u5728server\u8282\u70b9\u4e0b\u6dfb\u52a0\u65b0\u7684Tocation\u9879\uff0c\u6307\u5411uwsgi\u7684ip\u4e0e\u7aef\u53e3\u3002 server { location / { uwsgi_pass 127.0.0.1:8000; # \u91cd\u5b9a\u5411\u5230127 .0.0.1\u7684 8000\u7aef\u53e3 include /etc/nginx/uwsgi_params; #\u5c06\u6240\u6709\u7684\u53c2\u6570\u8f6c\u5230uwsgi\u4e0b } } ## nginx \u542f\u52a8/\u505c\u6b62 $ sudo /etc/init.d/nginx start | stop | restart | status #\u6216 $ sudo service nginx start | stop | restart | status - \u542f\u52a8- sudo /etc/init.d/nginx start - \u505c\u6b62- sudo /etc/init.d/nginx stop - \u91cd\u542f- sudo /etc/init.d/nginx restart \u6ce8\u610f: nginx\u914d\u7f6e \u53ea\u8981\u4fee\u6539\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u91cd\u542f\uff0c\u5426\u5219\u914d\u7f6e\u4e0d\u751f\u6548 - `sudo nginx -t` \u68c0\u6d4b\u914d\u7f6e\u6587\u4ef6\u8bed\u6cd5 ![\u8f93\u5165\u56fe\u7247\u8bf4\u660e](https://foruda.gitee.com/images/1676611029506777917/37d3b521_10213136.png \"\u5c4f\u5e55\u622a\u56fe\") ## nginx\u914d\u7f6e\u9759\u6001\u6587\u4ef6 ## git Action \u5165\u95e8\u6559\u7a0b \u6301\u7eed\u96c6\u6210\uff08Continuous integration\uff09\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7ecf\u5e38\u8bf4\u7684CI\u3002\u5b83\u662f\u4e00\u79cd\u8f6f\u4ef6\u5f00\u53d1\u5b9e\u8df5\uff0c\u53ef\u4ee5\u8ba9\u56e2\u961f\u5728\u6301\u7eed\u7684\u57fa\u7840\u4e0a\u6536\u5230\u53cd\u9988\u5e76\u8fdb\u884c\u6539\u8fdb\uff0c\u4e0d\u5fc5\u7b49\u5230\u5f00\u53d1\u540e\u671f\u624d\u5bfb\u627e\u548c\u4fee\u590d\u7f3a\u9677\uff0c\u5e38\u8fd0\u7528\u4e8e\u8f6f\u4ef6\u7684\u654f\u6377\u5f00\u53d1\u4e2d\u3002Jenkins\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684\u6301\u7eed\u96c6\u6210\u5e73\u53f0\u5de5\u5177\u3002 \u7406\u89e3\u4e86\u6301\u7eed\u96c6\u6210\u7684\u6982\u5ff5\u4e4b\u540e\uff0c\u4e0b\u9762\u6211\u7b80\u5355\u8bb2\u4e00\u4e0b\u4f7f\u7528\u6301\u7eed\u96c6\u6210\u7684\u597d\u5904\uff1a \u63d0\u9ad8\u6548\u7387\uff0c\u51cf\u5c11\u4e86\u91cd\u590d\u6027\u5de5\u4f5c\uff1a\u4e00\u4e9b\u91cd\u590d\u6027\u7684\u5de5\u4f5c\u5199\u6210\u811a\u672c\u4ea4\u7ed9\u6301\u7eed\u96c6\u6210\u670d\u52a1\u6267\u884c\u3002 \u51cf\u5c11\u4e86\u4eba\u5de5\u5e26\u6765\u7684\u9519\u8bef\uff1a\u673a\u5668\u901a\u8fc7\u9884\u5148\u5199\u597d\u7684\u811a\u672c\u6267\u884c\u72af\u9519\u7684\u51e0\u7387\u6bd4\u4eba\u5de5\u4f4e\u5f88\u591a\u3002 \u51cf\u5c11\u7b49\u5f85\u7684\u65f6\u95f4\uff1a\u4e00\u5957\u5b8c\u5907\u7684\u6301\u7eed\u96c6\u6210\u670d\u52a1\u6db5\u76d6\u4e86\u5f00\u53d1\u3001\u96c6\u6210\u3001\u6d4b\u8bd5\u3001\u90e8\u7f72\u7b49\u5404\u4e2a\u73af\u8282\u3002 \u63d0\u9ad8\u4ea7\u54c1\u8d28\u91cf\uff1a\u5f88\u591a\u5927\u516c\u53f8\u5728\u4ee3\u7801\u63d0\u4ea4\u540e\u90fd\u4f1a\u6709\u4e00\u5957\u4ee3\u7801\u68c0\u89c6\u811a\u672c\uff08\u4fd7\u79f0\u95e8\u7981\uff09\u6765\u68c0\u67e5\u4ee3\u7801\u7684\u63d0\u4ea4\u662f\u5426\u7b26\u5408\u89c4\u8303\uff0c\u4ece\u800c\u4ece\u6e90\u5934\u904f\u5236\u95ee\u9898\u7684\u4ea7\u751f\u3002 [https://docs.github.com/zh/actions/using-workflows](https://docs.github.com/zh/actions/using-workflows) [GitHub Actions \u5165\u95e8\u6559\u7a0b](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html) [GitHub\u4e5f\u80fdCI/CD\u4e86 \u5982\u4f55\u4f7f\u7528GitHub\u7684Action\uff1f](https://blog.csdn.net/qq_41636947/article/details/121683905) [\u624b\u628a\u624b\u6559\u4f60\u5982\u4f55\u5de7\u7528Github\u7684Action\u529f\u80fd](https://www.bilibili.com/read/cv9190554) 1. workflow\uff08\u5de5\u4f5c\u6d41\u7a0b\uff09\uff1a\u6301\u7eed\u96c6\u6210\u4e00\u6b21\u8fd0\u884c\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u4e00\u4e2aworkflow\u3002 2. job\uff08\u4efb\u52a1\uff09\uff1a\u4e00\u4e2aworkflow\u7531\u4e00\u4e2a\u6216\u591a\u4e2ajobs\u6784\u6210\uff0c\u542b\u4e49\u662f\u4e00\u6b21\u6301\u7eed\u96c6\u6210\u7684\u8fd0\u884c\uff0c\u53ef\u4ee5\u5b8c\u6210\u591a\u4e2a\u4efb\u52a1\u3002 3. step\uff08\u6b65\u9aa4\uff09\uff1a\u6bcf\u4e2ajob\u7531\u591a\u4e2astep\u6784\u6210\uff0c\u4e00\u6b65\u6b65\u5b8c\u6210\u3002 4. action\uff08\u52a8\u4f5c\uff09\uff1a\u6bcf\u4e2astep\u53ef\u4ee5\u4f9d\u6b21\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u547d\u4ee4\uff08action\uff09\u3002 \u4f5c\u8005\uff1axuexiangjys https://www.bilibili.com/read/cv9190554 \u51fa\u5904\uff1abilibili - steps\u5177\u4f53\u63cf\u8ff0\u4e86\u8be5\u600e\u4e48\u6267\u884c\u811a\u672c `uses` \u662f\u4f7f\u7528\u4e86\u522b\u4eba\u5df2\u7ecf\u9884\u5148\u5b9a\u4e49\u597d\u7684\u811a\u672c\uff0c\u8fd9\u91cc\u7684 `actions/checkout@v2` \u5c31\u662f\u4e00\u4e2a\u628a\u4ed3\u5e93\u62c9\u53d6\u5230\u6700\u65b0\u7684\u811a\u672c, \u6211\u4eec\u5c06\u4ed3\u5e93\u62c9\u5230\u6700\u65b0\u540e\u5c31\u76f4\u63a5\u8fd0\u884c","title":"URL\u53cd\u5411\u89e3\u6790"},{"location":"Python/Python/Ox00%E5%BC%95%E8%A8%80/","text":"","title":"Ox00\u5f15\u8a00"},{"location":"Python/Python/Ox01%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/","text":"Python\u9b54\u6cd5\u65b9\u6cd5 \u9b54\u6cd5\u65b9\u6cd5\u5c31\u5982\u540c\u5b83\u7684\u540d\u5b57\u4e00\u6837\u795e\u5947\uff0c\u88ab\u53cc\u4e0b\u5212\u7ebf\u6240\u5305\u56f4\u7684\u65b9\u6cd5( \u65b9\u6cd5 ), \u4f7f\u7528Python\u7684\u9b54\u6cd5\u65b9\u6cd5\u53ef\u4ee5\u4f7fPython\u7684\u81ea\u7531\u5ea6\u53d8\u5f97\u66f4\u9ad8\uff0c\u5f53\u4e0d\u9700\u8981\u91cd\u5199\u65f6\u9b54\u6cd5\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u5728\u89c4\u5b9a\u7684\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u751f\u6548\uff0c\u5728\u9700\u8981\u91cd\u5199\u65f6\u4e5f\u53ef\u4ee5\u8ba9\u4f7f\u7528\u8005\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u91cd\u5199\u90e8\u5206\u65b9\u6cd5\u6765\u8fbe\u5230\u81ea\u5df1\u7684\u671f\u5f85\u3002 \u793a\u4f8b \u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a Person \u7684\u7c7b\u3002\u8fd9\u4e2a\u7c7b\u5305\u62ec\u56db\u4e2a\u7279\u6b8a\u65b9\u6cd5\uff1a __new__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u88ab\u521b\u5efa\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 super(). __new__ (cls) \u6765\u521b\u5efa\u8fd9\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56de\u5b83\u3002 __init__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u521d\u59cb\u5316\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u628a name \u5b58\u50a8\u4e3a\u5bf9\u8c61\u5c5e\u6027\u3002 __call__ : \u8fd9\u4e2a\u65b9\u6cd5\u8ba9\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u8fd9\u4e2a\u4eba\u7684\u540d\u5b57\u3002 __del__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7b80\u5355\u5730\u6253\u5370\u4e00\u6761\u6d88\u606f\u6765\u8bf4\u660e\u8fd9\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u3002 class Per def __new__ ( cls , * args , ** kwargs ): print ( \"Creating new instance of Person\" ) instance = super () . __new__ ( cls ) return instance def __init__ ( self , name ): print ( \"Initializing Person\" ) self . name = name def __call__ ( self ): print ( f \"My name is { self . name } \" ) def __del__ ( self ): print ( \"Deleting Person\" ) person = Person ( \"Alice\" ) person () del person \u8f93\u51fa Creating new instance of Person Initializing Person My name is Alice Deleting Person \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a person \u7684\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b83\uff0c\u6700\u540e\u5220\u9664\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u5f53 person() \u88ab\u8c03\u7528\u65f6\uff0c __call__ \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u5e76\u6253\u5370\u51fa\u8fd9\u4e2a\u4eba\u7684\u540d\u5b57\u3002\u5f53 del person \u88ab\u6267\u884c\u65f6\uff0c __del__ \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u6253\u5370\u51fa\u4e00\u6761\u6d88\u606f\u8bf4\u660e\u8fd9\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u3002 \u5c0f\u7ed3 \u5404\u7c7b\u65b9\u6cd5\u53ea\u6709\u6709\u5b9e\u9645\u7684\u6848\u4f8b\u4e2d\u624d\u4f1a\u771f\u6b63\u4f53\u4f1a\u5230\u5176\u201c\u9b54\u6cd5\u201d\u4e4b\u5904\uff0c\u6bd4\u5982\u5927\u5927\u7b80\u5316\u4ee3\u7801\uff0c\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\u3001\u5065\u58ee\u6027\u7b49\u7b49\u3002 Reference https://docs.python.org/zh-cn/3/reference/datamodel.html python \u7684\u9b54\u6cd5\u65b9\u6cd5\u662f\u4ec0\u4e48? python\u9b54\u6cd5\u65b9\u6cd5\u957f\u6587\u8be6\u89e3","title":"Ox01\u9b54\u6cd5\u65b9\u6cd5"},{"location":"Python/Python/Ox01%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/#python","text":"\u9b54\u6cd5\u65b9\u6cd5\u5c31\u5982\u540c\u5b83\u7684\u540d\u5b57\u4e00\u6837\u795e\u5947\uff0c\u88ab\u53cc\u4e0b\u5212\u7ebf\u6240\u5305\u56f4\u7684\u65b9\u6cd5( \u65b9\u6cd5 ), \u4f7f\u7528Python\u7684\u9b54\u6cd5\u65b9\u6cd5\u53ef\u4ee5\u4f7fPython\u7684\u81ea\u7531\u5ea6\u53d8\u5f97\u66f4\u9ad8\uff0c\u5f53\u4e0d\u9700\u8981\u91cd\u5199\u65f6\u9b54\u6cd5\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u5728\u89c4\u5b9a\u7684\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u751f\u6548\uff0c\u5728\u9700\u8981\u91cd\u5199\u65f6\u4e5f\u53ef\u4ee5\u8ba9\u4f7f\u7528\u8005\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u91cd\u5199\u90e8\u5206\u65b9\u6cd5\u6765\u8fbe\u5230\u81ea\u5df1\u7684\u671f\u5f85\u3002","title":"Python\u9b54\u6cd5\u65b9\u6cd5"},{"location":"Python/Python/Ox01%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/#_1","text":"\u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a Person \u7684\u7c7b\u3002\u8fd9\u4e2a\u7c7b\u5305\u62ec\u56db\u4e2a\u7279\u6b8a\u65b9\u6cd5\uff1a __new__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u88ab\u521b\u5efa\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 super(). __new__ (cls) \u6765\u521b\u5efa\u8fd9\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56de\u5b83\u3002 __init__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u521d\u59cb\u5316\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u628a name \u5b58\u50a8\u4e3a\u5bf9\u8c61\u5c5e\u6027\u3002 __call__ : \u8fd9\u4e2a\u65b9\u6cd5\u8ba9\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u8fd9\u4e2a\u4eba\u7684\u540d\u5b57\u3002 __del__ : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u65f6\u88ab\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7b80\u5355\u5730\u6253\u5370\u4e00\u6761\u6d88\u606f\u6765\u8bf4\u660e\u8fd9\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u3002 class Per def __new__ ( cls , * args , ** kwargs ): print ( \"Creating new instance of Person\" ) instance = super () . __new__ ( cls ) return instance def __init__ ( self , name ): print ( \"Initializing Person\" ) self . name = name def __call__ ( self ): print ( f \"My name is { self . name } \" ) def __del__ ( self ): print ( \"Deleting Person\" ) person = Person ( \"Alice\" ) person () del person \u8f93\u51fa Creating new instance of Person Initializing Person My name is Alice Deleting Person \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a person \u7684\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b83\uff0c\u6700\u540e\u5220\u9664\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u5f53 person() \u88ab\u8c03\u7528\u65f6\uff0c __call__ \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u5e76\u6253\u5370\u51fa\u8fd9\u4e2a\u4eba\u7684\u540d\u5b57\u3002\u5f53 del person \u88ab\u6267\u884c\u65f6\uff0c __del__ \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u6253\u5370\u51fa\u4e00\u6761\u6d88\u606f\u8bf4\u660e\u8fd9\u4e2a\u5b9e\u4f8b\u88ab\u5220\u9664\u3002","title":"\u793a\u4f8b"},{"location":"Python/Python/Ox01%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/#_2","text":"\u5404\u7c7b\u65b9\u6cd5\u53ea\u6709\u6709\u5b9e\u9645\u7684\u6848\u4f8b\u4e2d\u624d\u4f1a\u771f\u6b63\u4f53\u4f1a\u5230\u5176\u201c\u9b54\u6cd5\u201d\u4e4b\u5904\uff0c\u6bd4\u5982\u5927\u5927\u7b80\u5316\u4ee3\u7801\uff0c\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\u3001\u5065\u58ee\u6027\u7b49\u7b49\u3002","title":"\u5c0f\u7ed3"},{"location":"Python/Python/Ox01%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/#reference","text":"https://docs.python.org/zh-cn/3/reference/datamodel.html python \u7684\u9b54\u6cd5\u65b9\u6cd5\u662f\u4ec0\u4e48? python\u9b54\u6cd5\u65b9\u6cd5\u957f\u6587\u8be6\u89e3","title":"Reference"},{"location":"Python/Python/Ox02%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/","text":"\u5f15\u8a00 \u8fed\u4ee3\u662fPython\u4e2d\u5e38\u7528\u4e14\u975e\u5e38\u5f3a\u5927\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8bbf\u95ee\u96c6\u5408\u3001\u5217\u8868\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u7b49\u6570\u636e\u7ed3\u6784\u7684\u5143\u7d20\u3002 \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5faa\u73af\u548c\u6761\u4ef6\u8bed\u53e5\uff0c\u6211\u4eec\u4e5f\u6e05\u695a\u54ea\u4e9b\u662f\u53ef\u4ee5\u8fed\u4ee3\u8bbf\u95ee\uff0c\u4f46\u662f\u5177\u4f53\u5b83\u4eec\u4e4b\u95f4\u6709\u4ec0\u4e48\u6709\u4ec0\u4e48\u5f02\u540c\u4e4b\u5904\uff1f \u6709\u54ea\u4e9b\u7279\u70b9\uff1f\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\u3001\u4ec0\u4e48\u662f\u751f\u6210\u5668\u3001\u4ec0\u4e48\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1f \u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u7528\u4e8e\u8fed\u4ee3\u8bbf\u95ee\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u7ba1\u662f\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u6216\u5b57\u5178\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u8bbf\u95ee\u5b83\u4eec\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u6709\u4e24\u4e2a\u57fa\u672c\u7684\u65b9\u6cd5\uff1a __iter__ \u548c __next__ \uff08\u4e5f\u79f0\u4e3anext\uff09\u3002 __iter__ \u7528\u4e8e\u6807\u8bb0\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5f00\u59cb\u4f4d\u7f6e\u7ee7\u7eed\u4e0b\u53bb\uff0c\u800c __next__ \u8fd4\u56de\u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u5143\u7d20\u3002 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 __iter__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u5177\u6709 __next__ \u65b9\u6cd5\uff0c\u53ef\u4ee5\u88ab\u7528\u4e8e\u8bbf\u95ee\u8fd9\u4e9b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u3002 \u751f\u6210\u5668\u662f\u53e6\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u4f7f\u7528 yield \u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fed\u4ee3\u7684\u503c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 return \u8fd4\u56de\u7ed3\u679c\u3002\u751f\u6210\u5668\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u5e76\u4e14\u66f4\u52a0\u7b80\u5355\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668\u7684\u793a\u4f8b\uff1a \u793a\u4f8b \u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 __iter__() \u548c __next__() \u65b9\u6cd5\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u5408\u7684\u904d\u5386\u3002\u5176\u4e2d\uff0c __iter__() \u65b9\u6cd5\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61\u672c\u8eab\uff0c \u800c __next__() \u65b9\u6cd5\u8fd4\u56de\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u629b\u51fa StopIteration \u5f02\u5e38\u3002 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7528\u4e8e\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u5408\uff0c\u56e0\u4e3a\u5b83\u53ea\u5728\u9700\u8981\u65f6\u751f\u6210\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u52a0\u8f7d\u6574\u4e2a\u6570\u636e\u96c6\u5408\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1a class MyIterator : def __init__ ( self , start , end ): self . current = start self . end = end def __iter__ ( self ): return self def __next__ ( self ): if self . current >= self . end : raise StopIteration else : self . current += 1 return self . current - 1 # 0,1,2,3,4,5, for i in MyIterator ( 0 , 6 ): print ( i , end = \",\" ) \u4e0a\u8ff0\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a MyIterator \u7c7b\uff0c\u5b83\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u4ece start \u5f00\u59cb\u3001 end \u7ed3\u675f\u7684\u6574\u6570\u5e8f\u5217\u3002 \u5728 __next__() \u65b9\u6cd5\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u503c\u5df2\u7ecf\u8d85\u8fc7\u4e86 end \uff0c\u5219\u629b\u51fa StopIteration \u5f02\u5e38\uff0c\u5426\u5219\u5c06\u5f53\u524d\u503c\u52a0 1 \u5e76\u8fd4\u56de\u3002 \u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u53ea\u9700\u8981\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u5b83\u5373\u53ef\u3002 \u751f\u6210\u5668 \u751f\u6210\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u4f7f\u7528 yield \u8bed\u53e5\u6765\u4ea7\u751f\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0e\u8fed\u4ee3\u5668\u4e0d\u540c\uff0c\u751f\u6210\u5668\u53ef\u4ee5\u4fdd\u7559\u5f53\u524d\u72b6\u6001\uff0c\u5e76\u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u65f6\u4ece\u5f53\u524d\u72b6\u6001\u7ee7\u7eed\u6267\u884c\u3002 \u56e0\u6b64\uff0c\u751f\u6210\u5668\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u5730\u5904\u7406\u6570\u636e\u96c6\u5408\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u751f\u6210\u5668\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a yield\uff1a\u7528\u4e8e\u751f\u6210\u5668\u51fd\u6570\uff0c\u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4fdd\u7559\u51fd\u6570\u5f53\u524d\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u7684\u8c03\u7528\u3002 yield from\uff1a\u7528\u4e8e\u751f\u6210\u5668\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u4e2d\u8c03\u7528\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 yield \u7684\u4f7f\u7528\u793a\u4f8b\uff1a def simple_generator (): yield 1 yield 2 yield 3 # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570 gen = simple_generator () # \u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61 for i in gen : print ( i ) \u8f93\u51fa\u7ed3\u679c: 1 2 3 yield from \u7684\u4f7f\u7528\u793a\u4f8b\uff1a def complex_generator (): yield from [ 1 , 2 , 3 ] yield from ( x * x for x in range ( 4 , 7 )) yield from \"hello\" # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570 gen = complex_generator () # \u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61 for i in gen : print ( i ) \u8f93\u51fa\u7ed3\u679c: 1 2 3 16 25 36 h e l l o \u53ef\u4ee5\u770b\u51fa\uff0c yield from \u53ef\u4ee5\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u76f4\u63a5\u4f20\u9012\u7ed9\u751f\u6210\u5668\u7684\u8c03\u7528\u65b9\uff0c\u4f7f\u5f97\u751f\u6210\u5668\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u52a0\u7b80\u6d01\u3002","title":"Ox02\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668"},{"location":"Python/Python/Ox02%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_1","text":"\u8fed\u4ee3\u662fPython\u4e2d\u5e38\u7528\u4e14\u975e\u5e38\u5f3a\u5927\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8bbf\u95ee\u96c6\u5408\u3001\u5217\u8868\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u7b49\u6570\u636e\u7ed3\u6784\u7684\u5143\u7d20\u3002 \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5faa\u73af\u548c\u6761\u4ef6\u8bed\u53e5\uff0c\u6211\u4eec\u4e5f\u6e05\u695a\u54ea\u4e9b\u662f\u53ef\u4ee5\u8fed\u4ee3\u8bbf\u95ee\uff0c\u4f46\u662f\u5177\u4f53\u5b83\u4eec\u4e4b\u95f4\u6709\u4ec0\u4e48\u6709\u4ec0\u4e48\u5f02\u540c\u4e4b\u5904\uff1f \u6709\u54ea\u4e9b\u7279\u70b9\uff1f\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\u3001\u4ec0\u4e48\u662f\u751f\u6210\u5668\u3001\u4ec0\u4e48\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1f \u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u7528\u4e8e\u8fed\u4ee3\u8bbf\u95ee\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u7ba1\u662f\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u6216\u5b57\u5178\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u8bbf\u95ee\u5b83\u4eec\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u6709\u4e24\u4e2a\u57fa\u672c\u7684\u65b9\u6cd5\uff1a __iter__ \u548c __next__ \uff08\u4e5f\u79f0\u4e3anext\uff09\u3002 __iter__ \u7528\u4e8e\u6807\u8bb0\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5f00\u59cb\u4f4d\u7f6e\u7ee7\u7eed\u4e0b\u53bb\uff0c\u800c __next__ \u8fd4\u56de\u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u5143\u7d20\u3002 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 __iter__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u5177\u6709 __next__ \u65b9\u6cd5\uff0c\u53ef\u4ee5\u88ab\u7528\u4e8e\u8bbf\u95ee\u8fd9\u4e9b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u3002 \u751f\u6210\u5668\u662f\u53e6\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u4f7f\u7528 yield \u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fed\u4ee3\u7684\u503c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 return \u8fd4\u56de\u7ed3\u679c\u3002\u751f\u6210\u5668\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u5e76\u4e14\u66f4\u52a0\u7b80\u5355\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668\u7684\u793a\u4f8b\uff1a","title":"\u5f15\u8a00"},{"location":"Python/Python/Ox02%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_2","text":"","title":"\u793a\u4f8b"},{"location":"Python/Python/Ox02%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_3","text":"\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 __iter__() \u548c __next__() \u65b9\u6cd5\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u5408\u7684\u904d\u5386\u3002\u5176\u4e2d\uff0c __iter__() \u65b9\u6cd5\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61\u672c\u8eab\uff0c \u800c __next__() \u65b9\u6cd5\u8fd4\u56de\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u629b\u51fa StopIteration \u5f02\u5e38\u3002 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7528\u4e8e\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u5408\uff0c\u56e0\u4e3a\u5b83\u53ea\u5728\u9700\u8981\u65f6\u751f\u6210\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u52a0\u8f7d\u6574\u4e2a\u6570\u636e\u96c6\u5408\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1a class MyIterator : def __init__ ( self , start , end ): self . current = start self . end = end def __iter__ ( self ): return self def __next__ ( self ): if self . current >= self . end : raise StopIteration else : self . current += 1 return self . current - 1 # 0,1,2,3,4,5, for i in MyIterator ( 0 , 6 ): print ( i , end = \",\" ) \u4e0a\u8ff0\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a MyIterator \u7c7b\uff0c\u5b83\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u4ece start \u5f00\u59cb\u3001 end \u7ed3\u675f\u7684\u6574\u6570\u5e8f\u5217\u3002 \u5728 __next__() \u65b9\u6cd5\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u503c\u5df2\u7ecf\u8d85\u8fc7\u4e86 end \uff0c\u5219\u629b\u51fa StopIteration \u5f02\u5e38\uff0c\u5426\u5219\u5c06\u5f53\u524d\u503c\u52a0 1 \u5e76\u8fd4\u56de\u3002 \u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u53ea\u9700\u8981\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u5b83\u5373\u53ef\u3002","title":"\u8fed\u4ee3\u5668"},{"location":"Python/Python/Ox02%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_4","text":"\u751f\u6210\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u4f7f\u7528 yield \u8bed\u53e5\u6765\u4ea7\u751f\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0e\u8fed\u4ee3\u5668\u4e0d\u540c\uff0c\u751f\u6210\u5668\u53ef\u4ee5\u4fdd\u7559\u5f53\u524d\u72b6\u6001\uff0c\u5e76\u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u65f6\u4ece\u5f53\u524d\u72b6\u6001\u7ee7\u7eed\u6267\u884c\u3002 \u56e0\u6b64\uff0c\u751f\u6210\u5668\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u5730\u5904\u7406\u6570\u636e\u96c6\u5408\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u751f\u6210\u5668\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a yield\uff1a\u7528\u4e8e\u751f\u6210\u5668\u51fd\u6570\uff0c\u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4fdd\u7559\u51fd\u6570\u5f53\u524d\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u7684\u8c03\u7528\u3002 yield from\uff1a\u7528\u4e8e\u751f\u6210\u5668\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u4e2d\u8c03\u7528\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 yield \u7684\u4f7f\u7528\u793a\u4f8b\uff1a def simple_generator (): yield 1 yield 2 yield 3 # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570 gen = simple_generator () # \u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61 for i in gen : print ( i ) \u8f93\u51fa\u7ed3\u679c: 1 2 3 yield from \u7684\u4f7f\u7528\u793a\u4f8b\uff1a def complex_generator (): yield from [ 1 , 2 , 3 ] yield from ( x * x for x in range ( 4 , 7 )) yield from \"hello\" # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570 gen = complex_generator () # \u904d\u5386\u751f\u6210\u5668\u5bf9\u8c61 for i in gen : print ( i ) \u8f93\u51fa\u7ed3\u679c: 1 2 3 16 25 36 h e l l o \u53ef\u4ee5\u770b\u51fa\uff0c yield from \u53ef\u4ee5\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u76f4\u63a5\u4f20\u9012\u7ed9\u751f\u6210\u5668\u7684\u8c03\u7528\u65b9\uff0c\u4f7f\u5f97\u751f\u6210\u5668\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u52a0\u7b80\u6d01\u3002","title":"\u751f\u6210\u5668"},{"location":"Python/Python/Ox03%E9%97%AD%E5%8C%85/","text":"Python\u95ed\u5305\u4ecb\u7ecd Python\u95ed\u5305\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u5b83\u5916\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u5916\u90e8\u4f5c\u7528\u57df\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002 \u5b83\u53ef\u4ee5\u8bb0\u4f4f\u5916\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5e76\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5185\u90e8\u51fd\u6570\u3002 \u793a\u4f8b \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684python\u95ed\u5305\u793a\u4f8b \uff1a def outer_func ( x ): def inner_func ( y ): return x + y return inner_func add_5 = outer_func ( 5 ) print ( add_5 ( 3 )) # 8 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5916\u90e8\u51fd\u6570outer_func\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570x\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u51fd\u6570inner_func\u3002 \u5185\u90e8\u51fd\u6570inner_func\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570y\uff0c\u5e76\u8fd4\u56dex + y\u7684\u7ed3\u679c\u3002 \u6211\u4eec\u5c06\u5916\u90e8\u51fd\u6570outer_func\u4f20\u9012\u7ed9\u53d8\u91cfadd_5\uff0c\u5e76\u5c06\u53c2\u6570x\u8bbe\u7f6e\u4e3a5\u3002 \u56e0\u6b64\uff0cadd_5\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5916\u90e8\u51fd\u6570outer_func\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfx\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a5\uff0c\u5373\u4f7f\u5916\u90e8\u51fd\u6570\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002 \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5c06\u53c2\u6570y\u4f20\u9012\u7ed9add_5\u65f6\uff0c\u5b83\u5c06\u8fd4\u56dex + y\u7684\u7ed3\u679c\uff0c\u53735 + y\u3002 \u6df1\u6d45\u62f7\u8d1d\u793a\u4f8b # \u6d45\u62f7\u8d1d import copy def outer ( x ): y = x def inner (): nonlocal y y += 1 return y return inner if __name__ == '__main__' : f = outer ( 10 ) f1 = copy . copy ( f ) print ( f ()) # 11 print ( f1 ()) # 12 # \u6df1\u62f7\u8d1d import copy def outer ( x ): y = x def inner (): nonlocal y y += 1 return y return inner if __name__ == '__main__' : f = outer ( 10 ) f1 = copy . deepcopy ( f ) print ( f ()) # 11 print ( f1 ()) # 11","title":"Ox03\u95ed\u5305"},{"location":"Python/Python/Ox03%E9%97%AD%E5%8C%85/#python","text":"Python\u95ed\u5305\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u5b83\u5916\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u5916\u90e8\u4f5c\u7528\u57df\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002 \u5b83\u53ef\u4ee5\u8bb0\u4f4f\u5916\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5e76\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5185\u90e8\u51fd\u6570\u3002","title":"Python\u95ed\u5305\u4ecb\u7ecd"},{"location":"Python/Python/Ox03%E9%97%AD%E5%8C%85/#_1","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684python\u95ed\u5305\u793a\u4f8b \uff1a def outer_func ( x ): def inner_func ( y ): return x + y return inner_func add_5 = outer_func ( 5 ) print ( add_5 ( 3 )) # 8 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5916\u90e8\u51fd\u6570outer_func\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570x\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u51fd\u6570inner_func\u3002 \u5185\u90e8\u51fd\u6570inner_func\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570y\uff0c\u5e76\u8fd4\u56dex + y\u7684\u7ed3\u679c\u3002 \u6211\u4eec\u5c06\u5916\u90e8\u51fd\u6570outer_func\u4f20\u9012\u7ed9\u53d8\u91cfadd_5\uff0c\u5e76\u5c06\u53c2\u6570x\u8bbe\u7f6e\u4e3a5\u3002 \u56e0\u6b64\uff0cadd_5\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5916\u90e8\u51fd\u6570outer_func\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfx\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a5\uff0c\u5373\u4f7f\u5916\u90e8\u51fd\u6570\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002 \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5c06\u53c2\u6570y\u4f20\u9012\u7ed9add_5\u65f6\uff0c\u5b83\u5c06\u8fd4\u56dex + y\u7684\u7ed3\u679c\uff0c\u53735 + y\u3002","title":"\u793a\u4f8b"},{"location":"Python/Python/Ox03%E9%97%AD%E5%8C%85/#_2","text":"# \u6d45\u62f7\u8d1d import copy def outer ( x ): y = x def inner (): nonlocal y y += 1 return y return inner if __name__ == '__main__' : f = outer ( 10 ) f1 = copy . copy ( f ) print ( f ()) # 11 print ( f1 ()) # 12 # \u6df1\u62f7\u8d1d import copy def outer ( x ): y = x def inner (): nonlocal y y += 1 return y return inner if __name__ == '__main__' : f = outer ( 10 ) f1 = copy . deepcopy ( f ) print ( f ()) # 11 print ( f1 ()) # 11","title":"\u6df1\u6d45\u62f7\u8d1d\u793a\u4f8b"},{"location":"Python/Python/Ox04%E8%87%AA%E7%9C%81%E5%92%8C%E5%8F%8D%E5%B0%84/","text":"\u81ea\u7701 Python\u7684\u81ea\u7701\uff08Reflection\uff09\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u4ece\u800c\u53ef\u4ee5\u52a8\u6001\u5730\u64cd\u4f5c\u4efb\u610f\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u9759\u6001\u5730\u58f0\u660e\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528Python\u81ea\u7701\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7c7b\u578b\u53d8\u91cf\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a class Person : def __init__ ( self , name , age ): self . name = name self . age = age # \u5b9e\u4f8b\u5316 p = Person ( 'Mike' , 1 ) # \u4f7f\u7528\u5185\u7f6e\u7684type()\u51fd\u6570\u83b7\u53d6p\u7684\u7c7b\u578b print ( type ( p )) # \u4f7f\u7528\u5185\u7f6e\u7684dir()\u51fd\u6570\u83b7\u53d6p\u7684\u5c5e\u6027 print ( dir ( p )) # \u4f7f\u7528getattr()\u51fd\u6570\u83b7\u53d6p\u5bf9\u8c61\u7684\u5c5e\u6027 print ( getattr ( p , 'name' )) # \u4f7f\u7528setattr()\u51fd\u6570\u4fee\u6539p\u5bf9\u8c61\u7684\u5c5e\u6027 setattr ( p , 'age' , 20 ) print ( p . age ) \u53cd\u5c04 Python \u53cd\u5c04\u662f\u4e00\u79cd\u52a8\u6001\u83b7\u53d6\u5bf9\u8c61\u4fe1\u606f\u7684\u80fd\u529b\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u4ee5\u53ca\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def say_hello ( self ): print ( 'Hello, my name is %s ' % self . name ) # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b p = Person ( 'John' , 20 ) # \u4f7f\u7528\u53cd\u5c04\u83b7\u53d6\u5b9e\u4f8b\u7684\u5c5e\u6027 print ( getattr ( p , 'name' )) # John # \u4f7f\u7528\u53cd\u5c04\u4fee\u6539\u5b9e\u4f8b\u7684\u5c5e\u6027 setattr ( p , 'age' , 30 ) print ( p . age ) # 30 # \u4f7f\u7528\u53cd\u5c04\u8c03\u7528\u5b9e\u4f8b\u7684\u65b9\u6cd5 method = getattr ( p , 'say_hello' ) method () # Hello, my name is John John 30 Hello , my name is John","title":"Ox04\u81ea\u7701\u548c\u53cd\u5c04"},{"location":"Python/Python/Ox04%E8%87%AA%E7%9C%81%E5%92%8C%E5%8F%8D%E5%B0%84/#_1","text":"Python\u7684\u81ea\u7701\uff08Reflection\uff09\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u4ece\u800c\u53ef\u4ee5\u52a8\u6001\u5730\u64cd\u4f5c\u4efb\u610f\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u9759\u6001\u5730\u58f0\u660e\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528Python\u81ea\u7701\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7c7b\u578b\u53d8\u91cf\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a class Person : def __init__ ( self , name , age ): self . name = name self . age = age # \u5b9e\u4f8b\u5316 p = Person ( 'Mike' , 1 ) # \u4f7f\u7528\u5185\u7f6e\u7684type()\u51fd\u6570\u83b7\u53d6p\u7684\u7c7b\u578b print ( type ( p )) # \u4f7f\u7528\u5185\u7f6e\u7684dir()\u51fd\u6570\u83b7\u53d6p\u7684\u5c5e\u6027 print ( dir ( p )) # \u4f7f\u7528getattr()\u51fd\u6570\u83b7\u53d6p\u5bf9\u8c61\u7684\u5c5e\u6027 print ( getattr ( p , 'name' )) # \u4f7f\u7528setattr()\u51fd\u6570\u4fee\u6539p\u5bf9\u8c61\u7684\u5c5e\u6027 setattr ( p , 'age' , 20 ) print ( p . age )","title":"\u81ea\u7701"},{"location":"Python/Python/Ox04%E8%87%AA%E7%9C%81%E5%92%8C%E5%8F%8D%E5%B0%84/#_2","text":"Python \u53cd\u5c04\u662f\u4e00\u79cd\u52a8\u6001\u83b7\u53d6\u5bf9\u8c61\u4fe1\u606f\u7684\u80fd\u529b\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u4ee5\u53ca\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def say_hello ( self ): print ( 'Hello, my name is %s ' % self . name ) # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b p = Person ( 'John' , 20 ) # \u4f7f\u7528\u53cd\u5c04\u83b7\u53d6\u5b9e\u4f8b\u7684\u5c5e\u6027 print ( getattr ( p , 'name' )) # John # \u4f7f\u7528\u53cd\u5c04\u4fee\u6539\u5b9e\u4f8b\u7684\u5c5e\u6027 setattr ( p , 'age' , 30 ) print ( p . age ) # 30 # \u4f7f\u7528\u53cd\u5c04\u8c03\u7528\u5b9e\u4f8b\u7684\u65b9\u6cd5 method = getattr ( p , 'say_hello' ) method () # Hello, my name is John John 30 Hello , my name is John","title":"\u53cd\u5c04"},{"location":"Python/Python/Ox05%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/","text":"\u3010\u751f\u4ea7-\u6d88\u8d39\u6a21\u578b\u3011\u751f\u4ea7\u8005 - \u6d88\u8d39\u8005\u6a21\u578b\u539f\u7406\u53ca\u5b9e\u73b0 \u5f15\u8a00 \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u662f\u4e00\u79cd\u6a21\u62df\u7cfb\u7edf\u4e2d\u7684\u591a\u4efb\u52a1\u5904\u7406\u7684\u6a21\u578b\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u7ec4\u8fdb\u7a0b\u4e4b\u95f4\u7684\u534f\u4f5c\u5173\u7cfb\uff0c\u5176\u4e2d\u4e00\u7ec4\u8fdb\u7a0b\u8d1f\u8d23\u751f\u4ea7\u6570\u636e\uff0c\u53e6\u4e00\u7ec4\u8fdb\u7a0b\u8d1f\u8d23\u6d88\u8d39\u6570\u636e\u3002 1\u3001\u6309\u7167\u4efb\u52a1\u7c7b\u578b\u5206\u7c7b\uff1a \uff081\uff09\u751f\u4ea7\u8005\u4efb\u52a1\uff1a\u6307\u7684\u662f\u751f\u4ea7\u8005\u8fdb\u7a0b\uff0c\u5b83\u8d1f\u8d23\u751f\u4ea7\u6570\u636e\uff0c\u5c06\u6570\u636e\u653e\u5165\u7f13\u51b2\u533a\u4e2d\uff0c\u4ee5\u4fbf\u6d88\u8d39\u8005\u8fdb\u7a0b\u4f7f\u7528\u3002 \uff082\uff09\u6d88\u8d39\u8005\u4efb\u52a1\uff1a\u6307\u7684\u662f\u6d88\u8d39\u8005\u8fdb\u7a0b\uff0c\u5b83\u8d1f\u8d23\u4ece\u7f13\u51b2\u533a\u4e2d\u53d6\u51fa\u6570\u636e\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 2\u3001\u6309\u7167\u7f13\u51b2\u533a\u7c7b\u578b\u5206\u7c7b\uff1a \uff081\uff09\u6709\u754c\u7f13\u51b2\u533a\uff1a\u6307\u7684\u662f\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u6709\u9650\uff0c\u5f53\u7f13\u51b2\u533a\u6ee1\u65f6\uff0c\u751f\u4ea7\u8005\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u7ee7\u7eed\u751f\u4ea7\u6570\u636e\uff0c\u800c\u5f53\u7f13\u51b2\u533a\u7a7a\u65f6\uff0c\u6d88\u8d39\u8005\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u7ee7\u7eed\u6d88\u8d39\u6570\u636e\u3002 \uff082\uff09\u65e0\u754c\u7f13\u51b2\u533a\uff1a\u6307\u7684\u662f\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u65e0\u9650\uff0c\u751f\u4ea7\u8005\u8fdb\u7a0b\u53ef\u4ee5\u4e00\u76f4\u751f\u4ea7\u6570\u636e\uff0c\u800c\u6d88\u8d39\u8005\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\u4e00\u76f4\u6d88\u8d39\u6570\u636e\u3002 \u901a\u8fc7\u591a\u7ebf\u7a0b+\u961f\u5217\u7684\u65b9\u5f0f import threading import queue # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u961f\u5217 q = queue . Queue () # \u751f\u4ea7\u8005\u7ebf\u7a0b def producer (): count = 0 while True : q . put ( \"\u9aa8\u5934 %s \" % count ) print ( \"\u751f\u4ea7\u4e86\u9aa8\u5934 %s \" % count ) count += 1 # \u6d88\u8d39\u8005\u7ebf\u7a0b def consumer (): while True : print ( \"\u5403\u4e86 %s \" % q . get ()) # \u521b\u5efa\u4e24\u4e2a\u7ebf\u7a0b p = threading . Thread ( target = producer ) c = threading . Thread ( target = consumer ) # \u542f\u52a8\u4e24\u4e2a\u7ebf\u7a0b p . start () c . start () q.get() \u65b9\u6cd5\u7528\u4e8e\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u9879\u76ee\u3002 \u961f\u5217\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa(FIFO)\u7684\u5bb9\u5668\u5bf9\u8c61\uff0c\u5176\u4e2d\u7684\u9879\u76ee\u6309\u63d2\u5165\u987a\u5e8f\u6392\u5217\u3002 q.get() \u5c06\u4ece\u961f\u5217\u7684\u5f00\u5934\u5220\u9664\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u9879\u76ee\u3002 # \u751f\u4ea7\u8005 def producer ( name ): print ( \"\u751f\u4ea7\u8005 %s \u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1\" % name ) while True : product = yield print ( \"\u751f\u4ea7\u8005 %s \u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a %s \" % ( name , product )) # \u6d88\u8d39\u8005 def consumer ( name ): print ( \"\u6d88\u8d39\u8005 %s \u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1\" % name ) while True : product = yield print ( \"\u6d88\u8d39\u8005 %s \u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a %s \" % ( name , product )) # \u4e2d\u95f4\u4ef6 def middleware (): producer_A = producer ( 'A' ) producer_B = producer ( 'B' ) consumer_C = consumer ( 'C' ) consumer_D = consumer ( 'D' ) # \u542f\u52a8\u751f\u4ea7\u8005 next ( producer_A ) next ( producer_B ) # \u542f\u52a8\u6d88\u8d39\u8005 next ( consumer_C ) next ( consumer_D ) # \u5f00\u59cb\u4f20\u9012\u4ea7\u54c1 for i in range ( 10 ): product_A = '\u4ea7\u54c1A-' + str ( i ) product_B = '\u4ea7\u54c1B-' + str ( i ) # \u751f\u4ea7\u8005A\u751f\u4ea7\u4ea7\u54c1 producer_A . send ( product_A ) # \u751f\u4ea7\u8005B\u751f\u4ea7\u4ea7\u54c1 producer_B . send ( product_B ) # \u6d88\u8d39\u8005C\u6d88\u8d39\u4ea7\u54c1 consumer_C . send ( product_A ) # \u6d88\u8d39\u8005D\u6d88\u8d39\u4ea7\u54c1 consumer_D . send ( product_B ) # \u542f\u52a8\u4e2d\u95f4\u4ef6 middleware () \u751f\u4ea7\u8005A\u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1 \u751f\u4ea7\u8005B\u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1 \u6d88\u8d39\u8005C\u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1 \u6d88\u8d39\u8005D\u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-0 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-0 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-0 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-0 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-1 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-1 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-1 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-1 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-2 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-2 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-2 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-2 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-3 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-3 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-3 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-3 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-4 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-4 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-4 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-4 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-5 ... \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-9 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-9 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-9 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-9 Reference \u3010\u751f\u4ea7-\u6d88\u8d39\u6a21\u578b\u3011\u751f\u4ea7\u8005 - \u6d88\u8d39\u8005\u6a21\u578b\u539f\u7406\u53ca\u5b9e\u73b0","title":"Ox05\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b"},{"location":"Python/Python/Ox05%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/#_1","text":"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u662f\u4e00\u79cd\u6a21\u62df\u7cfb\u7edf\u4e2d\u7684\u591a\u4efb\u52a1\u5904\u7406\u7684\u6a21\u578b\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u7ec4\u8fdb\u7a0b\u4e4b\u95f4\u7684\u534f\u4f5c\u5173\u7cfb\uff0c\u5176\u4e2d\u4e00\u7ec4\u8fdb\u7a0b\u8d1f\u8d23\u751f\u4ea7\u6570\u636e\uff0c\u53e6\u4e00\u7ec4\u8fdb\u7a0b\u8d1f\u8d23\u6d88\u8d39\u6570\u636e\u3002 1\u3001\u6309\u7167\u4efb\u52a1\u7c7b\u578b\u5206\u7c7b\uff1a \uff081\uff09\u751f\u4ea7\u8005\u4efb\u52a1\uff1a\u6307\u7684\u662f\u751f\u4ea7\u8005\u8fdb\u7a0b\uff0c\u5b83\u8d1f\u8d23\u751f\u4ea7\u6570\u636e\uff0c\u5c06\u6570\u636e\u653e\u5165\u7f13\u51b2\u533a\u4e2d\uff0c\u4ee5\u4fbf\u6d88\u8d39\u8005\u8fdb\u7a0b\u4f7f\u7528\u3002 \uff082\uff09\u6d88\u8d39\u8005\u4efb\u52a1\uff1a\u6307\u7684\u662f\u6d88\u8d39\u8005\u8fdb\u7a0b\uff0c\u5b83\u8d1f\u8d23\u4ece\u7f13\u51b2\u533a\u4e2d\u53d6\u51fa\u6570\u636e\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 2\u3001\u6309\u7167\u7f13\u51b2\u533a\u7c7b\u578b\u5206\u7c7b\uff1a \uff081\uff09\u6709\u754c\u7f13\u51b2\u533a\uff1a\u6307\u7684\u662f\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u6709\u9650\uff0c\u5f53\u7f13\u51b2\u533a\u6ee1\u65f6\uff0c\u751f\u4ea7\u8005\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u7ee7\u7eed\u751f\u4ea7\u6570\u636e\uff0c\u800c\u5f53\u7f13\u51b2\u533a\u7a7a\u65f6\uff0c\u6d88\u8d39\u8005\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u7ee7\u7eed\u6d88\u8d39\u6570\u636e\u3002 \uff082\uff09\u65e0\u754c\u7f13\u51b2\u533a\uff1a\u6307\u7684\u662f\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u65e0\u9650\uff0c\u751f\u4ea7\u8005\u8fdb\u7a0b\u53ef\u4ee5\u4e00\u76f4\u751f\u4ea7\u6570\u636e\uff0c\u800c\u6d88\u8d39\u8005\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\u4e00\u76f4\u6d88\u8d39\u6570\u636e\u3002","title":"\u5f15\u8a00"},{"location":"Python/Python/Ox05%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/#_2","text":"import threading import queue # \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u961f\u5217 q = queue . Queue () # \u751f\u4ea7\u8005\u7ebf\u7a0b def producer (): count = 0 while True : q . put ( \"\u9aa8\u5934 %s \" % count ) print ( \"\u751f\u4ea7\u4e86\u9aa8\u5934 %s \" % count ) count += 1 # \u6d88\u8d39\u8005\u7ebf\u7a0b def consumer (): while True : print ( \"\u5403\u4e86 %s \" % q . get ()) # \u521b\u5efa\u4e24\u4e2a\u7ebf\u7a0b p = threading . Thread ( target = producer ) c = threading . Thread ( target = consumer ) # \u542f\u52a8\u4e24\u4e2a\u7ebf\u7a0b p . start () c . start () q.get() \u65b9\u6cd5\u7528\u4e8e\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u9879\u76ee\u3002 \u961f\u5217\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa(FIFO)\u7684\u5bb9\u5668\u5bf9\u8c61\uff0c\u5176\u4e2d\u7684\u9879\u76ee\u6309\u63d2\u5165\u987a\u5e8f\u6392\u5217\u3002 q.get() \u5c06\u4ece\u961f\u5217\u7684\u5f00\u5934\u5220\u9664\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u9879\u76ee\u3002","title":"\u901a\u8fc7\u591a\u7ebf\u7a0b+\u961f\u5217\u7684\u65b9\u5f0f"},{"location":"Python/Python/Ox05%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/#_3","text":"# \u751f\u4ea7\u8005 def producer ( name ): print ( \"\u751f\u4ea7\u8005 %s \u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1\" % name ) while True : product = yield print ( \"\u751f\u4ea7\u8005 %s \u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a %s \" % ( name , product )) # \u6d88\u8d39\u8005 def consumer ( name ): print ( \"\u6d88\u8d39\u8005 %s \u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1\" % name ) while True : product = yield print ( \"\u6d88\u8d39\u8005 %s \u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a %s \" % ( name , product )) # \u4e2d\u95f4\u4ef6 def middleware (): producer_A = producer ( 'A' ) producer_B = producer ( 'B' ) consumer_C = consumer ( 'C' ) consumer_D = consumer ( 'D' ) # \u542f\u52a8\u751f\u4ea7\u8005 next ( producer_A ) next ( producer_B ) # \u542f\u52a8\u6d88\u8d39\u8005 next ( consumer_C ) next ( consumer_D ) # \u5f00\u59cb\u4f20\u9012\u4ea7\u54c1 for i in range ( 10 ): product_A = '\u4ea7\u54c1A-' + str ( i ) product_B = '\u4ea7\u54c1B-' + str ( i ) # \u751f\u4ea7\u8005A\u751f\u4ea7\u4ea7\u54c1 producer_A . send ( product_A ) # \u751f\u4ea7\u8005B\u751f\u4ea7\u4ea7\u54c1 producer_B . send ( product_B ) # \u6d88\u8d39\u8005C\u6d88\u8d39\u4ea7\u54c1 consumer_C . send ( product_A ) # \u6d88\u8d39\u8005D\u6d88\u8d39\u4ea7\u54c1 consumer_D . send ( product_B ) # \u542f\u52a8\u4e2d\u95f4\u4ef6 middleware () \u751f\u4ea7\u8005A\u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1 \u751f\u4ea7\u8005B\u5f00\u59cb\u51c6\u5907\u751f\u4ea7\u4ea7\u54c1 \u6d88\u8d39\u8005C\u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1 \u6d88\u8d39\u8005D\u5f00\u59cb\u51c6\u5907\u6d88\u8d39\u4ea7\u54c1 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-0 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-0 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-0 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-0 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-1 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-1 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-1 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-1 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-2 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-2 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-2 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-2 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-3 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-3 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-3 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-3 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-4 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-4 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-4 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-4 \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-5 ... \u751f\u4ea7\u8005A\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-9 \u751f\u4ea7\u8005B\u751f\u4ea7\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-9 \u6d88\u8d39\u8005C\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1A-9 \u6d88\u8d39\u8005D\u6d88\u8d39\u4e86\u4e00\u4e2a\u4ea7\u54c1\uff1a\u4ea7\u54c1B-9","title":""},{"location":"Python/Python/Ox05%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/#reference","text":"\u3010\u751f\u4ea7-\u6d88\u8d39\u6a21\u578b\u3011\u751f\u4ea7\u8005 - \u6d88\u8d39\u8005\u6a21\u578b\u539f\u7406\u53ca\u5b9e\u73b0","title":"Reference"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/","text":"\u5f15\u8a00 \u5f02\u6b65\u7f16\u7a0b\u6a21\u578b \u5f02\u6b65\u7f16\u7a0b\u6a21\u578b\u662f\u4e00\u79cd\u8ba1\u7b97\u673a\u7f16\u7a0b\u6a21\u578b\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e4b\u95f4\u5206\u79bb\u4efb\u52a1\uff0c\u4ee5\u4fbf\u4efb\u52a1\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u6bb5\u8fd0\u884c\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002 \u8fdb\u7a0b \u8fdb\u7a0b\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u52a1\u3002 \u7ebf\u7a0b \u7ebf\u7a0b\u662f\u8fdb\u7a0b\u7684\u5b50\u4efb\u52a1\uff0c\u5b83\u53ef\u4ee5\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\uff0c\u5e76\u4e14\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b\u3002 \u540c\u6b65 \u540c\u6b65\u662f\u6307\u5728\u6267\u884c\u4efb\u52a1\u65f6\uff0c\u4efb\u52a1\u5fc5\u987b\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e00\u4e2a\u4efb\u52a1\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002 \u5f02\u6b65 \u5f02\u6b65\u662f\u6307\u5728\u6267\u884c\u4efb\u52a1\u65f6\uff0c\u4efb\u52a1\u4e0d\u5fc5\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u5c31\u5f00\u59cb\u6267\u884c\u3002 \u963b\u585e \u963b\u585e\u662f\u6307\u5f53\u4e00\u4e2a\u4efb\u52a1\u6b63\u5728\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u4efb\u52a1\u5fc5\u987b\u7b49\u5f85\u8be5\u4efb\u52a1\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002 \u975e\u963b\u585e \u975e\u963b\u585e\u662f\u6307\u5f53\u4e00\u4e2a\u4efb\u52a1\u6b63\u5728\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u4efb\u52a1\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u800c\u4e0d\u5fc5\u7b49\u5f85\u8be5\u4efb\u52a1\u5b8c\u6210\u3002 \u5e76\u53d1 \u5e76\u53d1\u662f\u6307\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff0c\u591a\u4e2a\u4efb\u52a1\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u3002 \u5e76\u884c \u5e76\u884c\u662f\u6307\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff0c\u591a\u4e2a\u4efb\u52a1\u53ef\u4ee5\u540c\u65f6\u6267\u884c\uff0c\u4f46\u662f\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5f71\u54cd\u3002 \u751f\u6d3b\u5c0f\u4f8b\u5b50 \u6bd4\u5982\uff0c\u4f60\u6b63\u5728\u505a\u5bb6\u52a1\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u505a\u6d17\u8863\u670d\u548c\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u5e76\u53d1\uff1b\u4f60\u53ef\u4ee5\u5148\u6d17\u8863\u670d\uff0c\u7b49\u8863\u670d\u6d17\u5b8c\u4e86\u518d\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u540c\u6b65\uff1b\u4f60\u53ef\u4ee5\u628a\u6d17\u8863\u670d\u7684\u4efb\u52a1\u4ea4\u7ed9\u522b\u4eba\uff0c\u81ea\u5df1\u53bb\u505a\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u5f02\u6b65\uff1b\u4f60\u53ef\u4ee5\u5148\u6d17\u8863\u670d\uff0c\u7b49\u8863\u670d\u6d17\u5b8c\u4e86\u518d\u53bb\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u963b\u585e\uff1b\u4f60\u53ef\u4ee5\u540c\u65f6\u6d17\u8863\u670d\u548c\u6d17\u7897\uff0c\u4f46\u662f\u6d17\u8863\u670d\u7684\u6c34\u4f1a\u5f71\u54cd\u6d17\u7897\u7684\u6c34\uff0c\u8fd9\u5c31\u662f\u5e76\u884c\u3002 \u5168\u5c40\u89e3\u91ca\u5668\u9501GIL Python\u4f7f\u7528\u4e86\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff08GIL\uff09\u6765\u786e\u4fdd\u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884cPython\u5b57\u8282\u7801\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u6570\u636e\u5e93\u67e5\u8be2\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u67e5\u8be2\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002\u5982\u679c\u6ca1\u6709GIL\uff0c\u90a3\u4e48\u591a\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u4ece\u800c\u5bfc\u81f4\u6570\u636e\u635f\u574f\u3002 GIL\u53ef\u4ee5\u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u5b83\u4f1a\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u673a\u4f1a\u6267\u884c\u5b83\u7684\u67e5\u8be2\u3002\u8fd9\u6837\uff0c\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u80fd\u591f\u5b89\u5168\u5730\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u800c\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u635f\u574f\u7684\u60c5\u51b5\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528GIL\u7684\u793a\u4f8b\uff1a import threading def worker(): print('Worker') t = threading.Thread(target=worker) t.start() # GIL\u4f1a\u5728\u8fd9\u91cc\u963b\u6b62\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\uff0c\u76f4\u5230\u5f53\u524d\u7ebf\u7a0b\u5b8c\u6210 t.join() print('Done') \u4e0a\u9762\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u4f7f\u7528GIL\u9501\u5b9a\uff0c\u4ee5\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u3002\u5f53\u7ebf\u7a0b\u5b8c\u6210\u540e\uff0cGIL\u4f1a\u91ca\u653e\uff0c\u5141\u8bb8\u5176\u4ed6\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u3002 \u591a\u7ebf\u7a0b \u4e00\u3001\u5f15\u8a00 Python \u591a\u7ebf\u7a0b\u662f\u4e00\u79cd\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7684\u7a0b\u5e8f\u66f4\u6709\u6548\u7387\u3002Python\u591a\u7ebf\u7a0b\u53ef\u4ee5\u5728\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b9e\u73b0\u591a\u4efb\u52a1\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u4f7f\u7528\u8ba1\u7b97\u673a\u7684\u8d44\u6e90\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\u3002 \u4e8c\u3001\u4f7f\u7528\u793a\u4f8b \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684Python\u591a\u7ebf\u7a0b\u793a\u4f8b\uff0c\u7528\u6765\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u7684\u548c\uff1a import threading def sum ( a , b ): print ( a + b ) t1 = threading . Thread ( target = sum , args = ( 2 , 3 )) t1 . start () \u4e09\u3001\u7528\u6cd5\u6307\u5357 \u521b\u5efa\u7ebf\u7a0b\uff1a threading . Thread ( target = \u51fd\u6570\u540d , args = ( \u53c2\u65701 \uff0c \u53c2\u65702 ... )) \u542f\u52a8\u7ebf\u7a0b\uff1a t1.start() \u9501\u5b9a\u7ebf\u7a0b\uff1a threading.Lock() \u8fde\u63a5\u7ebf\u7a0b\uff1a t1.join() \u4eceLinux\u8d44\u6e90\u7ba1\u7406\u89d2\u5ea6\u51fa\u53d1\uff0c\u53ef\u4ee5\u4f7f\u7528Python\u591a\u7ebf\u7a0b\u6765\u9650\u5236\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u63a7\u5236CPU\u7684\u5229\u7528\u7387\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u3002 \u591a\u8fdb\u7a0b Python\u4e2d\u7684\u591a\u8fdb\u7a0b\u662f\u6307\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u3002\u8fd9\u79cd\u6280\u672f\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5e76\u4e14\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u5bb9\u6613\u7ba1\u7406\u3002 \u4f7f\u7528\u793a\u4f8b\uff1a \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528Python\u5b9e\u73b0\u591a\u8fdb\u7a0b\u7684\u793a\u4f8b\uff1a import os from multiprocessing import Process def run_process ( name ): print ( 'Run child process %s ( %s )...' % ( name , os . getpid ())) if __name__ == '__main__' : print ( 'Parent process %s .' % os . getpid ()) p = Process ( target = run_process , args = ( 'test' ,)) print ( 'Child process will start.' ) p . start () p . join () print ( 'Child process end.' ) \u7528\u6cd5\u6307\u5357\uff1a \u4f7f\u7528multiprocessing\u6a21\u5757\uff1a \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ecePython\u7684\u6807\u51c6\u5e93\u4e2d\u5bfc\u5165multiprocessing\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u8fdb\u7a0b\u7684\u51fd\u6570\u3002 \u521b\u5efa\u8fdb\u7a0b\uff1a \u4f7f\u7528multiprocessing\u6a21\u5757\u4e2d\u7684Process\u7c7b\u6765\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8be5\u7c7b\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u4f5c\u4e3a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002 \u542f\u52a8\u8fdb\u7a0b\uff1a \u4f7f\u7528Process\u7c7b\u7684start()\u65b9\u6cd5\u6765\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8be5\u65b9\u6cd5\u5c06\u8c03\u7528\u6307\u5b9a\u7684\u51fd\u6570\u5e76\u5f00\u59cb\u6267\u884c\u3002 \u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\uff1a \u4f7f\u7528Process\u7c7b\u7684join()\u65b9\u6cd5\u6765\u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\uff0c\u8be5\u65b9\u6cd5\u5c06\u963b\u585e\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7684\u8fdb\u7a0b\u7ed3\u675f\u3002 \u4eceLinux\u8d44\u6e90\u7ba1\u7406\u89d2\u5ea6\u51fa\u53d1\uff0cPython\u4e2d\u7684\u591a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u6548\u5730\u5229\u7528\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u5b83\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u5bb9\u6613\u7ba1\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u5229\u7528\u591a\u6838\u5904\u7406\u5668\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u3002 from multiprocessing import Pool def f ( x ): return x * x if __name__ == '__main__' : with Pool ( 5 ) as p : print ( p . map ( f , [ 1 , 2 , 3 ])) map()\u51fd\u6570\u7528\u4e8e\u5c06\u6307\u5b9a\u51fd\u6570func\u4f5c\u7528\u5230\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u8fd4\u56de\u3002 chunksize\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u4e00\u6b21\u8fed\u4ee3\u6240\u6709\u5143\u7d20\u3002 \u534f\u7a0b \u534f\u7a0b\u662f\u4e00\u79cd\u7528\u4e8e\u6539\u5584\u7a0b\u5e8f\u6027\u80fd\u7684\u6280\u672f\uff0c\u5b83\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u4efb\u52a1\u4e4b\u95f4\u5207\u6362\uff0c\u800c\u4e0d\u4f1a\u6d88\u8017\u592a\u591a\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u3002\u534f\u7a0b\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u9ad8\u6548\uff0c\u51cf\u5c11\u7b49\u5f85\u65f6\u95f4\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u9760\u6027\u548c\u6027\u80fd\uff0c\u5e76\u6709\u52a9\u4e8e\u51cf\u5c11\u8d44\u6e90\u6d88\u8017\u3002 \u4f7f\u7528\u793a\u4f8b \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528python\u534f\u7a0b\u7684\u793a\u4f8b\uff1a import asyncio async def my_coroutine (): print ( \"I'm a coroutine!\" ) loop = asyncio . get_event_loop () loop . run_until_complete ( my_coroutine ()) loop . close () \u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528asyncio\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\uff0c\u7136\u540e\u4f7f\u7528get_event_loop()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u6700\u540e\u4f7f\u7528run_until_complete()\u51fd\u6570\u8fd0\u884c\u534f\u7a0b\uff0c\u6700\u540e\u5173\u95ed\u4e8b\u4ef6\u5faa\u73af\u3002 \u7528\u6cd5\u6307\u5357 1. \u521b\u5efa\u534f\u7a0b \u8981\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\uff0c\u9700\u8981\u4f7f\u7528async\u5173\u952e\u5b57\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\uff0c\u4f8b\u5982\uff1a async def my_coroutine (): print ( \"I'm a coroutine!\" ) 2. \u8fd0\u884c\u534f\u7a0b \u8981\u8fd0\u884c\u534f\u7a0b\uff0c\u9700\u8981\u4f7f\u7528asyncio\u6a21\u5757\u7684get_event_loop()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u4f7f\u7528run_until_complete()\u51fd\u6570\u8fd0\u884c\u534f\u7a0b\uff0c\u4f8b\u5982\uff1a loop = asyncio . get_event_loop () loop . run_until_complete ( my_coroutine ()) loop . close () 3. \u5c06\u534f\u7a0b\u653e\u5165\u4efb\u52a1\u961f\u5217 \u8981\u5c06\u534f\u7a0b\u653e\u5165\u4efb\u52a1\u961f\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528asyncio\u6a21\u5757\u7684create_task()\u51fd\u6570\uff0c\u4f8b\u5982\uff1a task = asyncio . create_task ( my_coroutine ()) 4. \u5c06\u4efb\u52a1\u653e\u5165\u4e8b\u4ef6\u5faa\u73af \u8981\u5c06\u4efb\u52a1\u653e\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u4f7f\u7528asyncio\u6a21\u5757\u7684run_until_complete()\u51fd\u6570\uff0c\u4f8b\u5982\uff1a loop = asyncio . get_event_loop () loop . run_until_complete ( task ) 5. \u4f7f\u7528Linux\u8d44\u6e90\u7ba1\u7406 \u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528cgroups\u6280\u672f\u6765\u7ba1\u7406\u534f\u7a0b\uff0c\u4ee5\u63a7\u5236\u5176\u4f7f\u7528\u7684\u8d44\u6e90\uff0c\u4f8b\u5982\uff1a # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3amy_cgroup\u7684cgroup sudo cgcreate -g cpu,memory,blkio:my_cgroup # \u5c06\u534f\u7a0b\u653e\u5165my_cgroup sudo cgclassify -g cpu,memory,blkio:my_cgroup my_coroutine # \u8bbe\u7f6emy_cgroup\u7684CPU\u9650\u5236 sudo cgset -r cpu.cfs_quota_us = 1000 my_cgroup # \u8bbe\u7f6emy_cgroup\u7684\u5185\u5b58\u9650\u5236 sudo cgset -r memory.limit_in_bytes = 1024 my_cgroup \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u540d\u4e3amy_cgroup\u7684cgroup\uff0c\u5e76\u5c06\u534f\u7a0b\u653e\u5165my_cgroup\uff0c\u7136\u540e\u8bbe\u7f6emy_cgroup\u7684CPU\u548c\u5185\u5b58\u9650\u5236\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u63a7\u5236\u534f\u7a0b\u4f7f\u7528\u7684\u8d44\u6e90\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd\u3002","title":"Ox06\u5f02\u6b65\u7f16\u7a0b\u6a21\u578b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_1","text":"\u5f02\u6b65\u7f16\u7a0b\u6a21\u578b \u5f02\u6b65\u7f16\u7a0b\u6a21\u578b\u662f\u4e00\u79cd\u8ba1\u7b97\u673a\u7f16\u7a0b\u6a21\u578b\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e4b\u95f4\u5206\u79bb\u4efb\u52a1\uff0c\u4ee5\u4fbf\u4efb\u52a1\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u6bb5\u8fd0\u884c\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002 \u8fdb\u7a0b \u8fdb\u7a0b\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u52a1\u3002 \u7ebf\u7a0b \u7ebf\u7a0b\u662f\u8fdb\u7a0b\u7684\u5b50\u4efb\u52a1\uff0c\u5b83\u53ef\u4ee5\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\uff0c\u5e76\u4e14\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b\u3002 \u540c\u6b65 \u540c\u6b65\u662f\u6307\u5728\u6267\u884c\u4efb\u52a1\u65f6\uff0c\u4efb\u52a1\u5fc5\u987b\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e00\u4e2a\u4efb\u52a1\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002 \u5f02\u6b65 \u5f02\u6b65\u662f\u6307\u5728\u6267\u884c\u4efb\u52a1\u65f6\uff0c\u4efb\u52a1\u4e0d\u5fc5\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u5c31\u5f00\u59cb\u6267\u884c\u3002 \u963b\u585e \u963b\u585e\u662f\u6307\u5f53\u4e00\u4e2a\u4efb\u52a1\u6b63\u5728\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u4efb\u52a1\u5fc5\u987b\u7b49\u5f85\u8be5\u4efb\u52a1\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002 \u975e\u963b\u585e \u975e\u963b\u585e\u662f\u6307\u5f53\u4e00\u4e2a\u4efb\u52a1\u6b63\u5728\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u4efb\u52a1\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u800c\u4e0d\u5fc5\u7b49\u5f85\u8be5\u4efb\u52a1\u5b8c\u6210\u3002 \u5e76\u53d1 \u5e76\u53d1\u662f\u6307\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff0c\u591a\u4e2a\u4efb\u52a1\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u3002 \u5e76\u884c \u5e76\u884c\u662f\u6307\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff0c\u591a\u4e2a\u4efb\u52a1\u53ef\u4ee5\u540c\u65f6\u6267\u884c\uff0c\u4f46\u662f\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5f71\u54cd\u3002 \u751f\u6d3b\u5c0f\u4f8b\u5b50 \u6bd4\u5982\uff0c\u4f60\u6b63\u5728\u505a\u5bb6\u52a1\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u505a\u6d17\u8863\u670d\u548c\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u5e76\u53d1\uff1b\u4f60\u53ef\u4ee5\u5148\u6d17\u8863\u670d\uff0c\u7b49\u8863\u670d\u6d17\u5b8c\u4e86\u518d\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u540c\u6b65\uff1b\u4f60\u53ef\u4ee5\u628a\u6d17\u8863\u670d\u7684\u4efb\u52a1\u4ea4\u7ed9\u522b\u4eba\uff0c\u81ea\u5df1\u53bb\u505a\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u5f02\u6b65\uff1b\u4f60\u53ef\u4ee5\u5148\u6d17\u8863\u670d\uff0c\u7b49\u8863\u670d\u6d17\u5b8c\u4e86\u518d\u53bb\u6d17\u7897\uff0c\u8fd9\u5c31\u662f\u963b\u585e\uff1b\u4f60\u53ef\u4ee5\u540c\u65f6\u6d17\u8863\u670d\u548c\u6d17\u7897\uff0c\u4f46\u662f\u6d17\u8863\u670d\u7684\u6c34\u4f1a\u5f71\u54cd\u6d17\u7897\u7684\u6c34\uff0c\u8fd9\u5c31\u662f\u5e76\u884c\u3002","title":"\u5f15\u8a00"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#gil","text":"Python\u4f7f\u7528\u4e86\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff08GIL\uff09\u6765\u786e\u4fdd\u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884cPython\u5b57\u8282\u7801\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u6570\u636e\u5e93\u67e5\u8be2\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u67e5\u8be2\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002\u5982\u679c\u6ca1\u6709GIL\uff0c\u90a3\u4e48\u591a\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u4ece\u800c\u5bfc\u81f4\u6570\u636e\u635f\u574f\u3002 GIL\u53ef\u4ee5\u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u6570\u636e\u5e93\u3002\u5b83\u4f1a\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u673a\u4f1a\u6267\u884c\u5b83\u7684\u67e5\u8be2\u3002\u8fd9\u6837\uff0c\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u80fd\u591f\u5b89\u5168\u5730\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u800c\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u635f\u574f\u7684\u60c5\u51b5\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528GIL\u7684\u793a\u4f8b\uff1a import threading def worker(): print('Worker') t = threading.Thread(target=worker) t.start() # GIL\u4f1a\u5728\u8fd9\u91cc\u963b\u6b62\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\uff0c\u76f4\u5230\u5f53\u524d\u7ebf\u7a0b\u5b8c\u6210 t.join() print('Done') \u4e0a\u9762\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u4f7f\u7528GIL\u9501\u5b9a\uff0c\u4ee5\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u3002\u5f53\u7ebf\u7a0b\u5b8c\u6210\u540e\uff0cGIL\u4f1a\u91ca\u653e\uff0c\u5141\u8bb8\u5176\u4ed6\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u3002","title":"\u5168\u5c40\u89e3\u91ca\u5668\u9501GIL"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_2","text":"","title":"\u591a\u7ebf\u7a0b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_3","text":"Python \u591a\u7ebf\u7a0b\u662f\u4e00\u79cd\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7684\u7a0b\u5e8f\u66f4\u6709\u6548\u7387\u3002Python\u591a\u7ebf\u7a0b\u53ef\u4ee5\u5728\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b9e\u73b0\u591a\u4efb\u52a1\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u4f7f\u7528\u8ba1\u7b97\u673a\u7684\u8d44\u6e90\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\u3002","title":"\u4e00\u3001\u5f15\u8a00"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_4","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684Python\u591a\u7ebf\u7a0b\u793a\u4f8b\uff0c\u7528\u6765\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u7684\u548c\uff1a import threading def sum ( a , b ): print ( a + b ) t1 = threading . Thread ( target = sum , args = ( 2 , 3 )) t1 . start ()","title":"\u4e8c\u3001\u4f7f\u7528\u793a\u4f8b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_5","text":"\u521b\u5efa\u7ebf\u7a0b\uff1a threading . Thread ( target = \u51fd\u6570\u540d , args = ( \u53c2\u65701 \uff0c \u53c2\u65702 ... )) \u542f\u52a8\u7ebf\u7a0b\uff1a t1.start() \u9501\u5b9a\u7ebf\u7a0b\uff1a threading.Lock() \u8fde\u63a5\u7ebf\u7a0b\uff1a t1.join() \u4eceLinux\u8d44\u6e90\u7ba1\u7406\u89d2\u5ea6\u51fa\u53d1\uff0c\u53ef\u4ee5\u4f7f\u7528Python\u591a\u7ebf\u7a0b\u6765\u9650\u5236\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u63a7\u5236CPU\u7684\u5229\u7528\u7387\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u3002","title":"\u4e09\u3001\u7528\u6cd5\u6307\u5357"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_6","text":"Python\u4e2d\u7684\u591a\u8fdb\u7a0b\u662f\u6307\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u3002\u8fd9\u79cd\u6280\u672f\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5e76\u4e14\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u5bb9\u6613\u7ba1\u7406\u3002 \u4f7f\u7528\u793a\u4f8b\uff1a \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528Python\u5b9e\u73b0\u591a\u8fdb\u7a0b\u7684\u793a\u4f8b\uff1a import os from multiprocessing import Process def run_process ( name ): print ( 'Run child process %s ( %s )...' % ( name , os . getpid ())) if __name__ == '__main__' : print ( 'Parent process %s .' % os . getpid ()) p = Process ( target = run_process , args = ( 'test' ,)) print ( 'Child process will start.' ) p . start () p . join () print ( 'Child process end.' ) \u7528\u6cd5\u6307\u5357\uff1a \u4f7f\u7528multiprocessing\u6a21\u5757\uff1a \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ecePython\u7684\u6807\u51c6\u5e93\u4e2d\u5bfc\u5165multiprocessing\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u8fdb\u7a0b\u7684\u51fd\u6570\u3002 \u521b\u5efa\u8fdb\u7a0b\uff1a \u4f7f\u7528multiprocessing\u6a21\u5757\u4e2d\u7684Process\u7c7b\u6765\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8be5\u7c7b\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u4f5c\u4e3a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002 \u542f\u52a8\u8fdb\u7a0b\uff1a \u4f7f\u7528Process\u7c7b\u7684start()\u65b9\u6cd5\u6765\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8be5\u65b9\u6cd5\u5c06\u8c03\u7528\u6307\u5b9a\u7684\u51fd\u6570\u5e76\u5f00\u59cb\u6267\u884c\u3002 \u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\uff1a \u4f7f\u7528Process\u7c7b\u7684join()\u65b9\u6cd5\u6765\u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\uff0c\u8be5\u65b9\u6cd5\u5c06\u963b\u585e\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7684\u8fdb\u7a0b\u7ed3\u675f\u3002 \u4eceLinux\u8d44\u6e90\u7ba1\u7406\u89d2\u5ea6\u51fa\u53d1\uff0cPython\u4e2d\u7684\u591a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u6548\u5730\u5229\u7528\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u5b83\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u5bb9\u6613\u7ba1\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u5229\u7528\u591a\u6838\u5904\u7406\u5668\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u3002 from multiprocessing import Pool def f ( x ): return x * x if __name__ == '__main__' : with Pool ( 5 ) as p : print ( p . map ( f , [ 1 , 2 , 3 ])) map()\u51fd\u6570\u7528\u4e8e\u5c06\u6307\u5b9a\u51fd\u6570func\u4f5c\u7528\u5230\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u8fd4\u56de\u3002 chunksize\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u4e00\u6b21\u8fed\u4ee3\u6240\u6709\u5143\u7d20\u3002","title":"\u591a\u8fdb\u7a0b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_7","text":"\u534f\u7a0b\u662f\u4e00\u79cd\u7528\u4e8e\u6539\u5584\u7a0b\u5e8f\u6027\u80fd\u7684\u6280\u672f\uff0c\u5b83\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u4efb\u52a1\u4e4b\u95f4\u5207\u6362\uff0c\u800c\u4e0d\u4f1a\u6d88\u8017\u592a\u591a\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u3002\u534f\u7a0b\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u9ad8\u6548\uff0c\u51cf\u5c11\u7b49\u5f85\u65f6\u95f4\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u9760\u6027\u548c\u6027\u80fd\uff0c\u5e76\u6709\u52a9\u4e8e\u51cf\u5c11\u8d44\u6e90\u6d88\u8017\u3002","title":"\u534f\u7a0b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_8","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528python\u534f\u7a0b\u7684\u793a\u4f8b\uff1a import asyncio async def my_coroutine (): print ( \"I'm a coroutine!\" ) loop = asyncio . get_event_loop () loop . run_until_complete ( my_coroutine ()) loop . close () \u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528asyncio\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\uff0c\u7136\u540e\u4f7f\u7528get_event_loop()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u6700\u540e\u4f7f\u7528run_until_complete()\u51fd\u6570\u8fd0\u884c\u534f\u7a0b\uff0c\u6700\u540e\u5173\u95ed\u4e8b\u4ef6\u5faa\u73af\u3002","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#_9","text":"","title":"\u7528\u6cd5\u6307\u5357"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#1","text":"\u8981\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\uff0c\u9700\u8981\u4f7f\u7528async\u5173\u952e\u5b57\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\uff0c\u4f8b\u5982\uff1a async def my_coroutine (): print ( \"I'm a coroutine!\" )","title":"1. \u521b\u5efa\u534f\u7a0b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#2","text":"\u8981\u8fd0\u884c\u534f\u7a0b\uff0c\u9700\u8981\u4f7f\u7528asyncio\u6a21\u5757\u7684get_event_loop()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u4f7f\u7528run_until_complete()\u51fd\u6570\u8fd0\u884c\u534f\u7a0b\uff0c\u4f8b\u5982\uff1a loop = asyncio . get_event_loop () loop . run_until_complete ( my_coroutine ()) loop . close ()","title":"2. \u8fd0\u884c\u534f\u7a0b"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#3","text":"\u8981\u5c06\u534f\u7a0b\u653e\u5165\u4efb\u52a1\u961f\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528asyncio\u6a21\u5757\u7684create_task()\u51fd\u6570\uff0c\u4f8b\u5982\uff1a task = asyncio . create_task ( my_coroutine ())","title":"3. \u5c06\u534f\u7a0b\u653e\u5165\u4efb\u52a1\u961f\u5217"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#4","text":"\u8981\u5c06\u4efb\u52a1\u653e\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u4f7f\u7528asyncio\u6a21\u5757\u7684run_until_complete()\u51fd\u6570\uff0c\u4f8b\u5982\uff1a loop = asyncio . get_event_loop () loop . run_until_complete ( task )","title":"4. \u5c06\u4efb\u52a1\u653e\u5165\u4e8b\u4ef6\u5faa\u73af"},{"location":"Python/Python/Ox06%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/#5-linux","text":"\u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528cgroups\u6280\u672f\u6765\u7ba1\u7406\u534f\u7a0b\uff0c\u4ee5\u63a7\u5236\u5176\u4f7f\u7528\u7684\u8d44\u6e90\uff0c\u4f8b\u5982\uff1a # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3amy_cgroup\u7684cgroup sudo cgcreate -g cpu,memory,blkio:my_cgroup # \u5c06\u534f\u7a0b\u653e\u5165my_cgroup sudo cgclassify -g cpu,memory,blkio:my_cgroup my_coroutine # \u8bbe\u7f6emy_cgroup\u7684CPU\u9650\u5236 sudo cgset -r cpu.cfs_quota_us = 1000 my_cgroup # \u8bbe\u7f6emy_cgroup\u7684\u5185\u5b58\u9650\u5236 sudo cgset -r memory.limit_in_bytes = 1024 my_cgroup \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u540d\u4e3amy_cgroup\u7684cgroup\uff0c\u5e76\u5c06\u534f\u7a0b\u653e\u5165my_cgroup\uff0c\u7136\u540e\u8bbe\u7f6emy_cgroup\u7684CPU\u548c\u5185\u5b58\u9650\u5236\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u63a7\u5236\u534f\u7a0b\u4f7f\u7528\u7684\u8d44\u6e90\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd\u3002","title":"5. \u4f7f\u7528Linux\u8d44\u6e90\u7ba1\u7406"}]}